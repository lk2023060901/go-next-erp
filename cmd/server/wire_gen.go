// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"context"
	"github.com/go-kratos/kratos/v2"
	"github.com/go-kratos/kratos/v2/log"
	"github.com/lk2023060901/go-next-erp/internal/adapter"
	"github.com/lk2023060901/go-next-erp/internal/approval"
	repository5 "github.com/lk2023060901/go-next-erp/internal/approval/repository"
	service3 "github.com/lk2023060901/go-next-erp/internal/approval/service"
	"github.com/lk2023060901/go-next-erp/internal/auth"
	"github.com/lk2023060901/go-next-erp/internal/auth/authentication"
	"github.com/lk2023060901/go-next-erp/internal/auth/authorization"
	"github.com/lk2023060901/go-next-erp/internal/auth/repository"
	"github.com/lk2023060901/go-next-erp/internal/conf"
	"github.com/lk2023060901/go-next-erp/internal/file"
	repository6 "github.com/lk2023060901/go-next-erp/internal/file/repository"
	service4 "github.com/lk2023060901/go-next-erp/internal/file/service"
	repository2 "github.com/lk2023060901/go-next-erp/internal/form/repository"
	"github.com/lk2023060901/go-next-erp/internal/hrm/handler"
	"github.com/lk2023060901/go-next-erp/internal/hrm/repository/postgres"
	service5 "github.com/lk2023060901/go-next-erp/internal/hrm/service"
	"github.com/lk2023060901/go-next-erp/internal/notification"
	repository4 "github.com/lk2023060901/go-next-erp/internal/notification/repository"
	service2 "github.com/lk2023060901/go-next-erp/internal/notification/service"
	"github.com/lk2023060901/go-next-erp/internal/notification/websocket"
	repository3 "github.com/lk2023060901/go-next-erp/internal/organization/repository"
	"github.com/lk2023060901/go-next-erp/internal/organization/service"
	"github.com/lk2023060901/go-next-erp/internal/server"
	"github.com/lk2023060901/go-next-erp/pkg"
)

// Injectors from wire.go:

// wireApp 通过 Wire 进行依赖注入
func wireApp(contextContext context.Context, config *conf.Config, logger log.Logger) (*kratos.App, func(), error) {
	jwtConfig := auth.ProvideJWTConfig(config)
	manager := auth.ProvideJWTManager(jwtConfig)
	db, cleanup, err := pkg.ProvideDatabase(contextContext, config)
	if err != nil {
		return nil, nil, err
	}
	redis, cleanup2, err := pkg.ProvideCache(contextContext, config)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	userRepository := repository.NewUserRepository(db, redis)
	sessionRepository := repository.NewSessionRepository(db, redis)
	auditLogRepository := repository.NewAuditLogRepository(db)
	authenticationService := authentication.NewService(userRepository, sessionRepository, auditLogRepository, jwtConfig)
	authAdapter := adapter.NewAuthAdapter(authenticationService, userRepository)
	roleRepository := repository.NewRoleRepository(db, redis)
	permissionRepository := repository.NewPermissionRepository(db, redis)
	policyRepository := repository.NewPolicyRepository(db, redis)
	relationRepository := repository.NewRelationRepository(db, redis)
	authorizationService := authorization.NewService(roleRepository, permissionRepository, policyRepository, userRepository, relationRepository, auditLogRepository, redis)
	userAdapter := adapter.NewUserAdapter(userRepository, roleRepository, authorizationService)
	roleAdapter := adapter.NewRoleAdapter(roleRepository, permissionRepository)
	formDefinitionRepository := repository2.NewFormDefinitionRepository(db)
	formDataRepository := repository2.NewFormDataRepository(db)
	formAdapter := adapter.NewFormAdapter(formDefinitionRepository, formDataRepository)
	organizationRepository := repository3.NewOrganizationRepository(db)
	closureRepository := repository3.NewClosureRepository(db)
	organizationTypeRepository := repository3.NewOrganizationTypeRepository(db)
	employeeRepository := repository3.NewEmployeeRepository(db)
	organizationService := service.NewOrganizationService(db, organizationRepository, closureRepository, organizationTypeRepository, employeeRepository)
	positionRepository := repository3.NewPositionRepository(db)
	employeeService := service.NewEmployeeService(employeeRepository, organizationRepository, positionRepository)
	organizationAdapter := adapter.NewOrganizationAdapter(organizationService, employeeService, organizationTypeRepository)
	notificationRepository := repository4.NewNotificationRepository(db)
	emailConfig := notification.ProvideEmailConfig()
	notificationService := service2.NewNotificationService(notificationRepository, emailConfig)
	notificationAdapter := adapter.NewNotificationAdapter(notificationService)
	processDefinitionRepository := repository5.NewProcessDefinitionRepository(db)
	processInstanceRepository := repository5.NewProcessInstanceRepository(db)
	approvalTaskRepository := repository5.NewApprovalTaskRepository(db)
	processHistoryRepository := repository5.NewProcessHistoryRepository(db)
	engine := approval.ProvideWorkflowEngine()
	assigneeResolver := service3.NewAssigneeResolver(userRepository, employeeService, organizationService)
	approvalService := service3.NewApprovalService(processDefinitionRepository, processInstanceRepository, approvalTaskRepository, processHistoryRepository, formDefinitionRepository, formDataRepository, engine, assigneeResolver, authorizationService, notificationService)
	approvalAdapter := adapter.NewApprovalAdapter(approvalService)
	fileRepository := repository6.NewFileRepository(db, redis)
	quotaRepository := repository6.NewQuotaRepository(db)
	storage, cleanup3, err := pkg.ProvideStorage(contextContext, config)
	if err != nil {
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	loggerLogger, cleanup4, err := pkg.ProvideLogger()
	if err != nil {
		cleanup3()
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	uploadServiceConfig := file.ProvideUploadServiceConfig()
	uploadService := service4.NewUploadService(fileRepository, quotaRepository, storage, loggerLogger, uploadServiceConfig)
	downloadStatsRepository := repository6.NewDownloadStatsRepository(db, redis)
	downloadService := service4.NewDownloadService(fileRepository, downloadStatsRepository, storage, loggerLogger)
	quotaServiceConfig := file.ProvideQuotaServiceConfig()
	quotaService := service4.NewQuotaService(fileRepository, quotaRepository, loggerLogger, quotaServiceConfig)
	multipartUploadRepository := repository6.NewMultipartUploadRepository(db)
	multipartUploadServiceConfig := file.ProvideMultipartUploadServiceConfig()
	multipartUploadService := service4.NewMultipartUploadService(fileRepository, quotaRepository, multipartUploadRepository, storage, loggerLogger, multipartUploadServiceConfig)
	fileAdapter := adapter.NewFileAdapter(fileRepository, uploadService, downloadService, quotaService, multipartUploadService)
	attendanceRecordRepository := postgres.NewAttendanceRecordRepository(db)
	shiftRepository := postgres.NewShiftRepository(db)
	scheduleRepository := postgres.NewScheduleRepository(db)
	attendanceRuleRepository := postgres.NewAttendanceRuleRepository(db)
	hrmEmployeeRepository := postgres.NewHRMEmployeeRepository(db)
	attendanceService := service5.NewAttendanceService(attendanceRecordRepository, shiftRepository, scheduleRepository, attendanceRuleRepository, hrmEmployeeRepository)
	attendanceHandler := handler.NewAttendanceHandler(attendanceService)
	shiftService := service5.NewShiftService(shiftRepository)
	shiftHandler := handler.NewShiftHandler(shiftService)
	scheduleService := service5.NewScheduleService(scheduleRepository, shiftRepository, hrmEmployeeRepository, db)
	scheduleHandler := handler.NewScheduleHandler(scheduleService)
	attendanceRuleService := service5.NewAttendanceRuleService(attendanceRuleRepository)
	attendanceRuleHandler := handler.NewAttendanceRuleHandler(attendanceRuleService)
	overtimeRepository := postgres.NewOvertimeRepository(db)
	overtimeService := service5.NewOvertimeService(db, overtimeRepository, engine)
	overtimeHandler := handler.NewOvertimeHandler(overtimeService)
	leaveTypeRepository := postgres.NewLeaveTypeRepository(db)
	leaveQuotaRepository := postgres.NewLeaveQuotaRepository(db)
	leaveRequestRepository := postgres.NewLeaveRequestRepository(db)
	leaveApprovalRepository := postgres.NewLeaveApprovalRepository(db)
	leaveService := service5.NewLeaveService(db, leaveTypeRepository, leaveQuotaRepository, leaveRequestRepository, leaveApprovalRepository, engine)
	leaveHandler := handler.NewLeaveHandler(leaveService)
	businessTripRepository := postgres.NewBusinessTripRepository(db)
	businessTripService := service5.NewBusinessTripService(db, businessTripRepository, engine)
	businessTripHandler := handler.NewBusinessTripHandler(businessTripService)
	leaveOfficeRepository := postgres.NewLeaveOfficeRepository(db)
	leaveOfficeService := service5.NewLeaveOfficeService(db, leaveOfficeRepository, engine)
	leaveOfficeHandler := handler.NewLeaveOfficeHandler(leaveOfficeService)
	hrmAdapter := adapter.NewHRMAdapter(attendanceHandler, shiftHandler, scheduleHandler, attendanceRuleHandler, overtimeHandler, leaveHandler, businessTripHandler, leaveOfficeHandler)
	hub := websocket.NewHub()
	websocketHandler := websocket.NewHandler(hub, manager, notificationService)
	httpServer := server.NewHTTPServer(config, manager, authAdapter, userAdapter, roleAdapter, formAdapter, organizationAdapter, notificationAdapter, approvalAdapter, fileAdapter, hrmAdapter, notificationService, hub, websocketHandler, logger)
	grpcServer := server.NewGRPCServer(config, manager, authAdapter, userAdapter, roleAdapter, formAdapter, organizationAdapter, notificationAdapter, approvalAdapter, fileAdapter, hrmAdapter, logger)
	app := newApp(logger, httpServer, grpcServer)
	return app, func() {
		cleanup4()
		cleanup3()
		cleanup2()
		cleanup()
	}, nil
}
