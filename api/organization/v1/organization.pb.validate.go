// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/organization/v1/organization.proto

package organizationv1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CreateOrganizationRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateOrganizationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateOrganizationRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateOrganizationRequestMultiError, or nil if none found.
func (m *CreateOrganizationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateOrganizationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TenantId

	// no validation rules for ParentId

	// no validation rules for Name

	// no validation rules for Code

	// no validation rules for Type

	// no validation rules for Sort

	if len(errors) > 0 {
		return CreateOrganizationRequestMultiError(errors)
	}

	return nil
}

// CreateOrganizationRequestMultiError is an error wrapping multiple validation
// errors returned by CreateOrganizationRequest.ValidateAll() if the
// designated constraints aren't met.
type CreateOrganizationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateOrganizationRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateOrganizationRequestMultiError) AllErrors() []error { return m }

// CreateOrganizationRequestValidationError is the validation error returned by
// CreateOrganizationRequest.Validate if the designated constraints aren't met.
type CreateOrganizationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateOrganizationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateOrganizationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateOrganizationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateOrganizationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateOrganizationRequestValidationError) ErrorName() string {
	return "CreateOrganizationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateOrganizationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateOrganizationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateOrganizationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateOrganizationRequestValidationError{}

// Validate checks the field values on GetOrganizationRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetOrganizationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetOrganizationRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetOrganizationRequestMultiError, or nil if none found.
func (m *GetOrganizationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetOrganizationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetOrganizationRequestMultiError(errors)
	}

	return nil
}

// GetOrganizationRequestMultiError is an error wrapping multiple validation
// errors returned by GetOrganizationRequest.ValidateAll() if the designated
// constraints aren't met.
type GetOrganizationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetOrganizationRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetOrganizationRequestMultiError) AllErrors() []error { return m }

// GetOrganizationRequestValidationError is the validation error returned by
// GetOrganizationRequest.Validate if the designated constraints aren't met.
type GetOrganizationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOrganizationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOrganizationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOrganizationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOrganizationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOrganizationRequestValidationError) ErrorName() string {
	return "GetOrganizationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetOrganizationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOrganizationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOrganizationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOrganizationRequestValidationError{}

// Validate checks the field values on UpdateOrganizationRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateOrganizationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateOrganizationRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateOrganizationRequestMultiError, or nil if none found.
func (m *UpdateOrganizationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateOrganizationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Code

	// no validation rules for Sort

	if len(errors) > 0 {
		return UpdateOrganizationRequestMultiError(errors)
	}

	return nil
}

// UpdateOrganizationRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateOrganizationRequest.ValidateAll() if the
// designated constraints aren't met.
type UpdateOrganizationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateOrganizationRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateOrganizationRequestMultiError) AllErrors() []error { return m }

// UpdateOrganizationRequestValidationError is the validation error returned by
// UpdateOrganizationRequest.Validate if the designated constraints aren't met.
type UpdateOrganizationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateOrganizationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateOrganizationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateOrganizationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateOrganizationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateOrganizationRequestValidationError) ErrorName() string {
	return "UpdateOrganizationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateOrganizationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateOrganizationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateOrganizationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateOrganizationRequestValidationError{}

// Validate checks the field values on DeleteOrganizationRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteOrganizationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteOrganizationRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteOrganizationRequestMultiError, or nil if none found.
func (m *DeleteOrganizationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteOrganizationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DeleteOrganizationRequestMultiError(errors)
	}

	return nil
}

// DeleteOrganizationRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteOrganizationRequest.ValidateAll() if the
// designated constraints aren't met.
type DeleteOrganizationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteOrganizationRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteOrganizationRequestMultiError) AllErrors() []error { return m }

// DeleteOrganizationRequestValidationError is the validation error returned by
// DeleteOrganizationRequest.Validate if the designated constraints aren't met.
type DeleteOrganizationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteOrganizationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteOrganizationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteOrganizationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteOrganizationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteOrganizationRequestValidationError) ErrorName() string {
	return "DeleteOrganizationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteOrganizationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteOrganizationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteOrganizationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteOrganizationRequestValidationError{}

// Validate checks the field values on ListOrganizationsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListOrganizationsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListOrganizationsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListOrganizationsRequestMultiError, or nil if none found.
func (m *ListOrganizationsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListOrganizationsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TenantId

	// no validation rules for ParentId

	if len(errors) > 0 {
		return ListOrganizationsRequestMultiError(errors)
	}

	return nil
}

// ListOrganizationsRequestMultiError is an error wrapping multiple validation
// errors returned by ListOrganizationsRequest.ValidateAll() if the designated
// constraints aren't met.
type ListOrganizationsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListOrganizationsRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListOrganizationsRequestMultiError) AllErrors() []error { return m }

// ListOrganizationsRequestValidationError is the validation error returned by
// ListOrganizationsRequest.Validate if the designated constraints aren't met.
type ListOrganizationsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListOrganizationsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListOrganizationsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListOrganizationsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListOrganizationsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListOrganizationsRequestValidationError) ErrorName() string {
	return "ListOrganizationsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListOrganizationsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListOrganizationsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListOrganizationsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListOrganizationsRequestValidationError{}

// Validate checks the field values on GetOrganizationTreeRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetOrganizationTreeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetOrganizationTreeRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetOrganizationTreeRequestMultiError, or nil if none found.
func (m *GetOrganizationTreeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetOrganizationTreeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TenantId

	if len(errors) > 0 {
		return GetOrganizationTreeRequestMultiError(errors)
	}

	return nil
}

// GetOrganizationTreeRequestMultiError is an error wrapping multiple
// validation errors returned by GetOrganizationTreeRequest.ValidateAll() if
// the designated constraints aren't met.
type GetOrganizationTreeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetOrganizationTreeRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetOrganizationTreeRequestMultiError) AllErrors() []error { return m }

// GetOrganizationTreeRequestValidationError is the validation error returned
// by GetOrganizationTreeRequest.Validate if the designated constraints aren't met.
type GetOrganizationTreeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOrganizationTreeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOrganizationTreeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOrganizationTreeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOrganizationTreeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOrganizationTreeRequestValidationError) ErrorName() string {
	return "GetOrganizationTreeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetOrganizationTreeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOrganizationTreeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOrganizationTreeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOrganizationTreeRequestValidationError{}

// Validate checks the field values on OrganizationResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *OrganizationResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OrganizationResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// OrganizationResponseMultiError, or nil if none found.
func (m *OrganizationResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *OrganizationResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for TenantId

	// no validation rules for ParentId

	// no validation rules for Name

	// no validation rules for Code

	// no validation rules for Type

	// no validation rules for Path

	// no validation rules for Level

	// no validation rules for Sort

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	if len(errors) > 0 {
		return OrganizationResponseMultiError(errors)
	}

	return nil
}

// OrganizationResponseMultiError is an error wrapping multiple validation
// errors returned by OrganizationResponse.ValidateAll() if the designated
// constraints aren't met.
type OrganizationResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OrganizationResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OrganizationResponseMultiError) AllErrors() []error { return m }

// OrganizationResponseValidationError is the validation error returned by
// OrganizationResponse.Validate if the designated constraints aren't met.
type OrganizationResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OrganizationResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OrganizationResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OrganizationResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OrganizationResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OrganizationResponseValidationError) ErrorName() string {
	return "OrganizationResponseValidationError"
}

// Error satisfies the builtin error interface
func (e OrganizationResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOrganizationResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OrganizationResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OrganizationResponseValidationError{}

// Validate checks the field values on DeleteOrganizationResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteOrganizationResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteOrganizationResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteOrganizationResponseMultiError, or nil if none found.
func (m *DeleteOrganizationResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteOrganizationResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	if len(errors) > 0 {
		return DeleteOrganizationResponseMultiError(errors)
	}

	return nil
}

// DeleteOrganizationResponseMultiError is an error wrapping multiple
// validation errors returned by DeleteOrganizationResponse.ValidateAll() if
// the designated constraints aren't met.
type DeleteOrganizationResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteOrganizationResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteOrganizationResponseMultiError) AllErrors() []error { return m }

// DeleteOrganizationResponseValidationError is the validation error returned
// by DeleteOrganizationResponse.Validate if the designated constraints aren't met.
type DeleteOrganizationResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteOrganizationResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteOrganizationResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteOrganizationResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteOrganizationResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteOrganizationResponseValidationError) ErrorName() string {
	return "DeleteOrganizationResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteOrganizationResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteOrganizationResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteOrganizationResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteOrganizationResponseValidationError{}

// Validate checks the field values on ListOrganizationsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListOrganizationsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListOrganizationsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListOrganizationsResponseMultiError, or nil if none found.
func (m *ListOrganizationsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListOrganizationsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListOrganizationsResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListOrganizationsResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListOrganizationsResponseValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Total

	if len(errors) > 0 {
		return ListOrganizationsResponseMultiError(errors)
	}

	return nil
}

// ListOrganizationsResponseMultiError is an error wrapping multiple validation
// errors returned by ListOrganizationsResponse.ValidateAll() if the
// designated constraints aren't met.
type ListOrganizationsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListOrganizationsResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListOrganizationsResponseMultiError) AllErrors() []error { return m }

// ListOrganizationsResponseValidationError is the validation error returned by
// ListOrganizationsResponse.Validate if the designated constraints aren't met.
type ListOrganizationsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListOrganizationsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListOrganizationsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListOrganizationsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListOrganizationsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListOrganizationsResponseValidationError) ErrorName() string {
	return "ListOrganizationsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListOrganizationsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListOrganizationsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListOrganizationsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListOrganizationsResponseValidationError{}

// Validate checks the field values on OrganizationTreeNode with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *OrganizationTreeNode) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OrganizationTreeNode with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// OrganizationTreeNodeMultiError, or nil if none found.
func (m *OrganizationTreeNode) ValidateAll() error {
	return m.validate(true)
}

func (m *OrganizationTreeNode) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Code

	// no validation rules for Type

	for idx, item := range m.GetChildren() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, OrganizationTreeNodeValidationError{
						field:  fmt.Sprintf("Children[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, OrganizationTreeNodeValidationError{
						field:  fmt.Sprintf("Children[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return OrganizationTreeNodeValidationError{
					field:  fmt.Sprintf("Children[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return OrganizationTreeNodeMultiError(errors)
	}

	return nil
}

// OrganizationTreeNodeMultiError is an error wrapping multiple validation
// errors returned by OrganizationTreeNode.ValidateAll() if the designated
// constraints aren't met.
type OrganizationTreeNodeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OrganizationTreeNodeMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OrganizationTreeNodeMultiError) AllErrors() []error { return m }

// OrganizationTreeNodeValidationError is the validation error returned by
// OrganizationTreeNode.Validate if the designated constraints aren't met.
type OrganizationTreeNodeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OrganizationTreeNodeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OrganizationTreeNodeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OrganizationTreeNodeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OrganizationTreeNodeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OrganizationTreeNodeValidationError) ErrorName() string {
	return "OrganizationTreeNodeValidationError"
}

// Error satisfies the builtin error interface
func (e OrganizationTreeNodeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOrganizationTreeNode.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OrganizationTreeNodeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OrganizationTreeNodeValidationError{}

// Validate checks the field values on OrganizationTreeResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *OrganizationTreeResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OrganizationTreeResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// OrganizationTreeResponseMultiError, or nil if none found.
func (m *OrganizationTreeResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *OrganizationTreeResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetNodes() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, OrganizationTreeResponseValidationError{
						field:  fmt.Sprintf("Nodes[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, OrganizationTreeResponseValidationError{
						field:  fmt.Sprintf("Nodes[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return OrganizationTreeResponseValidationError{
					field:  fmt.Sprintf("Nodes[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return OrganizationTreeResponseMultiError(errors)
	}

	return nil
}

// OrganizationTreeResponseMultiError is an error wrapping multiple validation
// errors returned by OrganizationTreeResponse.ValidateAll() if the designated
// constraints aren't met.
type OrganizationTreeResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OrganizationTreeResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OrganizationTreeResponseMultiError) AllErrors() []error { return m }

// OrganizationTreeResponseValidationError is the validation error returned by
// OrganizationTreeResponse.Validate if the designated constraints aren't met.
type OrganizationTreeResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OrganizationTreeResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OrganizationTreeResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OrganizationTreeResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OrganizationTreeResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OrganizationTreeResponseValidationError) ErrorName() string {
	return "OrganizationTreeResponseValidationError"
}

// Error satisfies the builtin error interface
func (e OrganizationTreeResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOrganizationTreeResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OrganizationTreeResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OrganizationTreeResponseValidationError{}

// Validate checks the field values on CreateEmployeeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateEmployeeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateEmployeeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateEmployeeRequestMultiError, or nil if none found.
func (m *CreateEmployeeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateEmployeeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TenantId

	// no validation rules for UserId

	// no validation rules for OrgId

	// no validation rules for PositionId

	// no validation rules for EmployeeNo

	// no validation rules for Name

	// no validation rules for Mobile

	// no validation rules for Email

	// no validation rules for Status

	if len(errors) > 0 {
		return CreateEmployeeRequestMultiError(errors)
	}

	return nil
}

// CreateEmployeeRequestMultiError is an error wrapping multiple validation
// errors returned by CreateEmployeeRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateEmployeeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateEmployeeRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateEmployeeRequestMultiError) AllErrors() []error { return m }

// CreateEmployeeRequestValidationError is the validation error returned by
// CreateEmployeeRequest.Validate if the designated constraints aren't met.
type CreateEmployeeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateEmployeeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateEmployeeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateEmployeeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateEmployeeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateEmployeeRequestValidationError) ErrorName() string {
	return "CreateEmployeeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateEmployeeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateEmployeeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateEmployeeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateEmployeeRequestValidationError{}

// Validate checks the field values on GetEmployeeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetEmployeeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetEmployeeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetEmployeeRequestMultiError, or nil if none found.
func (m *GetEmployeeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetEmployeeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetEmployeeRequestMultiError(errors)
	}

	return nil
}

// GetEmployeeRequestMultiError is an error wrapping multiple validation errors
// returned by GetEmployeeRequest.ValidateAll() if the designated constraints
// aren't met.
type GetEmployeeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetEmployeeRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetEmployeeRequestMultiError) AllErrors() []error { return m }

// GetEmployeeRequestValidationError is the validation error returned by
// GetEmployeeRequest.Validate if the designated constraints aren't met.
type GetEmployeeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetEmployeeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetEmployeeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetEmployeeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetEmployeeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetEmployeeRequestValidationError) ErrorName() string {
	return "GetEmployeeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetEmployeeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetEmployeeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetEmployeeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetEmployeeRequestValidationError{}

// Validate checks the field values on UpdateEmployeeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateEmployeeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateEmployeeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateEmployeeRequestMultiError, or nil if none found.
func (m *UpdateEmployeeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateEmployeeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for OrgId

	// no validation rules for PositionId

	// no validation rules for Name

	// no validation rules for Mobile

	// no validation rules for Email

	// no validation rules for Status

	if len(errors) > 0 {
		return UpdateEmployeeRequestMultiError(errors)
	}

	return nil
}

// UpdateEmployeeRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateEmployeeRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateEmployeeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateEmployeeRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateEmployeeRequestMultiError) AllErrors() []error { return m }

// UpdateEmployeeRequestValidationError is the validation error returned by
// UpdateEmployeeRequest.Validate if the designated constraints aren't met.
type UpdateEmployeeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateEmployeeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateEmployeeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateEmployeeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateEmployeeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateEmployeeRequestValidationError) ErrorName() string {
	return "UpdateEmployeeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateEmployeeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateEmployeeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateEmployeeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateEmployeeRequestValidationError{}

// Validate checks the field values on DeleteEmployeeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteEmployeeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteEmployeeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteEmployeeRequestMultiError, or nil if none found.
func (m *DeleteEmployeeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteEmployeeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DeleteEmployeeRequestMultiError(errors)
	}

	return nil
}

// DeleteEmployeeRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteEmployeeRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteEmployeeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteEmployeeRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteEmployeeRequestMultiError) AllErrors() []error { return m }

// DeleteEmployeeRequestValidationError is the validation error returned by
// DeleteEmployeeRequest.Validate if the designated constraints aren't met.
type DeleteEmployeeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteEmployeeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteEmployeeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteEmployeeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteEmployeeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteEmployeeRequestValidationError) ErrorName() string {
	return "DeleteEmployeeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteEmployeeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteEmployeeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteEmployeeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteEmployeeRequestValidationError{}

// Validate checks the field values on ListEmployeesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListEmployeesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListEmployeesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListEmployeesRequestMultiError, or nil if none found.
func (m *ListEmployeesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListEmployeesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TenantId

	// no validation rules for OrgId

	// no validation rules for Page

	// no validation rules for PageSize

	if len(errors) > 0 {
		return ListEmployeesRequestMultiError(errors)
	}

	return nil
}

// ListEmployeesRequestMultiError is an error wrapping multiple validation
// errors returned by ListEmployeesRequest.ValidateAll() if the designated
// constraints aren't met.
type ListEmployeesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListEmployeesRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListEmployeesRequestMultiError) AllErrors() []error { return m }

// ListEmployeesRequestValidationError is the validation error returned by
// ListEmployeesRequest.Validate if the designated constraints aren't met.
type ListEmployeesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListEmployeesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListEmployeesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListEmployeesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListEmployeesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListEmployeesRequestValidationError) ErrorName() string {
	return "ListEmployeesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListEmployeesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListEmployeesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListEmployeesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListEmployeesRequestValidationError{}

// Validate checks the field values on EmployeeResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *EmployeeResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EmployeeResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// EmployeeResponseMultiError, or nil if none found.
func (m *EmployeeResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *EmployeeResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for TenantId

	// no validation rules for UserId

	// no validation rules for OrgId

	// no validation rules for OrgName

	// no validation rules for PositionId

	// no validation rules for PositionName

	// no validation rules for EmployeeNo

	// no validation rules for Name

	// no validation rules for Mobile

	// no validation rules for Email

	// no validation rules for Status

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	if len(errors) > 0 {
		return EmployeeResponseMultiError(errors)
	}

	return nil
}

// EmployeeResponseMultiError is an error wrapping multiple validation errors
// returned by EmployeeResponse.ValidateAll() if the designated constraints
// aren't met.
type EmployeeResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EmployeeResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EmployeeResponseMultiError) AllErrors() []error { return m }

// EmployeeResponseValidationError is the validation error returned by
// EmployeeResponse.Validate if the designated constraints aren't met.
type EmployeeResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EmployeeResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EmployeeResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EmployeeResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EmployeeResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EmployeeResponseValidationError) ErrorName() string { return "EmployeeResponseValidationError" }

// Error satisfies the builtin error interface
func (e EmployeeResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEmployeeResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EmployeeResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EmployeeResponseValidationError{}

// Validate checks the field values on DeleteEmployeeResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteEmployeeResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteEmployeeResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteEmployeeResponseMultiError, or nil if none found.
func (m *DeleteEmployeeResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteEmployeeResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	if len(errors) > 0 {
		return DeleteEmployeeResponseMultiError(errors)
	}

	return nil
}

// DeleteEmployeeResponseMultiError is an error wrapping multiple validation
// errors returned by DeleteEmployeeResponse.ValidateAll() if the designated
// constraints aren't met.
type DeleteEmployeeResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteEmployeeResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteEmployeeResponseMultiError) AllErrors() []error { return m }

// DeleteEmployeeResponseValidationError is the validation error returned by
// DeleteEmployeeResponse.Validate if the designated constraints aren't met.
type DeleteEmployeeResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteEmployeeResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteEmployeeResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteEmployeeResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteEmployeeResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteEmployeeResponseValidationError) ErrorName() string {
	return "DeleteEmployeeResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteEmployeeResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteEmployeeResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteEmployeeResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteEmployeeResponseValidationError{}

// Validate checks the field values on ListEmployeesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListEmployeesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListEmployeesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListEmployeesResponseMultiError, or nil if none found.
func (m *ListEmployeesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListEmployeesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListEmployeesResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListEmployeesResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListEmployeesResponseValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Total

	if len(errors) > 0 {
		return ListEmployeesResponseMultiError(errors)
	}

	return nil
}

// ListEmployeesResponseMultiError is an error wrapping multiple validation
// errors returned by ListEmployeesResponse.ValidateAll() if the designated
// constraints aren't met.
type ListEmployeesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListEmployeesResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListEmployeesResponseMultiError) AllErrors() []error { return m }

// ListEmployeesResponseValidationError is the validation error returned by
// ListEmployeesResponse.Validate if the designated constraints aren't met.
type ListEmployeesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListEmployeesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListEmployeesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListEmployeesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListEmployeesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListEmployeesResponseValidationError) ErrorName() string {
	return "ListEmployeesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListEmployeesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListEmployeesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListEmployeesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListEmployeesResponseValidationError{}
