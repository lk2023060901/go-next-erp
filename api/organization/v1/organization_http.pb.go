// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.9.0
// - protoc             (unknown)
// source: api/organization/v1/organization.proto

package organizationv1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationOrganizationServiceCreateOrganization = "/api.organization.v1.OrganizationService/CreateOrganization"
const OperationOrganizationServiceDeleteOrganization = "/api.organization.v1.OrganizationService/DeleteOrganization"
const OperationOrganizationServiceGetOrganization = "/api.organization.v1.OrganizationService/GetOrganization"
const OperationOrganizationServiceGetOrganizationTree = "/api.organization.v1.OrganizationService/GetOrganizationTree"
const OperationOrganizationServiceListOrganizations = "/api.organization.v1.OrganizationService/ListOrganizations"
const OperationOrganizationServiceUpdateOrganization = "/api.organization.v1.OrganizationService/UpdateOrganization"

type OrganizationServiceHTTPServer interface {
	// CreateOrganization 创建组织
	CreateOrganization(context.Context, *CreateOrganizationRequest) (*OrganizationResponse, error)
	// DeleteOrganization 删除组织
	DeleteOrganization(context.Context, *DeleteOrganizationRequest) (*DeleteOrganizationResponse, error)
	// GetOrganization 获取组织
	GetOrganization(context.Context, *GetOrganizationRequest) (*OrganizationResponse, error)
	// GetOrganizationTree 获取组织树
	GetOrganizationTree(context.Context, *GetOrganizationTreeRequest) (*OrganizationTreeResponse, error)
	// ListOrganizations 列出组织
	ListOrganizations(context.Context, *ListOrganizationsRequest) (*ListOrganizationsResponse, error)
	// UpdateOrganization 更新组织
	UpdateOrganization(context.Context, *UpdateOrganizationRequest) (*OrganizationResponse, error)
}

func RegisterOrganizationServiceHTTPServer(s *http.Server, srv OrganizationServiceHTTPServer) {
	r := s.Route("/")
	r.POST("/api/v1/organizations", _OrganizationService_CreateOrganization0_HTTP_Handler(srv))
	r.GET("/api/v1/organizations/tree", _OrganizationService_GetOrganizationTree0_HTTP_Handler(srv))
	r.GET("/api/v1/organizations/{id}", _OrganizationService_GetOrganization0_HTTP_Handler(srv))
	r.PUT("/api/v1/organizations/{id}", _OrganizationService_UpdateOrganization0_HTTP_Handler(srv))
	r.DELETE("/api/v1/organizations/{id}", _OrganizationService_DeleteOrganization0_HTTP_Handler(srv))
	r.GET("/api/v1/organizations", _OrganizationService_ListOrganizations0_HTTP_Handler(srv))
}

func _OrganizationService_CreateOrganization0_HTTP_Handler(srv OrganizationServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateOrganizationRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationOrganizationServiceCreateOrganization)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateOrganization(ctx, req.(*CreateOrganizationRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*OrganizationResponse)
		return ctx.Result(200, reply)
	}
}

func _OrganizationService_GetOrganizationTree0_HTTP_Handler(srv OrganizationServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetOrganizationTreeRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationOrganizationServiceGetOrganizationTree)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetOrganizationTree(ctx, req.(*GetOrganizationTreeRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*OrganizationTreeResponse)
		return ctx.Result(200, reply)
	}
}

func _OrganizationService_GetOrganization0_HTTP_Handler(srv OrganizationServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetOrganizationRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationOrganizationServiceGetOrganization)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetOrganization(ctx, req.(*GetOrganizationRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*OrganizationResponse)
		return ctx.Result(200, reply)
	}
}

func _OrganizationService_UpdateOrganization0_HTTP_Handler(srv OrganizationServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateOrganizationRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationOrganizationServiceUpdateOrganization)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateOrganization(ctx, req.(*UpdateOrganizationRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*OrganizationResponse)
		return ctx.Result(200, reply)
	}
}

func _OrganizationService_DeleteOrganization0_HTTP_Handler(srv OrganizationServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteOrganizationRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationOrganizationServiceDeleteOrganization)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteOrganization(ctx, req.(*DeleteOrganizationRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteOrganizationResponse)
		return ctx.Result(200, reply)
	}
}

func _OrganizationService_ListOrganizations0_HTTP_Handler(srv OrganizationServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListOrganizationsRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationOrganizationServiceListOrganizations)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListOrganizations(ctx, req.(*ListOrganizationsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListOrganizationsResponse)
		return ctx.Result(200, reply)
	}
}

type OrganizationServiceHTTPClient interface {
	// CreateOrganization 创建组织
	CreateOrganization(ctx context.Context, req *CreateOrganizationRequest, opts ...http.CallOption) (rsp *OrganizationResponse, err error)
	// DeleteOrganization 删除组织
	DeleteOrganization(ctx context.Context, req *DeleteOrganizationRequest, opts ...http.CallOption) (rsp *DeleteOrganizationResponse, err error)
	// GetOrganization 获取组织
	GetOrganization(ctx context.Context, req *GetOrganizationRequest, opts ...http.CallOption) (rsp *OrganizationResponse, err error)
	// GetOrganizationTree 获取组织树
	GetOrganizationTree(ctx context.Context, req *GetOrganizationTreeRequest, opts ...http.CallOption) (rsp *OrganizationTreeResponse, err error)
	// ListOrganizations 列出组织
	ListOrganizations(ctx context.Context, req *ListOrganizationsRequest, opts ...http.CallOption) (rsp *ListOrganizationsResponse, err error)
	// UpdateOrganization 更新组织
	UpdateOrganization(ctx context.Context, req *UpdateOrganizationRequest, opts ...http.CallOption) (rsp *OrganizationResponse, err error)
}

type OrganizationServiceHTTPClientImpl struct {
	cc *http.Client
}

func NewOrganizationServiceHTTPClient(client *http.Client) OrganizationServiceHTTPClient {
	return &OrganizationServiceHTTPClientImpl{client}
}

// CreateOrganization 创建组织
func (c *OrganizationServiceHTTPClientImpl) CreateOrganization(ctx context.Context, in *CreateOrganizationRequest, opts ...http.CallOption) (*OrganizationResponse, error) {
	var out OrganizationResponse
	pattern := "/api/v1/organizations"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationOrganizationServiceCreateOrganization))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

// DeleteOrganization 删除组织
func (c *OrganizationServiceHTTPClientImpl) DeleteOrganization(ctx context.Context, in *DeleteOrganizationRequest, opts ...http.CallOption) (*DeleteOrganizationResponse, error) {
	var out DeleteOrganizationResponse
	pattern := "/api/v1/organizations/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationOrganizationServiceDeleteOrganization))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

// GetOrganization 获取组织
func (c *OrganizationServiceHTTPClientImpl) GetOrganization(ctx context.Context, in *GetOrganizationRequest, opts ...http.CallOption) (*OrganizationResponse, error) {
	var out OrganizationResponse
	pattern := "/api/v1/organizations/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationOrganizationServiceGetOrganization))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

// GetOrganizationTree 获取组织树
func (c *OrganizationServiceHTTPClientImpl) GetOrganizationTree(ctx context.Context, in *GetOrganizationTreeRequest, opts ...http.CallOption) (*OrganizationTreeResponse, error) {
	var out OrganizationTreeResponse
	pattern := "/api/v1/organizations/tree"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationOrganizationServiceGetOrganizationTree))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

// ListOrganizations 列出组织
func (c *OrganizationServiceHTTPClientImpl) ListOrganizations(ctx context.Context, in *ListOrganizationsRequest, opts ...http.CallOption) (*ListOrganizationsResponse, error) {
	var out ListOrganizationsResponse
	pattern := "/api/v1/organizations"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationOrganizationServiceListOrganizations))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

// UpdateOrganization 更新组织
func (c *OrganizationServiceHTTPClientImpl) UpdateOrganization(ctx context.Context, in *UpdateOrganizationRequest, opts ...http.CallOption) (*OrganizationResponse, error) {
	var out OrganizationResponse
	pattern := "/api/v1/organizations/{id}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationOrganizationServiceUpdateOrganization))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

const OperationEmployeeServiceCreateEmployee = "/api.organization.v1.EmployeeService/CreateEmployee"
const OperationEmployeeServiceDeleteEmployee = "/api.organization.v1.EmployeeService/DeleteEmployee"
const OperationEmployeeServiceGetEmployee = "/api.organization.v1.EmployeeService/GetEmployee"
const OperationEmployeeServiceListEmployees = "/api.organization.v1.EmployeeService/ListEmployees"
const OperationEmployeeServiceUpdateEmployee = "/api.organization.v1.EmployeeService/UpdateEmployee"

type EmployeeServiceHTTPServer interface {
	// CreateEmployee 创建员工
	CreateEmployee(context.Context, *CreateEmployeeRequest) (*EmployeeResponse, error)
	// DeleteEmployee 删除员工
	DeleteEmployee(context.Context, *DeleteEmployeeRequest) (*DeleteEmployeeResponse, error)
	// GetEmployee 获取员工
	GetEmployee(context.Context, *GetEmployeeRequest) (*EmployeeResponse, error)
	// ListEmployees 列出员工
	ListEmployees(context.Context, *ListEmployeesRequest) (*ListEmployeesResponse, error)
	// UpdateEmployee 更新员工
	UpdateEmployee(context.Context, *UpdateEmployeeRequest) (*EmployeeResponse, error)
}

func RegisterEmployeeServiceHTTPServer(s *http.Server, srv EmployeeServiceHTTPServer) {
	r := s.Route("/")
	r.POST("/api/v1/employees", _EmployeeService_CreateEmployee0_HTTP_Handler(srv))
	r.GET("/api/v1/employees/{id}", _EmployeeService_GetEmployee0_HTTP_Handler(srv))
	r.PUT("/api/v1/employees/{id}", _EmployeeService_UpdateEmployee0_HTTP_Handler(srv))
	r.DELETE("/api/v1/employees/{id}", _EmployeeService_DeleteEmployee0_HTTP_Handler(srv))
	r.GET("/api/v1/employees", _EmployeeService_ListEmployees0_HTTP_Handler(srv))
}

func _EmployeeService_CreateEmployee0_HTTP_Handler(srv EmployeeServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateEmployeeRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationEmployeeServiceCreateEmployee)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateEmployee(ctx, req.(*CreateEmployeeRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*EmployeeResponse)
		return ctx.Result(200, reply)
	}
}

func _EmployeeService_GetEmployee0_HTTP_Handler(srv EmployeeServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetEmployeeRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationEmployeeServiceGetEmployee)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetEmployee(ctx, req.(*GetEmployeeRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*EmployeeResponse)
		return ctx.Result(200, reply)
	}
}

func _EmployeeService_UpdateEmployee0_HTTP_Handler(srv EmployeeServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateEmployeeRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationEmployeeServiceUpdateEmployee)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateEmployee(ctx, req.(*UpdateEmployeeRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*EmployeeResponse)
		return ctx.Result(200, reply)
	}
}

func _EmployeeService_DeleteEmployee0_HTTP_Handler(srv EmployeeServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteEmployeeRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationEmployeeServiceDeleteEmployee)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteEmployee(ctx, req.(*DeleteEmployeeRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteEmployeeResponse)
		return ctx.Result(200, reply)
	}
}

func _EmployeeService_ListEmployees0_HTTP_Handler(srv EmployeeServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListEmployeesRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationEmployeeServiceListEmployees)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListEmployees(ctx, req.(*ListEmployeesRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListEmployeesResponse)
		return ctx.Result(200, reply)
	}
}

type EmployeeServiceHTTPClient interface {
	// CreateEmployee 创建员工
	CreateEmployee(ctx context.Context, req *CreateEmployeeRequest, opts ...http.CallOption) (rsp *EmployeeResponse, err error)
	// DeleteEmployee 删除员工
	DeleteEmployee(ctx context.Context, req *DeleteEmployeeRequest, opts ...http.CallOption) (rsp *DeleteEmployeeResponse, err error)
	// GetEmployee 获取员工
	GetEmployee(ctx context.Context, req *GetEmployeeRequest, opts ...http.CallOption) (rsp *EmployeeResponse, err error)
	// ListEmployees 列出员工
	ListEmployees(ctx context.Context, req *ListEmployeesRequest, opts ...http.CallOption) (rsp *ListEmployeesResponse, err error)
	// UpdateEmployee 更新员工
	UpdateEmployee(ctx context.Context, req *UpdateEmployeeRequest, opts ...http.CallOption) (rsp *EmployeeResponse, err error)
}

type EmployeeServiceHTTPClientImpl struct {
	cc *http.Client
}

func NewEmployeeServiceHTTPClient(client *http.Client) EmployeeServiceHTTPClient {
	return &EmployeeServiceHTTPClientImpl{client}
}

// CreateEmployee 创建员工
func (c *EmployeeServiceHTTPClientImpl) CreateEmployee(ctx context.Context, in *CreateEmployeeRequest, opts ...http.CallOption) (*EmployeeResponse, error) {
	var out EmployeeResponse
	pattern := "/api/v1/employees"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationEmployeeServiceCreateEmployee))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

// DeleteEmployee 删除员工
func (c *EmployeeServiceHTTPClientImpl) DeleteEmployee(ctx context.Context, in *DeleteEmployeeRequest, opts ...http.CallOption) (*DeleteEmployeeResponse, error) {
	var out DeleteEmployeeResponse
	pattern := "/api/v1/employees/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationEmployeeServiceDeleteEmployee))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

// GetEmployee 获取员工
func (c *EmployeeServiceHTTPClientImpl) GetEmployee(ctx context.Context, in *GetEmployeeRequest, opts ...http.CallOption) (*EmployeeResponse, error) {
	var out EmployeeResponse
	pattern := "/api/v1/employees/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationEmployeeServiceGetEmployee))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

// ListEmployees 列出员工
func (c *EmployeeServiceHTTPClientImpl) ListEmployees(ctx context.Context, in *ListEmployeesRequest, opts ...http.CallOption) (*ListEmployeesResponse, error) {
	var out ListEmployeesResponse
	pattern := "/api/v1/employees"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationEmployeeServiceListEmployees))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

// UpdateEmployee 更新员工
func (c *EmployeeServiceHTTPClientImpl) UpdateEmployee(ctx context.Context, in *UpdateEmployeeRequest, opts ...http.CallOption) (*EmployeeResponse, error) {
	var out EmployeeResponse
	pattern := "/api/v1/employees/{id}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationEmployeeServiceUpdateEmployee))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
