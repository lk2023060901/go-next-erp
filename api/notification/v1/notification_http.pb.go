// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.9.0
// - protoc             (unknown)
// source: api/notification/v1/notification.proto

package notificationv1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationNotificationServiceBatchMarkAsRead = "/api.notification.v1.NotificationService/BatchMarkAsRead"
const OperationNotificationServiceDeleteNotification = "/api.notification.v1.NotificationService/DeleteNotification"
const OperationNotificationServiceGetNotification = "/api.notification.v1.NotificationService/GetNotification"
const OperationNotificationServiceGetUnreadCount = "/api.notification.v1.NotificationService/GetUnreadCount"
const OperationNotificationServiceListNotifications = "/api.notification.v1.NotificationService/ListNotifications"
const OperationNotificationServiceMarkAsRead = "/api.notification.v1.NotificationService/MarkAsRead"
const OperationNotificationServiceSendNotification = "/api.notification.v1.NotificationService/SendNotification"

type NotificationServiceHTTPServer interface {
	// BatchMarkAsRead 批量标记为已读
	BatchMarkAsRead(context.Context, *BatchMarkAsReadRequest) (*BatchMarkAsReadResponse, error)
	// DeleteNotification 删除通知
	DeleteNotification(context.Context, *DeleteNotificationRequest) (*DeleteNotificationResponse, error)
	// GetNotification 获取通知
	GetNotification(context.Context, *GetNotificationRequest) (*NotificationResponse, error)
	// GetUnreadCount 获取未读数量
	GetUnreadCount(context.Context, *GetUnreadCountRequest) (*UnreadCountResponse, error)
	// ListNotifications 列出通知
	ListNotifications(context.Context, *ListNotificationsRequest) (*ListNotificationsResponse, error)
	// MarkAsRead 标记为已读
	MarkAsRead(context.Context, *MarkAsReadRequest) (*NotificationResponse, error)
	// SendNotification 发送通知
	SendNotification(context.Context, *SendNotificationRequest) (*NotificationResponse, error)
}

func RegisterNotificationServiceHTTPServer(s *http.Server, srv NotificationServiceHTTPServer) {
	r := s.Route("/")
	r.POST("/api/v1/notifications", _NotificationService_SendNotification0_HTTP_Handler(srv))
	r.GET("/api/v1/notifications/{id}", _NotificationService_GetNotification0_HTTP_Handler(srv))
	r.GET("/api/v1/notifications", _NotificationService_ListNotifications0_HTTP_Handler(srv))
	r.PUT("/api/v1/notifications/{id}/read", _NotificationService_MarkAsRead0_HTTP_Handler(srv))
	r.PUT("/api/v1/notifications/read", _NotificationService_BatchMarkAsRead0_HTTP_Handler(srv))
	r.DELETE("/api/v1/notifications/{id}", _NotificationService_DeleteNotification0_HTTP_Handler(srv))
	r.GET("/api/v1/notifications/unread-count", _NotificationService_GetUnreadCount0_HTTP_Handler(srv))
}

func _NotificationService_SendNotification0_HTTP_Handler(srv NotificationServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SendNotificationRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationNotificationServiceSendNotification)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SendNotification(ctx, req.(*SendNotificationRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*NotificationResponse)
		return ctx.Result(200, reply)
	}
}

func _NotificationService_GetNotification0_HTTP_Handler(srv NotificationServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetNotificationRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationNotificationServiceGetNotification)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetNotification(ctx, req.(*GetNotificationRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*NotificationResponse)
		return ctx.Result(200, reply)
	}
}

func _NotificationService_ListNotifications0_HTTP_Handler(srv NotificationServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListNotificationsRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationNotificationServiceListNotifications)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListNotifications(ctx, req.(*ListNotificationsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListNotificationsResponse)
		return ctx.Result(200, reply)
	}
}

func _NotificationService_MarkAsRead0_HTTP_Handler(srv NotificationServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in MarkAsReadRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationNotificationServiceMarkAsRead)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.MarkAsRead(ctx, req.(*MarkAsReadRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*NotificationResponse)
		return ctx.Result(200, reply)
	}
}

func _NotificationService_BatchMarkAsRead0_HTTP_Handler(srv NotificationServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in BatchMarkAsReadRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationNotificationServiceBatchMarkAsRead)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.BatchMarkAsRead(ctx, req.(*BatchMarkAsReadRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*BatchMarkAsReadResponse)
		return ctx.Result(200, reply)
	}
}

func _NotificationService_DeleteNotification0_HTTP_Handler(srv NotificationServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteNotificationRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationNotificationServiceDeleteNotification)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteNotification(ctx, req.(*DeleteNotificationRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteNotificationResponse)
		return ctx.Result(200, reply)
	}
}

func _NotificationService_GetUnreadCount0_HTTP_Handler(srv NotificationServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetUnreadCountRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationNotificationServiceGetUnreadCount)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetUnreadCount(ctx, req.(*GetUnreadCountRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UnreadCountResponse)
		return ctx.Result(200, reply)
	}
}

type NotificationServiceHTTPClient interface {
	// BatchMarkAsRead 批量标记为已读
	BatchMarkAsRead(ctx context.Context, req *BatchMarkAsReadRequest, opts ...http.CallOption) (rsp *BatchMarkAsReadResponse, err error)
	// DeleteNotification 删除通知
	DeleteNotification(ctx context.Context, req *DeleteNotificationRequest, opts ...http.CallOption) (rsp *DeleteNotificationResponse, err error)
	// GetNotification 获取通知
	GetNotification(ctx context.Context, req *GetNotificationRequest, opts ...http.CallOption) (rsp *NotificationResponse, err error)
	// GetUnreadCount 获取未读数量
	GetUnreadCount(ctx context.Context, req *GetUnreadCountRequest, opts ...http.CallOption) (rsp *UnreadCountResponse, err error)
	// ListNotifications 列出通知
	ListNotifications(ctx context.Context, req *ListNotificationsRequest, opts ...http.CallOption) (rsp *ListNotificationsResponse, err error)
	// MarkAsRead 标记为已读
	MarkAsRead(ctx context.Context, req *MarkAsReadRequest, opts ...http.CallOption) (rsp *NotificationResponse, err error)
	// SendNotification 发送通知
	SendNotification(ctx context.Context, req *SendNotificationRequest, opts ...http.CallOption) (rsp *NotificationResponse, err error)
}

type NotificationServiceHTTPClientImpl struct {
	cc *http.Client
}

func NewNotificationServiceHTTPClient(client *http.Client) NotificationServiceHTTPClient {
	return &NotificationServiceHTTPClientImpl{client}
}

// BatchMarkAsRead 批量标记为已读
func (c *NotificationServiceHTTPClientImpl) BatchMarkAsRead(ctx context.Context, in *BatchMarkAsReadRequest, opts ...http.CallOption) (*BatchMarkAsReadResponse, error) {
	var out BatchMarkAsReadResponse
	pattern := "/api/v1/notifications/read"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationNotificationServiceBatchMarkAsRead))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

// DeleteNotification 删除通知
func (c *NotificationServiceHTTPClientImpl) DeleteNotification(ctx context.Context, in *DeleteNotificationRequest, opts ...http.CallOption) (*DeleteNotificationResponse, error) {
	var out DeleteNotificationResponse
	pattern := "/api/v1/notifications/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationNotificationServiceDeleteNotification))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

// GetNotification 获取通知
func (c *NotificationServiceHTTPClientImpl) GetNotification(ctx context.Context, in *GetNotificationRequest, opts ...http.CallOption) (*NotificationResponse, error) {
	var out NotificationResponse
	pattern := "/api/v1/notifications/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationNotificationServiceGetNotification))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

// GetUnreadCount 获取未读数量
func (c *NotificationServiceHTTPClientImpl) GetUnreadCount(ctx context.Context, in *GetUnreadCountRequest, opts ...http.CallOption) (*UnreadCountResponse, error) {
	var out UnreadCountResponse
	pattern := "/api/v1/notifications/unread-count"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationNotificationServiceGetUnreadCount))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

// ListNotifications 列出通知
func (c *NotificationServiceHTTPClientImpl) ListNotifications(ctx context.Context, in *ListNotificationsRequest, opts ...http.CallOption) (*ListNotificationsResponse, error) {
	var out ListNotificationsResponse
	pattern := "/api/v1/notifications"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationNotificationServiceListNotifications))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

// MarkAsRead 标记为已读
func (c *NotificationServiceHTTPClientImpl) MarkAsRead(ctx context.Context, in *MarkAsReadRequest, opts ...http.CallOption) (*NotificationResponse, error) {
	var out NotificationResponse
	pattern := "/api/v1/notifications/{id}/read"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationNotificationServiceMarkAsRead))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

// SendNotification 发送通知
func (c *NotificationServiceHTTPClientImpl) SendNotification(ctx context.Context, in *SendNotificationRequest, opts ...http.CallOption) (*NotificationResponse, error) {
	var out NotificationResponse
	pattern := "/api/v1/notifications"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationNotificationServiceSendNotification))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
