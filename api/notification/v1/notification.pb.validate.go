// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/notification/v1/notification.proto

package notificationv1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on SendNotificationRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SendNotificationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SendNotificationRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SendNotificationRequestMultiError, or nil if none found.
func (m *SendNotificationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SendNotificationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TenantId

	// no validation rules for UserId

	// no validation rules for Type

	// no validation rules for Title

	// no validation rules for Content

	// no validation rules for Link

	// no validation rules for Priority

	if len(errors) > 0 {
		return SendNotificationRequestMultiError(errors)
	}

	return nil
}

// SendNotificationRequestMultiError is an error wrapping multiple validation
// errors returned by SendNotificationRequest.ValidateAll() if the designated
// constraints aren't met.
type SendNotificationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SendNotificationRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SendNotificationRequestMultiError) AllErrors() []error { return m }

// SendNotificationRequestValidationError is the validation error returned by
// SendNotificationRequest.Validate if the designated constraints aren't met.
type SendNotificationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendNotificationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendNotificationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendNotificationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendNotificationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendNotificationRequestValidationError) ErrorName() string {
	return "SendNotificationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SendNotificationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendNotificationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendNotificationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendNotificationRequestValidationError{}

// Validate checks the field values on GetNotificationRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetNotificationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetNotificationRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetNotificationRequestMultiError, or nil if none found.
func (m *GetNotificationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetNotificationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetNotificationRequestMultiError(errors)
	}

	return nil
}

// GetNotificationRequestMultiError is an error wrapping multiple validation
// errors returned by GetNotificationRequest.ValidateAll() if the designated
// constraints aren't met.
type GetNotificationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetNotificationRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetNotificationRequestMultiError) AllErrors() []error { return m }

// GetNotificationRequestValidationError is the validation error returned by
// GetNotificationRequest.Validate if the designated constraints aren't met.
type GetNotificationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetNotificationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetNotificationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetNotificationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetNotificationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetNotificationRequestValidationError) ErrorName() string {
	return "GetNotificationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetNotificationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetNotificationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetNotificationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetNotificationRequestValidationError{}

// Validate checks the field values on ListNotificationsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListNotificationsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListNotificationsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListNotificationsRequestMultiError, or nil if none found.
func (m *ListNotificationsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListNotificationsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for Type

	// no validation rules for OnlyUnread

	// no validation rules for Page

	// no validation rules for PageSize

	if len(errors) > 0 {
		return ListNotificationsRequestMultiError(errors)
	}

	return nil
}

// ListNotificationsRequestMultiError is an error wrapping multiple validation
// errors returned by ListNotificationsRequest.ValidateAll() if the designated
// constraints aren't met.
type ListNotificationsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListNotificationsRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListNotificationsRequestMultiError) AllErrors() []error { return m }

// ListNotificationsRequestValidationError is the validation error returned by
// ListNotificationsRequest.Validate if the designated constraints aren't met.
type ListNotificationsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListNotificationsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListNotificationsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListNotificationsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListNotificationsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListNotificationsRequestValidationError) ErrorName() string {
	return "ListNotificationsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListNotificationsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListNotificationsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListNotificationsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListNotificationsRequestValidationError{}

// Validate checks the field values on MarkAsReadRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *MarkAsReadRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MarkAsReadRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MarkAsReadRequestMultiError, or nil if none found.
func (m *MarkAsReadRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *MarkAsReadRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return MarkAsReadRequestMultiError(errors)
	}

	return nil
}

// MarkAsReadRequestMultiError is an error wrapping multiple validation errors
// returned by MarkAsReadRequest.ValidateAll() if the designated constraints
// aren't met.
type MarkAsReadRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MarkAsReadRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MarkAsReadRequestMultiError) AllErrors() []error { return m }

// MarkAsReadRequestValidationError is the validation error returned by
// MarkAsReadRequest.Validate if the designated constraints aren't met.
type MarkAsReadRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MarkAsReadRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MarkAsReadRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MarkAsReadRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MarkAsReadRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MarkAsReadRequestValidationError) ErrorName() string {
	return "MarkAsReadRequestValidationError"
}

// Error satisfies the builtin error interface
func (e MarkAsReadRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMarkAsReadRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MarkAsReadRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MarkAsReadRequestValidationError{}

// Validate checks the field values on BatchMarkAsReadRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *BatchMarkAsReadRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BatchMarkAsReadRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BatchMarkAsReadRequestMultiError, or nil if none found.
func (m *BatchMarkAsReadRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *BatchMarkAsReadRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return BatchMarkAsReadRequestMultiError(errors)
	}

	return nil
}

// BatchMarkAsReadRequestMultiError is an error wrapping multiple validation
// errors returned by BatchMarkAsReadRequest.ValidateAll() if the designated
// constraints aren't met.
type BatchMarkAsReadRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BatchMarkAsReadRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BatchMarkAsReadRequestMultiError) AllErrors() []error { return m }

// BatchMarkAsReadRequestValidationError is the validation error returned by
// BatchMarkAsReadRequest.Validate if the designated constraints aren't met.
type BatchMarkAsReadRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BatchMarkAsReadRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BatchMarkAsReadRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BatchMarkAsReadRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BatchMarkAsReadRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BatchMarkAsReadRequestValidationError) ErrorName() string {
	return "BatchMarkAsReadRequestValidationError"
}

// Error satisfies the builtin error interface
func (e BatchMarkAsReadRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBatchMarkAsReadRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BatchMarkAsReadRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BatchMarkAsReadRequestValidationError{}

// Validate checks the field values on DeleteNotificationRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteNotificationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteNotificationRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteNotificationRequestMultiError, or nil if none found.
func (m *DeleteNotificationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteNotificationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DeleteNotificationRequestMultiError(errors)
	}

	return nil
}

// DeleteNotificationRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteNotificationRequest.ValidateAll() if the
// designated constraints aren't met.
type DeleteNotificationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteNotificationRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteNotificationRequestMultiError) AllErrors() []error { return m }

// DeleteNotificationRequestValidationError is the validation error returned by
// DeleteNotificationRequest.Validate if the designated constraints aren't met.
type DeleteNotificationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteNotificationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteNotificationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteNotificationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteNotificationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteNotificationRequestValidationError) ErrorName() string {
	return "DeleteNotificationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteNotificationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteNotificationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteNotificationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteNotificationRequestValidationError{}

// Validate checks the field values on GetUnreadCountRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUnreadCountRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUnreadCountRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUnreadCountRequestMultiError, or nil if none found.
func (m *GetUnreadCountRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUnreadCountRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	if len(errors) > 0 {
		return GetUnreadCountRequestMultiError(errors)
	}

	return nil
}

// GetUnreadCountRequestMultiError is an error wrapping multiple validation
// errors returned by GetUnreadCountRequest.ValidateAll() if the designated
// constraints aren't met.
type GetUnreadCountRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUnreadCountRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUnreadCountRequestMultiError) AllErrors() []error { return m }

// GetUnreadCountRequestValidationError is the validation error returned by
// GetUnreadCountRequest.Validate if the designated constraints aren't met.
type GetUnreadCountRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUnreadCountRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUnreadCountRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUnreadCountRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUnreadCountRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUnreadCountRequestValidationError) ErrorName() string {
	return "GetUnreadCountRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetUnreadCountRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUnreadCountRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUnreadCountRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUnreadCountRequestValidationError{}

// Validate checks the field values on NotificationResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *NotificationResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on NotificationResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// NotificationResponseMultiError, or nil if none found.
func (m *NotificationResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *NotificationResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for TenantId

	// no validation rules for UserId

	// no validation rules for Type

	// no validation rules for Title

	// no validation rules for Content

	// no validation rules for Link

	// no validation rules for Priority

	// no validation rules for IsRead

	// no validation rules for ReadAt

	// no validation rules for CreatedAt

	if len(errors) > 0 {
		return NotificationResponseMultiError(errors)
	}

	return nil
}

// NotificationResponseMultiError is an error wrapping multiple validation
// errors returned by NotificationResponse.ValidateAll() if the designated
// constraints aren't met.
type NotificationResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NotificationResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NotificationResponseMultiError) AllErrors() []error { return m }

// NotificationResponseValidationError is the validation error returned by
// NotificationResponse.Validate if the designated constraints aren't met.
type NotificationResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NotificationResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NotificationResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NotificationResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NotificationResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NotificationResponseValidationError) ErrorName() string {
	return "NotificationResponseValidationError"
}

// Error satisfies the builtin error interface
func (e NotificationResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNotificationResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NotificationResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NotificationResponseValidationError{}

// Validate checks the field values on ListNotificationsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListNotificationsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListNotificationsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListNotificationsResponseMultiError, or nil if none found.
func (m *ListNotificationsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListNotificationsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListNotificationsResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListNotificationsResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListNotificationsResponseValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Total

	if len(errors) > 0 {
		return ListNotificationsResponseMultiError(errors)
	}

	return nil
}

// ListNotificationsResponseMultiError is an error wrapping multiple validation
// errors returned by ListNotificationsResponse.ValidateAll() if the
// designated constraints aren't met.
type ListNotificationsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListNotificationsResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListNotificationsResponseMultiError) AllErrors() []error { return m }

// ListNotificationsResponseValidationError is the validation error returned by
// ListNotificationsResponse.Validate if the designated constraints aren't met.
type ListNotificationsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListNotificationsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListNotificationsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListNotificationsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListNotificationsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListNotificationsResponseValidationError) ErrorName() string {
	return "ListNotificationsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListNotificationsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListNotificationsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListNotificationsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListNotificationsResponseValidationError{}

// Validate checks the field values on BatchMarkAsReadResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *BatchMarkAsReadResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BatchMarkAsReadResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BatchMarkAsReadResponseMultiError, or nil if none found.
func (m *BatchMarkAsReadResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *BatchMarkAsReadResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Count

	// no validation rules for Success

	if len(errors) > 0 {
		return BatchMarkAsReadResponseMultiError(errors)
	}

	return nil
}

// BatchMarkAsReadResponseMultiError is an error wrapping multiple validation
// errors returned by BatchMarkAsReadResponse.ValidateAll() if the designated
// constraints aren't met.
type BatchMarkAsReadResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BatchMarkAsReadResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BatchMarkAsReadResponseMultiError) AllErrors() []error { return m }

// BatchMarkAsReadResponseValidationError is the validation error returned by
// BatchMarkAsReadResponse.Validate if the designated constraints aren't met.
type BatchMarkAsReadResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BatchMarkAsReadResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BatchMarkAsReadResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BatchMarkAsReadResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BatchMarkAsReadResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BatchMarkAsReadResponseValidationError) ErrorName() string {
	return "BatchMarkAsReadResponseValidationError"
}

// Error satisfies the builtin error interface
func (e BatchMarkAsReadResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBatchMarkAsReadResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BatchMarkAsReadResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BatchMarkAsReadResponseValidationError{}

// Validate checks the field values on DeleteNotificationResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteNotificationResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteNotificationResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteNotificationResponseMultiError, or nil if none found.
func (m *DeleteNotificationResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteNotificationResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	if len(errors) > 0 {
		return DeleteNotificationResponseMultiError(errors)
	}

	return nil
}

// DeleteNotificationResponseMultiError is an error wrapping multiple
// validation errors returned by DeleteNotificationResponse.ValidateAll() if
// the designated constraints aren't met.
type DeleteNotificationResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteNotificationResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteNotificationResponseMultiError) AllErrors() []error { return m }

// DeleteNotificationResponseValidationError is the validation error returned
// by DeleteNotificationResponse.Validate if the designated constraints aren't met.
type DeleteNotificationResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteNotificationResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteNotificationResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteNotificationResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteNotificationResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteNotificationResponseValidationError) ErrorName() string {
	return "DeleteNotificationResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteNotificationResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteNotificationResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteNotificationResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteNotificationResponseValidationError{}

// Validate checks the field values on UnreadCountResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UnreadCountResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UnreadCountResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UnreadCountResponseMultiError, or nil if none found.
func (m *UnreadCountResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UnreadCountResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Count

	if len(errors) > 0 {
		return UnreadCountResponseMultiError(errors)
	}

	return nil
}

// UnreadCountResponseMultiError is an error wrapping multiple validation
// errors returned by UnreadCountResponse.ValidateAll() if the designated
// constraints aren't met.
type UnreadCountResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UnreadCountResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UnreadCountResponseMultiError) AllErrors() []error { return m }

// UnreadCountResponseValidationError is the validation error returned by
// UnreadCountResponse.Validate if the designated constraints aren't met.
type UnreadCountResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UnreadCountResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UnreadCountResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UnreadCountResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UnreadCountResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UnreadCountResponseValidationError) ErrorName() string {
	return "UnreadCountResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UnreadCountResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUnreadCountResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UnreadCountResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UnreadCountResponseValidationError{}

// Validate checks the field values on SubscribeRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SubscribeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SubscribeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SubscribeRequestMultiError, or nil if none found.
func (m *SubscribeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SubscribeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for Token

	if len(errors) > 0 {
		return SubscribeRequestMultiError(errors)
	}

	return nil
}

// SubscribeRequestMultiError is an error wrapping multiple validation errors
// returned by SubscribeRequest.ValidateAll() if the designated constraints
// aren't met.
type SubscribeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SubscribeRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SubscribeRequestMultiError) AllErrors() []error { return m }

// SubscribeRequestValidationError is the validation error returned by
// SubscribeRequest.Validate if the designated constraints aren't met.
type SubscribeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SubscribeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SubscribeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SubscribeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SubscribeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SubscribeRequestValidationError) ErrorName() string { return "SubscribeRequestValidationError" }

// Error satisfies the builtin error interface
func (e SubscribeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSubscribeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SubscribeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SubscribeRequestValidationError{}

// Validate checks the field values on NotificationMessage with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *NotificationMessage) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on NotificationMessage with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// NotificationMessageMultiError, or nil if none found.
func (m *NotificationMessage) ValidateAll() error {
	return m.validate(true)
}

func (m *NotificationMessage) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Type

	if all {
		switch v := interface{}(m.GetNotification()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, NotificationMessageValidationError{
					field:  "Notification",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, NotificationMessageValidationError{
					field:  "Notification",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetNotification()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return NotificationMessageValidationError{
				field:  "Notification",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for UnreadCount

	// no validation rules for Message

	if len(errors) > 0 {
		return NotificationMessageMultiError(errors)
	}

	return nil
}

// NotificationMessageMultiError is an error wrapping multiple validation
// errors returned by NotificationMessage.ValidateAll() if the designated
// constraints aren't met.
type NotificationMessageMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NotificationMessageMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NotificationMessageMultiError) AllErrors() []error { return m }

// NotificationMessageValidationError is the validation error returned by
// NotificationMessage.Validate if the designated constraints aren't met.
type NotificationMessageValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NotificationMessageValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NotificationMessageValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NotificationMessageValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NotificationMessageValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NotificationMessageValidationError) ErrorName() string {
	return "NotificationMessageValidationError"
}

// Error satisfies the builtin error interface
func (e NotificationMessageValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNotificationMessage.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NotificationMessageValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NotificationMessageValidationError{}
