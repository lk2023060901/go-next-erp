// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.9.0
// - protoc             (unknown)
// source: api/auth/v1/role.proto

package authv1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationRoleServiceAssignPermissions = "/api.auth.v1.RoleService/AssignPermissions"
const OperationRoleServiceAssignRoleToUser = "/api.auth.v1.RoleService/AssignRoleToUser"
const OperationRoleServiceCreateRole = "/api.auth.v1.RoleService/CreateRole"
const OperationRoleServiceDeleteRole = "/api.auth.v1.RoleService/DeleteRole"
const OperationRoleServiceGetRole = "/api.auth.v1.RoleService/GetRole"
const OperationRoleServiceGetRolePermissions = "/api.auth.v1.RoleService/GetRolePermissions"
const OperationRoleServiceListRoles = "/api.auth.v1.RoleService/ListRoles"
const OperationRoleServiceRemoveRoleFromUser = "/api.auth.v1.RoleService/RemoveRoleFromUser"
const OperationRoleServiceRevokePermissions = "/api.auth.v1.RoleService/RevokePermissions"
const OperationRoleServiceUpdateRole = "/api.auth.v1.RoleService/UpdateRole"

type RoleServiceHTTPServer interface {
	// AssignPermissions 分配权限给角色
	AssignPermissions(context.Context, *AssignPermissionsRequest) (*emptypb.Empty, error)
	// AssignRoleToUser 分配角色给用户
	AssignRoleToUser(context.Context, *AssignRoleToUserRequest) (*emptypb.Empty, error)
	// CreateRole 创建角色
	CreateRole(context.Context, *CreateRoleRequest) (*RoleInfo, error)
	// DeleteRole 删除角色
	DeleteRole(context.Context, *DeleteRoleRequest) (*emptypb.Empty, error)
	// GetRole 获取角色详情
	GetRole(context.Context, *GetRoleRequest) (*RoleInfo, error)
	// GetRolePermissions 获取角色权限
	GetRolePermissions(context.Context, *GetRolePermissionsRequest) (*GetRolePermissionsResponse, error)
	// ListRoles 获取角色列表
	ListRoles(context.Context, *ListRolesRequest) (*ListRolesResponse, error)
	// RemoveRoleFromUser 移除用户角色
	RemoveRoleFromUser(context.Context, *RemoveRoleFromUserRequest) (*emptypb.Empty, error)
	// RevokePermissions 撤销角色权限
	RevokePermissions(context.Context, *RevokePermissionsRequest) (*emptypb.Empty, error)
	// UpdateRole 更新角色
	UpdateRole(context.Context, *UpdateRoleRequest) (*RoleInfo, error)
}

func RegisterRoleServiceHTTPServer(s *http.Server, srv RoleServiceHTTPServer) {
	r := s.Route("/")
	r.GET("/api/v1/roles", _RoleService_ListRoles0_HTTP_Handler(srv))
	r.POST("/api/v1/roles", _RoleService_CreateRole0_HTTP_Handler(srv))
	r.PUT("/api/v1/roles/{id}", _RoleService_UpdateRole0_HTTP_Handler(srv))
	r.DELETE("/api/v1/roles/{id}", _RoleService_DeleteRole0_HTTP_Handler(srv))
	r.POST("/api/v1/roles/{role_id}/permissions", _RoleService_AssignPermissions0_HTTP_Handler(srv))
	r.GET("/api/v1/roles/{role_id}/permissions", _RoleService_GetRolePermissions0_HTTP_Handler(srv))
	r.GET("/api/v1/roles/{id}", _RoleService_GetRole0_HTTP_Handler(srv))
	r.DELETE("/api/v1/roles/{role_id}/permissions", _RoleService_RevokePermissions0_HTTP_Handler(srv))
	r.POST("/api/v1/roles/{role_id}/users/{user_id}", _RoleService_AssignRoleToUser0_HTTP_Handler(srv))
	r.DELETE("/api/v1/roles/{role_id}/users/{user_id}", _RoleService_RemoveRoleFromUser0_HTTP_Handler(srv))
}

func _RoleService_ListRoles0_HTTP_Handler(srv RoleServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListRolesRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationRoleServiceListRoles)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListRoles(ctx, req.(*ListRolesRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListRolesResponse)
		return ctx.Result(200, reply)
	}
}

func _RoleService_CreateRole0_HTTP_Handler(srv RoleServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateRoleRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationRoleServiceCreateRole)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateRole(ctx, req.(*CreateRoleRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*RoleInfo)
		return ctx.Result(200, reply)
	}
}

func _RoleService_UpdateRole0_HTTP_Handler(srv RoleServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateRoleRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationRoleServiceUpdateRole)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateRole(ctx, req.(*UpdateRoleRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*RoleInfo)
		return ctx.Result(200, reply)
	}
}

func _RoleService_DeleteRole0_HTTP_Handler(srv RoleServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteRoleRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationRoleServiceDeleteRole)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteRole(ctx, req.(*DeleteRoleRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _RoleService_AssignPermissions0_HTTP_Handler(srv RoleServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in AssignPermissionsRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationRoleServiceAssignPermissions)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.AssignPermissions(ctx, req.(*AssignPermissionsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _RoleService_GetRolePermissions0_HTTP_Handler(srv RoleServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetRolePermissionsRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationRoleServiceGetRolePermissions)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetRolePermissions(ctx, req.(*GetRolePermissionsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetRolePermissionsResponse)
		return ctx.Result(200, reply)
	}
}

func _RoleService_GetRole0_HTTP_Handler(srv RoleServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetRoleRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationRoleServiceGetRole)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetRole(ctx, req.(*GetRoleRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*RoleInfo)
		return ctx.Result(200, reply)
	}
}

func _RoleService_RevokePermissions0_HTTP_Handler(srv RoleServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in RevokePermissionsRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationRoleServiceRevokePermissions)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.RevokePermissions(ctx, req.(*RevokePermissionsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _RoleService_AssignRoleToUser0_HTTP_Handler(srv RoleServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in AssignRoleToUserRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationRoleServiceAssignRoleToUser)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.AssignRoleToUser(ctx, req.(*AssignRoleToUserRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _RoleService_RemoveRoleFromUser0_HTTP_Handler(srv RoleServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in RemoveRoleFromUserRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationRoleServiceRemoveRoleFromUser)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.RemoveRoleFromUser(ctx, req.(*RemoveRoleFromUserRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

type RoleServiceHTTPClient interface {
	// AssignPermissions 分配权限给角色
	AssignPermissions(ctx context.Context, req *AssignPermissionsRequest, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	// AssignRoleToUser 分配角色给用户
	AssignRoleToUser(ctx context.Context, req *AssignRoleToUserRequest, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	// CreateRole 创建角色
	CreateRole(ctx context.Context, req *CreateRoleRequest, opts ...http.CallOption) (rsp *RoleInfo, err error)
	// DeleteRole 删除角色
	DeleteRole(ctx context.Context, req *DeleteRoleRequest, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	// GetRole 获取角色详情
	GetRole(ctx context.Context, req *GetRoleRequest, opts ...http.CallOption) (rsp *RoleInfo, err error)
	// GetRolePermissions 获取角色权限
	GetRolePermissions(ctx context.Context, req *GetRolePermissionsRequest, opts ...http.CallOption) (rsp *GetRolePermissionsResponse, err error)
	// ListRoles 获取角色列表
	ListRoles(ctx context.Context, req *ListRolesRequest, opts ...http.CallOption) (rsp *ListRolesResponse, err error)
	// RemoveRoleFromUser 移除用户角色
	RemoveRoleFromUser(ctx context.Context, req *RemoveRoleFromUserRequest, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	// RevokePermissions 撤销角色权限
	RevokePermissions(ctx context.Context, req *RevokePermissionsRequest, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	// UpdateRole 更新角色
	UpdateRole(ctx context.Context, req *UpdateRoleRequest, opts ...http.CallOption) (rsp *RoleInfo, err error)
}

type RoleServiceHTTPClientImpl struct {
	cc *http.Client
}

func NewRoleServiceHTTPClient(client *http.Client) RoleServiceHTTPClient {
	return &RoleServiceHTTPClientImpl{client}
}

// AssignPermissions 分配权限给角色
func (c *RoleServiceHTTPClientImpl) AssignPermissions(ctx context.Context, in *AssignPermissionsRequest, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/api/v1/roles/{role_id}/permissions"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationRoleServiceAssignPermissions))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

// AssignRoleToUser 分配角色给用户
func (c *RoleServiceHTTPClientImpl) AssignRoleToUser(ctx context.Context, in *AssignRoleToUserRequest, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/api/v1/roles/{role_id}/users/{user_id}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationRoleServiceAssignRoleToUser))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

// CreateRole 创建角色
func (c *RoleServiceHTTPClientImpl) CreateRole(ctx context.Context, in *CreateRoleRequest, opts ...http.CallOption) (*RoleInfo, error) {
	var out RoleInfo
	pattern := "/api/v1/roles"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationRoleServiceCreateRole))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

// DeleteRole 删除角色
func (c *RoleServiceHTTPClientImpl) DeleteRole(ctx context.Context, in *DeleteRoleRequest, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/api/v1/roles/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationRoleServiceDeleteRole))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

// GetRole 获取角色详情
func (c *RoleServiceHTTPClientImpl) GetRole(ctx context.Context, in *GetRoleRequest, opts ...http.CallOption) (*RoleInfo, error) {
	var out RoleInfo
	pattern := "/api/v1/roles/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationRoleServiceGetRole))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

// GetRolePermissions 获取角色权限
func (c *RoleServiceHTTPClientImpl) GetRolePermissions(ctx context.Context, in *GetRolePermissionsRequest, opts ...http.CallOption) (*GetRolePermissionsResponse, error) {
	var out GetRolePermissionsResponse
	pattern := "/api/v1/roles/{role_id}/permissions"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationRoleServiceGetRolePermissions))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

// ListRoles 获取角色列表
func (c *RoleServiceHTTPClientImpl) ListRoles(ctx context.Context, in *ListRolesRequest, opts ...http.CallOption) (*ListRolesResponse, error) {
	var out ListRolesResponse
	pattern := "/api/v1/roles"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationRoleServiceListRoles))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

// RemoveRoleFromUser 移除用户角色
func (c *RoleServiceHTTPClientImpl) RemoveRoleFromUser(ctx context.Context, in *RemoveRoleFromUserRequest, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/api/v1/roles/{role_id}/users/{user_id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationRoleServiceRemoveRoleFromUser))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

// RevokePermissions 撤销角色权限
func (c *RoleServiceHTTPClientImpl) RevokePermissions(ctx context.Context, in *RevokePermissionsRequest, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/api/v1/roles/{role_id}/permissions"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationRoleServiceRevokePermissions))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

// UpdateRole 更新角色
func (c *RoleServiceHTTPClientImpl) UpdateRole(ctx context.Context, in *UpdateRoleRequest, opts ...http.CallOption) (*RoleInfo, error) {
	var out RoleInfo
	pattern := "/api/v1/roles/{id}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationRoleServiceUpdateRole))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
