// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/form/v1/form.proto

package formv1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CreateFormDefinitionRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateFormDefinitionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateFormDefinitionRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateFormDefinitionRequestMultiError, or nil if none found.
func (m *CreateFormDefinitionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateFormDefinitionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TenantId

	// no validation rules for Name

	// no validation rules for Code

	// no validation rules for Description

	// no validation rules for Category

	// no validation rules for Schema

	// no validation rules for UiSchema

	if len(errors) > 0 {
		return CreateFormDefinitionRequestMultiError(errors)
	}

	return nil
}

// CreateFormDefinitionRequestMultiError is an error wrapping multiple
// validation errors returned by CreateFormDefinitionRequest.ValidateAll() if
// the designated constraints aren't met.
type CreateFormDefinitionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateFormDefinitionRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateFormDefinitionRequestMultiError) AllErrors() []error { return m }

// CreateFormDefinitionRequestValidationError is the validation error returned
// by CreateFormDefinitionRequest.Validate if the designated constraints
// aren't met.
type CreateFormDefinitionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateFormDefinitionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateFormDefinitionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateFormDefinitionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateFormDefinitionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateFormDefinitionRequestValidationError) ErrorName() string {
	return "CreateFormDefinitionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateFormDefinitionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateFormDefinitionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateFormDefinitionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateFormDefinitionRequestValidationError{}

// Validate checks the field values on GetFormDefinitionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetFormDefinitionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetFormDefinitionRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetFormDefinitionRequestMultiError, or nil if none found.
func (m *GetFormDefinitionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetFormDefinitionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetFormDefinitionRequestMultiError(errors)
	}

	return nil
}

// GetFormDefinitionRequestMultiError is an error wrapping multiple validation
// errors returned by GetFormDefinitionRequest.ValidateAll() if the designated
// constraints aren't met.
type GetFormDefinitionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetFormDefinitionRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetFormDefinitionRequestMultiError) AllErrors() []error { return m }

// GetFormDefinitionRequestValidationError is the validation error returned by
// GetFormDefinitionRequest.Validate if the designated constraints aren't met.
type GetFormDefinitionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetFormDefinitionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetFormDefinitionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetFormDefinitionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetFormDefinitionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetFormDefinitionRequestValidationError) ErrorName() string {
	return "GetFormDefinitionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetFormDefinitionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetFormDefinitionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetFormDefinitionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetFormDefinitionRequestValidationError{}

// Validate checks the field values on UpdateFormDefinitionRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateFormDefinitionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateFormDefinitionRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateFormDefinitionRequestMultiError, or nil if none found.
func (m *UpdateFormDefinitionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateFormDefinitionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Description

	// no validation rules for Schema

	// no validation rules for UiSchema

	if len(errors) > 0 {
		return UpdateFormDefinitionRequestMultiError(errors)
	}

	return nil
}

// UpdateFormDefinitionRequestMultiError is an error wrapping multiple
// validation errors returned by UpdateFormDefinitionRequest.ValidateAll() if
// the designated constraints aren't met.
type UpdateFormDefinitionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateFormDefinitionRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateFormDefinitionRequestMultiError) AllErrors() []error { return m }

// UpdateFormDefinitionRequestValidationError is the validation error returned
// by UpdateFormDefinitionRequest.Validate if the designated constraints
// aren't met.
type UpdateFormDefinitionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateFormDefinitionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateFormDefinitionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateFormDefinitionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateFormDefinitionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateFormDefinitionRequestValidationError) ErrorName() string {
	return "UpdateFormDefinitionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateFormDefinitionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateFormDefinitionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateFormDefinitionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateFormDefinitionRequestValidationError{}

// Validate checks the field values on DeleteFormDefinitionRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteFormDefinitionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteFormDefinitionRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteFormDefinitionRequestMultiError, or nil if none found.
func (m *DeleteFormDefinitionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteFormDefinitionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DeleteFormDefinitionRequestMultiError(errors)
	}

	return nil
}

// DeleteFormDefinitionRequestMultiError is an error wrapping multiple
// validation errors returned by DeleteFormDefinitionRequest.ValidateAll() if
// the designated constraints aren't met.
type DeleteFormDefinitionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteFormDefinitionRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteFormDefinitionRequestMultiError) AllErrors() []error { return m }

// DeleteFormDefinitionRequestValidationError is the validation error returned
// by DeleteFormDefinitionRequest.Validate if the designated constraints
// aren't met.
type DeleteFormDefinitionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteFormDefinitionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteFormDefinitionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteFormDefinitionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteFormDefinitionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteFormDefinitionRequestValidationError) ErrorName() string {
	return "DeleteFormDefinitionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteFormDefinitionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteFormDefinitionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteFormDefinitionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteFormDefinitionRequestValidationError{}

// Validate checks the field values on ListFormDefinitionsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListFormDefinitionsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListFormDefinitionsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListFormDefinitionsRequestMultiError, or nil if none found.
func (m *ListFormDefinitionsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListFormDefinitionsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TenantId

	// no validation rules for Page

	// no validation rules for PageSize

	if len(errors) > 0 {
		return ListFormDefinitionsRequestMultiError(errors)
	}

	return nil
}

// ListFormDefinitionsRequestMultiError is an error wrapping multiple
// validation errors returned by ListFormDefinitionsRequest.ValidateAll() if
// the designated constraints aren't met.
type ListFormDefinitionsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListFormDefinitionsRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListFormDefinitionsRequestMultiError) AllErrors() []error { return m }

// ListFormDefinitionsRequestValidationError is the validation error returned
// by ListFormDefinitionsRequest.Validate if the designated constraints aren't met.
type ListFormDefinitionsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListFormDefinitionsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListFormDefinitionsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListFormDefinitionsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListFormDefinitionsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListFormDefinitionsRequestValidationError) ErrorName() string {
	return "ListFormDefinitionsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListFormDefinitionsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListFormDefinitionsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListFormDefinitionsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListFormDefinitionsRequestValidationError{}

// Validate checks the field values on FormDefinitionResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *FormDefinitionResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FormDefinitionResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FormDefinitionResponseMultiError, or nil if none found.
func (m *FormDefinitionResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *FormDefinitionResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for TenantId

	// no validation rules for Name

	// no validation rules for Code

	// no validation rules for Description

	// no validation rules for Category

	// no validation rules for Schema

	// no validation rules for UiSchema

	// no validation rules for Version

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	if len(errors) > 0 {
		return FormDefinitionResponseMultiError(errors)
	}

	return nil
}

// FormDefinitionResponseMultiError is an error wrapping multiple validation
// errors returned by FormDefinitionResponse.ValidateAll() if the designated
// constraints aren't met.
type FormDefinitionResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FormDefinitionResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FormDefinitionResponseMultiError) AllErrors() []error { return m }

// FormDefinitionResponseValidationError is the validation error returned by
// FormDefinitionResponse.Validate if the designated constraints aren't met.
type FormDefinitionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FormDefinitionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FormDefinitionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FormDefinitionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FormDefinitionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FormDefinitionResponseValidationError) ErrorName() string {
	return "FormDefinitionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e FormDefinitionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFormDefinitionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FormDefinitionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FormDefinitionResponseValidationError{}

// Validate checks the field values on DeleteFormDefinitionResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteFormDefinitionResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteFormDefinitionResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteFormDefinitionResponseMultiError, or nil if none found.
func (m *DeleteFormDefinitionResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteFormDefinitionResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	if len(errors) > 0 {
		return DeleteFormDefinitionResponseMultiError(errors)
	}

	return nil
}

// DeleteFormDefinitionResponseMultiError is an error wrapping multiple
// validation errors returned by DeleteFormDefinitionResponse.ValidateAll() if
// the designated constraints aren't met.
type DeleteFormDefinitionResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteFormDefinitionResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteFormDefinitionResponseMultiError) AllErrors() []error { return m }

// DeleteFormDefinitionResponseValidationError is the validation error returned
// by DeleteFormDefinitionResponse.Validate if the designated constraints
// aren't met.
type DeleteFormDefinitionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteFormDefinitionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteFormDefinitionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteFormDefinitionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteFormDefinitionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteFormDefinitionResponseValidationError) ErrorName() string {
	return "DeleteFormDefinitionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteFormDefinitionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteFormDefinitionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteFormDefinitionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteFormDefinitionResponseValidationError{}

// Validate checks the field values on ListFormDefinitionsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListFormDefinitionsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListFormDefinitionsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListFormDefinitionsResponseMultiError, or nil if none found.
func (m *ListFormDefinitionsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListFormDefinitionsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListFormDefinitionsResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListFormDefinitionsResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListFormDefinitionsResponseValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Total

	if len(errors) > 0 {
		return ListFormDefinitionsResponseMultiError(errors)
	}

	return nil
}

// ListFormDefinitionsResponseMultiError is an error wrapping multiple
// validation errors returned by ListFormDefinitionsResponse.ValidateAll() if
// the designated constraints aren't met.
type ListFormDefinitionsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListFormDefinitionsResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListFormDefinitionsResponseMultiError) AllErrors() []error { return m }

// ListFormDefinitionsResponseValidationError is the validation error returned
// by ListFormDefinitionsResponse.Validate if the designated constraints
// aren't met.
type ListFormDefinitionsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListFormDefinitionsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListFormDefinitionsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListFormDefinitionsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListFormDefinitionsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListFormDefinitionsResponseValidationError) ErrorName() string {
	return "ListFormDefinitionsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListFormDefinitionsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListFormDefinitionsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListFormDefinitionsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListFormDefinitionsResponseValidationError{}

// Validate checks the field values on SubmitFormDataRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SubmitFormDataRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SubmitFormDataRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SubmitFormDataRequestMultiError, or nil if none found.
func (m *SubmitFormDataRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SubmitFormDataRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for FormId

	// no validation rules for TenantId

	// no validation rules for UserId

	// no validation rules for Data

	if len(errors) > 0 {
		return SubmitFormDataRequestMultiError(errors)
	}

	return nil
}

// SubmitFormDataRequestMultiError is an error wrapping multiple validation
// errors returned by SubmitFormDataRequest.ValidateAll() if the designated
// constraints aren't met.
type SubmitFormDataRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SubmitFormDataRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SubmitFormDataRequestMultiError) AllErrors() []error { return m }

// SubmitFormDataRequestValidationError is the validation error returned by
// SubmitFormDataRequest.Validate if the designated constraints aren't met.
type SubmitFormDataRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SubmitFormDataRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SubmitFormDataRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SubmitFormDataRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SubmitFormDataRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SubmitFormDataRequestValidationError) ErrorName() string {
	return "SubmitFormDataRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SubmitFormDataRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSubmitFormDataRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SubmitFormDataRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SubmitFormDataRequestValidationError{}

// Validate checks the field values on GetFormDataRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetFormDataRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetFormDataRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetFormDataRequestMultiError, or nil if none found.
func (m *GetFormDataRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetFormDataRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for FormId

	// no validation rules for Id

	if len(errors) > 0 {
		return GetFormDataRequestMultiError(errors)
	}

	return nil
}

// GetFormDataRequestMultiError is an error wrapping multiple validation errors
// returned by GetFormDataRequest.ValidateAll() if the designated constraints
// aren't met.
type GetFormDataRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetFormDataRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetFormDataRequestMultiError) AllErrors() []error { return m }

// GetFormDataRequestValidationError is the validation error returned by
// GetFormDataRequest.Validate if the designated constraints aren't met.
type GetFormDataRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetFormDataRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetFormDataRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetFormDataRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetFormDataRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetFormDataRequestValidationError) ErrorName() string {
	return "GetFormDataRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetFormDataRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetFormDataRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetFormDataRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetFormDataRequestValidationError{}

// Validate checks the field values on UpdateFormDataRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateFormDataRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateFormDataRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateFormDataRequestMultiError, or nil if none found.
func (m *UpdateFormDataRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateFormDataRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for FormId

	// no validation rules for Id

	// no validation rules for Data

	if len(errors) > 0 {
		return UpdateFormDataRequestMultiError(errors)
	}

	return nil
}

// UpdateFormDataRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateFormDataRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateFormDataRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateFormDataRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateFormDataRequestMultiError) AllErrors() []error { return m }

// UpdateFormDataRequestValidationError is the validation error returned by
// UpdateFormDataRequest.Validate if the designated constraints aren't met.
type UpdateFormDataRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateFormDataRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateFormDataRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateFormDataRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateFormDataRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateFormDataRequestValidationError) ErrorName() string {
	return "UpdateFormDataRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateFormDataRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateFormDataRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateFormDataRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateFormDataRequestValidationError{}

// Validate checks the field values on ListFormDataRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListFormDataRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListFormDataRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListFormDataRequestMultiError, or nil if none found.
func (m *ListFormDataRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListFormDataRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for FormId

	// no validation rules for TenantId

	// no validation rules for Page

	// no validation rules for PageSize

	if len(errors) > 0 {
		return ListFormDataRequestMultiError(errors)
	}

	return nil
}

// ListFormDataRequestMultiError is an error wrapping multiple validation
// errors returned by ListFormDataRequest.ValidateAll() if the designated
// constraints aren't met.
type ListFormDataRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListFormDataRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListFormDataRequestMultiError) AllErrors() []error { return m }

// ListFormDataRequestValidationError is the validation error returned by
// ListFormDataRequest.Validate if the designated constraints aren't met.
type ListFormDataRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListFormDataRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListFormDataRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListFormDataRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListFormDataRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListFormDataRequestValidationError) ErrorName() string {
	return "ListFormDataRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListFormDataRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListFormDataRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListFormDataRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListFormDataRequestValidationError{}

// Validate checks the field values on FormDataResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *FormDataResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FormDataResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FormDataResponseMultiError, or nil if none found.
func (m *FormDataResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *FormDataResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for FormId

	// no validation rules for TenantId

	// no validation rules for UserId

	// no validation rules for Data

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	if len(errors) > 0 {
		return FormDataResponseMultiError(errors)
	}

	return nil
}

// FormDataResponseMultiError is an error wrapping multiple validation errors
// returned by FormDataResponse.ValidateAll() if the designated constraints
// aren't met.
type FormDataResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FormDataResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FormDataResponseMultiError) AllErrors() []error { return m }

// FormDataResponseValidationError is the validation error returned by
// FormDataResponse.Validate if the designated constraints aren't met.
type FormDataResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FormDataResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FormDataResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FormDataResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FormDataResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FormDataResponseValidationError) ErrorName() string { return "FormDataResponseValidationError" }

// Error satisfies the builtin error interface
func (e FormDataResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFormDataResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FormDataResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FormDataResponseValidationError{}

// Validate checks the field values on ListFormDataResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListFormDataResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListFormDataResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListFormDataResponseMultiError, or nil if none found.
func (m *ListFormDataResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListFormDataResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListFormDataResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListFormDataResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListFormDataResponseValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Total

	if len(errors) > 0 {
		return ListFormDataResponseMultiError(errors)
	}

	return nil
}

// ListFormDataResponseMultiError is an error wrapping multiple validation
// errors returned by ListFormDataResponse.ValidateAll() if the designated
// constraints aren't met.
type ListFormDataResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListFormDataResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListFormDataResponseMultiError) AllErrors() []error { return m }

// ListFormDataResponseValidationError is the validation error returned by
// ListFormDataResponse.Validate if the designated constraints aren't met.
type ListFormDataResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListFormDataResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListFormDataResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListFormDataResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListFormDataResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListFormDataResponseValidationError) ErrorName() string {
	return "ListFormDataResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListFormDataResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListFormDataResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListFormDataResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListFormDataResponseValidationError{}
