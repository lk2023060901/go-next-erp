// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: api/form/v1/form.proto

package formv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FormDefinitionServiceClient is the client API for FormDefinitionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FormDefinitionServiceClient interface {
	// 创建表单定义
	CreateFormDefinition(ctx context.Context, in *CreateFormDefinitionRequest, opts ...grpc.CallOption) (*FormDefinitionResponse, error)
	// 获取表单定义
	GetFormDefinition(ctx context.Context, in *GetFormDefinitionRequest, opts ...grpc.CallOption) (*FormDefinitionResponse, error)
	// 更新表单定义
	UpdateFormDefinition(ctx context.Context, in *UpdateFormDefinitionRequest, opts ...grpc.CallOption) (*FormDefinitionResponse, error)
	// 删除表单定义
	DeleteFormDefinition(ctx context.Context, in *DeleteFormDefinitionRequest, opts ...grpc.CallOption) (*DeleteFormDefinitionResponse, error)
	// 列出表单定义
	ListFormDefinitions(ctx context.Context, in *ListFormDefinitionsRequest, opts ...grpc.CallOption) (*ListFormDefinitionsResponse, error)
}

type formDefinitionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFormDefinitionServiceClient(cc grpc.ClientConnInterface) FormDefinitionServiceClient {
	return &formDefinitionServiceClient{cc}
}

func (c *formDefinitionServiceClient) CreateFormDefinition(ctx context.Context, in *CreateFormDefinitionRequest, opts ...grpc.CallOption) (*FormDefinitionResponse, error) {
	out := new(FormDefinitionResponse)
	err := c.cc.Invoke(ctx, "/api.form.v1.FormDefinitionService/CreateFormDefinition", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *formDefinitionServiceClient) GetFormDefinition(ctx context.Context, in *GetFormDefinitionRequest, opts ...grpc.CallOption) (*FormDefinitionResponse, error) {
	out := new(FormDefinitionResponse)
	err := c.cc.Invoke(ctx, "/api.form.v1.FormDefinitionService/GetFormDefinition", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *formDefinitionServiceClient) UpdateFormDefinition(ctx context.Context, in *UpdateFormDefinitionRequest, opts ...grpc.CallOption) (*FormDefinitionResponse, error) {
	out := new(FormDefinitionResponse)
	err := c.cc.Invoke(ctx, "/api.form.v1.FormDefinitionService/UpdateFormDefinition", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *formDefinitionServiceClient) DeleteFormDefinition(ctx context.Context, in *DeleteFormDefinitionRequest, opts ...grpc.CallOption) (*DeleteFormDefinitionResponse, error) {
	out := new(DeleteFormDefinitionResponse)
	err := c.cc.Invoke(ctx, "/api.form.v1.FormDefinitionService/DeleteFormDefinition", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *formDefinitionServiceClient) ListFormDefinitions(ctx context.Context, in *ListFormDefinitionsRequest, opts ...grpc.CallOption) (*ListFormDefinitionsResponse, error) {
	out := new(ListFormDefinitionsResponse)
	err := c.cc.Invoke(ctx, "/api.form.v1.FormDefinitionService/ListFormDefinitions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FormDefinitionServiceServer is the server API for FormDefinitionService service.
// All implementations should embed UnimplementedFormDefinitionServiceServer
// for forward compatibility
type FormDefinitionServiceServer interface {
	// 创建表单定义
	CreateFormDefinition(context.Context, *CreateFormDefinitionRequest) (*FormDefinitionResponse, error)
	// 获取表单定义
	GetFormDefinition(context.Context, *GetFormDefinitionRequest) (*FormDefinitionResponse, error)
	// 更新表单定义
	UpdateFormDefinition(context.Context, *UpdateFormDefinitionRequest) (*FormDefinitionResponse, error)
	// 删除表单定义
	DeleteFormDefinition(context.Context, *DeleteFormDefinitionRequest) (*DeleteFormDefinitionResponse, error)
	// 列出表单定义
	ListFormDefinitions(context.Context, *ListFormDefinitionsRequest) (*ListFormDefinitionsResponse, error)
}

// UnimplementedFormDefinitionServiceServer should be embedded to have forward compatible implementations.
type UnimplementedFormDefinitionServiceServer struct {
}

func (UnimplementedFormDefinitionServiceServer) CreateFormDefinition(context.Context, *CreateFormDefinitionRequest) (*FormDefinitionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFormDefinition not implemented")
}
func (UnimplementedFormDefinitionServiceServer) GetFormDefinition(context.Context, *GetFormDefinitionRequest) (*FormDefinitionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFormDefinition not implemented")
}
func (UnimplementedFormDefinitionServiceServer) UpdateFormDefinition(context.Context, *UpdateFormDefinitionRequest) (*FormDefinitionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFormDefinition not implemented")
}
func (UnimplementedFormDefinitionServiceServer) DeleteFormDefinition(context.Context, *DeleteFormDefinitionRequest) (*DeleteFormDefinitionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFormDefinition not implemented")
}
func (UnimplementedFormDefinitionServiceServer) ListFormDefinitions(context.Context, *ListFormDefinitionsRequest) (*ListFormDefinitionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFormDefinitions not implemented")
}

// UnsafeFormDefinitionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FormDefinitionServiceServer will
// result in compilation errors.
type UnsafeFormDefinitionServiceServer interface {
	mustEmbedUnimplementedFormDefinitionServiceServer()
}

func RegisterFormDefinitionServiceServer(s grpc.ServiceRegistrar, srv FormDefinitionServiceServer) {
	s.RegisterService(&FormDefinitionService_ServiceDesc, srv)
}

func _FormDefinitionService_CreateFormDefinition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateFormDefinitionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FormDefinitionServiceServer).CreateFormDefinition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.form.v1.FormDefinitionService/CreateFormDefinition",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FormDefinitionServiceServer).CreateFormDefinition(ctx, req.(*CreateFormDefinitionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FormDefinitionService_GetFormDefinition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFormDefinitionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FormDefinitionServiceServer).GetFormDefinition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.form.v1.FormDefinitionService/GetFormDefinition",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FormDefinitionServiceServer).GetFormDefinition(ctx, req.(*GetFormDefinitionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FormDefinitionService_UpdateFormDefinition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateFormDefinitionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FormDefinitionServiceServer).UpdateFormDefinition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.form.v1.FormDefinitionService/UpdateFormDefinition",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FormDefinitionServiceServer).UpdateFormDefinition(ctx, req.(*UpdateFormDefinitionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FormDefinitionService_DeleteFormDefinition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteFormDefinitionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FormDefinitionServiceServer).DeleteFormDefinition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.form.v1.FormDefinitionService/DeleteFormDefinition",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FormDefinitionServiceServer).DeleteFormDefinition(ctx, req.(*DeleteFormDefinitionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FormDefinitionService_ListFormDefinitions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListFormDefinitionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FormDefinitionServiceServer).ListFormDefinitions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.form.v1.FormDefinitionService/ListFormDefinitions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FormDefinitionServiceServer).ListFormDefinitions(ctx, req.(*ListFormDefinitionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FormDefinitionService_ServiceDesc is the grpc.ServiceDesc for FormDefinitionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FormDefinitionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.form.v1.FormDefinitionService",
	HandlerType: (*FormDefinitionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateFormDefinition",
			Handler:    _FormDefinitionService_CreateFormDefinition_Handler,
		},
		{
			MethodName: "GetFormDefinition",
			Handler:    _FormDefinitionService_GetFormDefinition_Handler,
		},
		{
			MethodName: "UpdateFormDefinition",
			Handler:    _FormDefinitionService_UpdateFormDefinition_Handler,
		},
		{
			MethodName: "DeleteFormDefinition",
			Handler:    _FormDefinitionService_DeleteFormDefinition_Handler,
		},
		{
			MethodName: "ListFormDefinitions",
			Handler:    _FormDefinitionService_ListFormDefinitions_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/form/v1/form.proto",
}

// FormDataServiceClient is the client API for FormDataService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FormDataServiceClient interface {
	// 提交表单数据
	SubmitFormData(ctx context.Context, in *SubmitFormDataRequest, opts ...grpc.CallOption) (*FormDataResponse, error)
	// 获取表单数据
	GetFormData(ctx context.Context, in *GetFormDataRequest, opts ...grpc.CallOption) (*FormDataResponse, error)
	// 更新表单数据
	UpdateFormData(ctx context.Context, in *UpdateFormDataRequest, opts ...grpc.CallOption) (*FormDataResponse, error)
	// 查询表单数据列表
	ListFormData(ctx context.Context, in *ListFormDataRequest, opts ...grpc.CallOption) (*ListFormDataResponse, error)
}

type formDataServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFormDataServiceClient(cc grpc.ClientConnInterface) FormDataServiceClient {
	return &formDataServiceClient{cc}
}

func (c *formDataServiceClient) SubmitFormData(ctx context.Context, in *SubmitFormDataRequest, opts ...grpc.CallOption) (*FormDataResponse, error) {
	out := new(FormDataResponse)
	err := c.cc.Invoke(ctx, "/api.form.v1.FormDataService/SubmitFormData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *formDataServiceClient) GetFormData(ctx context.Context, in *GetFormDataRequest, opts ...grpc.CallOption) (*FormDataResponse, error) {
	out := new(FormDataResponse)
	err := c.cc.Invoke(ctx, "/api.form.v1.FormDataService/GetFormData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *formDataServiceClient) UpdateFormData(ctx context.Context, in *UpdateFormDataRequest, opts ...grpc.CallOption) (*FormDataResponse, error) {
	out := new(FormDataResponse)
	err := c.cc.Invoke(ctx, "/api.form.v1.FormDataService/UpdateFormData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *formDataServiceClient) ListFormData(ctx context.Context, in *ListFormDataRequest, opts ...grpc.CallOption) (*ListFormDataResponse, error) {
	out := new(ListFormDataResponse)
	err := c.cc.Invoke(ctx, "/api.form.v1.FormDataService/ListFormData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FormDataServiceServer is the server API for FormDataService service.
// All implementations should embed UnimplementedFormDataServiceServer
// for forward compatibility
type FormDataServiceServer interface {
	// 提交表单数据
	SubmitFormData(context.Context, *SubmitFormDataRequest) (*FormDataResponse, error)
	// 获取表单数据
	GetFormData(context.Context, *GetFormDataRequest) (*FormDataResponse, error)
	// 更新表单数据
	UpdateFormData(context.Context, *UpdateFormDataRequest) (*FormDataResponse, error)
	// 查询表单数据列表
	ListFormData(context.Context, *ListFormDataRequest) (*ListFormDataResponse, error)
}

// UnimplementedFormDataServiceServer should be embedded to have forward compatible implementations.
type UnimplementedFormDataServiceServer struct {
}

func (UnimplementedFormDataServiceServer) SubmitFormData(context.Context, *SubmitFormDataRequest) (*FormDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitFormData not implemented")
}
func (UnimplementedFormDataServiceServer) GetFormData(context.Context, *GetFormDataRequest) (*FormDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFormData not implemented")
}
func (UnimplementedFormDataServiceServer) UpdateFormData(context.Context, *UpdateFormDataRequest) (*FormDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFormData not implemented")
}
func (UnimplementedFormDataServiceServer) ListFormData(context.Context, *ListFormDataRequest) (*ListFormDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFormData not implemented")
}

// UnsafeFormDataServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FormDataServiceServer will
// result in compilation errors.
type UnsafeFormDataServiceServer interface {
	mustEmbedUnimplementedFormDataServiceServer()
}

func RegisterFormDataServiceServer(s grpc.ServiceRegistrar, srv FormDataServiceServer) {
	s.RegisterService(&FormDataService_ServiceDesc, srv)
}

func _FormDataService_SubmitFormData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubmitFormDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FormDataServiceServer).SubmitFormData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.form.v1.FormDataService/SubmitFormData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FormDataServiceServer).SubmitFormData(ctx, req.(*SubmitFormDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FormDataService_GetFormData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFormDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FormDataServiceServer).GetFormData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.form.v1.FormDataService/GetFormData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FormDataServiceServer).GetFormData(ctx, req.(*GetFormDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FormDataService_UpdateFormData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateFormDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FormDataServiceServer).UpdateFormData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.form.v1.FormDataService/UpdateFormData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FormDataServiceServer).UpdateFormData(ctx, req.(*UpdateFormDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FormDataService_ListFormData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListFormDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FormDataServiceServer).ListFormData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.form.v1.FormDataService/ListFormData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FormDataServiceServer).ListFormData(ctx, req.(*ListFormDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FormDataService_ServiceDesc is the grpc.ServiceDesc for FormDataService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FormDataService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.form.v1.FormDataService",
	HandlerType: (*FormDataServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SubmitFormData",
			Handler:    _FormDataService_SubmitFormData_Handler,
		},
		{
			MethodName: "GetFormData",
			Handler:    _FormDataService_GetFormData_Handler,
		},
		{
			MethodName: "UpdateFormData",
			Handler:    _FormDataService_UpdateFormData_Handler,
		},
		{
			MethodName: "ListFormData",
			Handler:    _FormDataService_ListFormData_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/form/v1/form.proto",
}
