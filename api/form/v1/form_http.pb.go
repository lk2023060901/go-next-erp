// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.9.0
// - protoc             (unknown)
// source: api/form/v1/form.proto

package formv1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationFormDefinitionServiceCreateFormDefinition = "/api.form.v1.FormDefinitionService/CreateFormDefinition"
const OperationFormDefinitionServiceDeleteFormDefinition = "/api.form.v1.FormDefinitionService/DeleteFormDefinition"
const OperationFormDefinitionServiceGetFormDefinition = "/api.form.v1.FormDefinitionService/GetFormDefinition"
const OperationFormDefinitionServiceListFormDefinitions = "/api.form.v1.FormDefinitionService/ListFormDefinitions"
const OperationFormDefinitionServiceUpdateFormDefinition = "/api.form.v1.FormDefinitionService/UpdateFormDefinition"

type FormDefinitionServiceHTTPServer interface {
	// CreateFormDefinition 创建表单定义
	CreateFormDefinition(context.Context, *CreateFormDefinitionRequest) (*FormDefinitionResponse, error)
	// DeleteFormDefinition 删除表单定义
	DeleteFormDefinition(context.Context, *DeleteFormDefinitionRequest) (*DeleteFormDefinitionResponse, error)
	// GetFormDefinition 获取表单定义
	GetFormDefinition(context.Context, *GetFormDefinitionRequest) (*FormDefinitionResponse, error)
	// ListFormDefinitions 列出表单定义
	ListFormDefinitions(context.Context, *ListFormDefinitionsRequest) (*ListFormDefinitionsResponse, error)
	// UpdateFormDefinition 更新表单定义
	UpdateFormDefinition(context.Context, *UpdateFormDefinitionRequest) (*FormDefinitionResponse, error)
}

func RegisterFormDefinitionServiceHTTPServer(s *http.Server, srv FormDefinitionServiceHTTPServer) {
	r := s.Route("/")
	r.POST("/api/v1/forms", _FormDefinitionService_CreateFormDefinition0_HTTP_Handler(srv))
	r.GET("/api/v1/forms/{id}", _FormDefinitionService_GetFormDefinition0_HTTP_Handler(srv))
	r.PUT("/api/v1/forms/{id}", _FormDefinitionService_UpdateFormDefinition0_HTTP_Handler(srv))
	r.DELETE("/api/v1/forms/{id}", _FormDefinitionService_DeleteFormDefinition0_HTTP_Handler(srv))
	r.GET("/api/v1/forms", _FormDefinitionService_ListFormDefinitions0_HTTP_Handler(srv))
}

func _FormDefinitionService_CreateFormDefinition0_HTTP_Handler(srv FormDefinitionServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateFormDefinitionRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationFormDefinitionServiceCreateFormDefinition)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateFormDefinition(ctx, req.(*CreateFormDefinitionRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*FormDefinitionResponse)
		return ctx.Result(200, reply)
	}
}

func _FormDefinitionService_GetFormDefinition0_HTTP_Handler(srv FormDefinitionServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetFormDefinitionRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationFormDefinitionServiceGetFormDefinition)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetFormDefinition(ctx, req.(*GetFormDefinitionRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*FormDefinitionResponse)
		return ctx.Result(200, reply)
	}
}

func _FormDefinitionService_UpdateFormDefinition0_HTTP_Handler(srv FormDefinitionServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateFormDefinitionRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationFormDefinitionServiceUpdateFormDefinition)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateFormDefinition(ctx, req.(*UpdateFormDefinitionRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*FormDefinitionResponse)
		return ctx.Result(200, reply)
	}
}

func _FormDefinitionService_DeleteFormDefinition0_HTTP_Handler(srv FormDefinitionServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteFormDefinitionRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationFormDefinitionServiceDeleteFormDefinition)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteFormDefinition(ctx, req.(*DeleteFormDefinitionRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteFormDefinitionResponse)
		return ctx.Result(200, reply)
	}
}

func _FormDefinitionService_ListFormDefinitions0_HTTP_Handler(srv FormDefinitionServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListFormDefinitionsRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationFormDefinitionServiceListFormDefinitions)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListFormDefinitions(ctx, req.(*ListFormDefinitionsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListFormDefinitionsResponse)
		return ctx.Result(200, reply)
	}
}

type FormDefinitionServiceHTTPClient interface {
	// CreateFormDefinition 创建表单定义
	CreateFormDefinition(ctx context.Context, req *CreateFormDefinitionRequest, opts ...http.CallOption) (rsp *FormDefinitionResponse, err error)
	// DeleteFormDefinition 删除表单定义
	DeleteFormDefinition(ctx context.Context, req *DeleteFormDefinitionRequest, opts ...http.CallOption) (rsp *DeleteFormDefinitionResponse, err error)
	// GetFormDefinition 获取表单定义
	GetFormDefinition(ctx context.Context, req *GetFormDefinitionRequest, opts ...http.CallOption) (rsp *FormDefinitionResponse, err error)
	// ListFormDefinitions 列出表单定义
	ListFormDefinitions(ctx context.Context, req *ListFormDefinitionsRequest, opts ...http.CallOption) (rsp *ListFormDefinitionsResponse, err error)
	// UpdateFormDefinition 更新表单定义
	UpdateFormDefinition(ctx context.Context, req *UpdateFormDefinitionRequest, opts ...http.CallOption) (rsp *FormDefinitionResponse, err error)
}

type FormDefinitionServiceHTTPClientImpl struct {
	cc *http.Client
}

func NewFormDefinitionServiceHTTPClient(client *http.Client) FormDefinitionServiceHTTPClient {
	return &FormDefinitionServiceHTTPClientImpl{client}
}

// CreateFormDefinition 创建表单定义
func (c *FormDefinitionServiceHTTPClientImpl) CreateFormDefinition(ctx context.Context, in *CreateFormDefinitionRequest, opts ...http.CallOption) (*FormDefinitionResponse, error) {
	var out FormDefinitionResponse
	pattern := "/api/v1/forms"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationFormDefinitionServiceCreateFormDefinition))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

// DeleteFormDefinition 删除表单定义
func (c *FormDefinitionServiceHTTPClientImpl) DeleteFormDefinition(ctx context.Context, in *DeleteFormDefinitionRequest, opts ...http.CallOption) (*DeleteFormDefinitionResponse, error) {
	var out DeleteFormDefinitionResponse
	pattern := "/api/v1/forms/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationFormDefinitionServiceDeleteFormDefinition))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

// GetFormDefinition 获取表单定义
func (c *FormDefinitionServiceHTTPClientImpl) GetFormDefinition(ctx context.Context, in *GetFormDefinitionRequest, opts ...http.CallOption) (*FormDefinitionResponse, error) {
	var out FormDefinitionResponse
	pattern := "/api/v1/forms/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationFormDefinitionServiceGetFormDefinition))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

// ListFormDefinitions 列出表单定义
func (c *FormDefinitionServiceHTTPClientImpl) ListFormDefinitions(ctx context.Context, in *ListFormDefinitionsRequest, opts ...http.CallOption) (*ListFormDefinitionsResponse, error) {
	var out ListFormDefinitionsResponse
	pattern := "/api/v1/forms"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationFormDefinitionServiceListFormDefinitions))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

// UpdateFormDefinition 更新表单定义
func (c *FormDefinitionServiceHTTPClientImpl) UpdateFormDefinition(ctx context.Context, in *UpdateFormDefinitionRequest, opts ...http.CallOption) (*FormDefinitionResponse, error) {
	var out FormDefinitionResponse
	pattern := "/api/v1/forms/{id}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationFormDefinitionServiceUpdateFormDefinition))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

const OperationFormDataServiceGetFormData = "/api.form.v1.FormDataService/GetFormData"
const OperationFormDataServiceListFormData = "/api.form.v1.FormDataService/ListFormData"
const OperationFormDataServiceSubmitFormData = "/api.form.v1.FormDataService/SubmitFormData"
const OperationFormDataServiceUpdateFormData = "/api.form.v1.FormDataService/UpdateFormData"

type FormDataServiceHTTPServer interface {
	// GetFormData 获取表单数据
	GetFormData(context.Context, *GetFormDataRequest) (*FormDataResponse, error)
	// ListFormData 查询表单数据列表
	ListFormData(context.Context, *ListFormDataRequest) (*ListFormDataResponse, error)
	// SubmitFormData 提交表单数据
	SubmitFormData(context.Context, *SubmitFormDataRequest) (*FormDataResponse, error)
	// UpdateFormData 更新表单数据
	UpdateFormData(context.Context, *UpdateFormDataRequest) (*FormDataResponse, error)
}

func RegisterFormDataServiceHTTPServer(s *http.Server, srv FormDataServiceHTTPServer) {
	r := s.Route("/")
	r.POST("/api/v1/forms/{form_id}/data", _FormDataService_SubmitFormData0_HTTP_Handler(srv))
	r.GET("/api/v1/forms/{form_id}/data/{id}", _FormDataService_GetFormData0_HTTP_Handler(srv))
	r.PUT("/api/v1/forms/{form_id}/data/{id}", _FormDataService_UpdateFormData0_HTTP_Handler(srv))
	r.GET("/api/v1/forms/{form_id}/data", _FormDataService_ListFormData0_HTTP_Handler(srv))
}

func _FormDataService_SubmitFormData0_HTTP_Handler(srv FormDataServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SubmitFormDataRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationFormDataServiceSubmitFormData)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SubmitFormData(ctx, req.(*SubmitFormDataRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*FormDataResponse)
		return ctx.Result(200, reply)
	}
}

func _FormDataService_GetFormData0_HTTP_Handler(srv FormDataServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetFormDataRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationFormDataServiceGetFormData)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetFormData(ctx, req.(*GetFormDataRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*FormDataResponse)
		return ctx.Result(200, reply)
	}
}

func _FormDataService_UpdateFormData0_HTTP_Handler(srv FormDataServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateFormDataRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationFormDataServiceUpdateFormData)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateFormData(ctx, req.(*UpdateFormDataRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*FormDataResponse)
		return ctx.Result(200, reply)
	}
}

func _FormDataService_ListFormData0_HTTP_Handler(srv FormDataServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListFormDataRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationFormDataServiceListFormData)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListFormData(ctx, req.(*ListFormDataRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListFormDataResponse)
		return ctx.Result(200, reply)
	}
}

type FormDataServiceHTTPClient interface {
	// GetFormData 获取表单数据
	GetFormData(ctx context.Context, req *GetFormDataRequest, opts ...http.CallOption) (rsp *FormDataResponse, err error)
	// ListFormData 查询表单数据列表
	ListFormData(ctx context.Context, req *ListFormDataRequest, opts ...http.CallOption) (rsp *ListFormDataResponse, err error)
	// SubmitFormData 提交表单数据
	SubmitFormData(ctx context.Context, req *SubmitFormDataRequest, opts ...http.CallOption) (rsp *FormDataResponse, err error)
	// UpdateFormData 更新表单数据
	UpdateFormData(ctx context.Context, req *UpdateFormDataRequest, opts ...http.CallOption) (rsp *FormDataResponse, err error)
}

type FormDataServiceHTTPClientImpl struct {
	cc *http.Client
}

func NewFormDataServiceHTTPClient(client *http.Client) FormDataServiceHTTPClient {
	return &FormDataServiceHTTPClientImpl{client}
}

// GetFormData 获取表单数据
func (c *FormDataServiceHTTPClientImpl) GetFormData(ctx context.Context, in *GetFormDataRequest, opts ...http.CallOption) (*FormDataResponse, error) {
	var out FormDataResponse
	pattern := "/api/v1/forms/{form_id}/data/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationFormDataServiceGetFormData))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

// ListFormData 查询表单数据列表
func (c *FormDataServiceHTTPClientImpl) ListFormData(ctx context.Context, in *ListFormDataRequest, opts ...http.CallOption) (*ListFormDataResponse, error) {
	var out ListFormDataResponse
	pattern := "/api/v1/forms/{form_id}/data"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationFormDataServiceListFormData))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

// SubmitFormData 提交表单数据
func (c *FormDataServiceHTTPClientImpl) SubmitFormData(ctx context.Context, in *SubmitFormDataRequest, opts ...http.CallOption) (*FormDataResponse, error) {
	var out FormDataResponse
	pattern := "/api/v1/forms/{form_id}/data"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationFormDataServiceSubmitFormData))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

// UpdateFormData 更新表单数据
func (c *FormDataServiceHTTPClientImpl) UpdateFormData(ctx context.Context, in *UpdateFormDataRequest, opts ...http.CallOption) (*FormDataResponse, error) {
	var out FormDataResponse
	pattern := "/api/v1/forms/{form_id}/data/{id}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationFormDataServiceUpdateFormData))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
