// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.9.0
// - protoc             (unknown)
// source: api/approval/v1/approval.proto

package approvalv1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationProcessDefinitionServiceCreateProcessDefinition = "/api.approval.v1.ProcessDefinitionService/CreateProcessDefinition"
const OperationProcessDefinitionServiceDeleteProcessDefinition = "/api.approval.v1.ProcessDefinitionService/DeleteProcessDefinition"
const OperationProcessDefinitionServiceDisableProcessDefinition = "/api.approval.v1.ProcessDefinitionService/DisableProcessDefinition"
const OperationProcessDefinitionServiceEnableProcessDefinition = "/api.approval.v1.ProcessDefinitionService/EnableProcessDefinition"
const OperationProcessDefinitionServiceGetProcessDefinition = "/api.approval.v1.ProcessDefinitionService/GetProcessDefinition"
const OperationProcessDefinitionServiceGetProcessStats = "/api.approval.v1.ProcessDefinitionService/GetProcessStats"
const OperationProcessDefinitionServiceListProcessDefinitions = "/api.approval.v1.ProcessDefinitionService/ListProcessDefinitions"
const OperationProcessDefinitionServiceUpdateProcessDefinition = "/api.approval.v1.ProcessDefinitionService/UpdateProcessDefinition"

type ProcessDefinitionServiceHTTPServer interface {
	// CreateProcessDefinition 创建流程定义
	CreateProcessDefinition(context.Context, *CreateProcessDefinitionRequest) (*ProcessDefinitionResponse, error)
	// DeleteProcessDefinition 删除流程定义
	DeleteProcessDefinition(context.Context, *DeleteProcessDefinitionRequest) (*emptypb.Empty, error)
	// DisableProcessDefinition 禁用流程定义
	DisableProcessDefinition(context.Context, *DisableProcessDefinitionRequest) (*emptypb.Empty, error)
	// EnableProcessDefinition 启用流程定义
	EnableProcessDefinition(context.Context, *EnableProcessDefinitionRequest) (*emptypb.Empty, error)
	// GetProcessDefinition 获取流程定义
	GetProcessDefinition(context.Context, *GetProcessDefinitionRequest) (*ProcessDefinitionResponse, error)
	// GetProcessStats 获取流程统计
	GetProcessStats(context.Context, *GetProcessStatsRequest) (*ProcessStatsResponse, error)
	// ListProcessDefinitions 列出流程定义
	ListProcessDefinitions(context.Context, *ListProcessDefinitionsRequest) (*ListProcessDefinitionsResponse, error)
	// UpdateProcessDefinition 更新流程定义
	UpdateProcessDefinition(context.Context, *UpdateProcessDefinitionRequest) (*ProcessDefinitionResponse, error)
}

func RegisterProcessDefinitionServiceHTTPServer(s *http.Server, srv ProcessDefinitionServiceHTTPServer) {
	r := s.Route("/")
	r.POST("/api/v1/processes", _ProcessDefinitionService_CreateProcessDefinition0_HTTP_Handler(srv))
	r.PUT("/api/v1/processes/{id}", _ProcessDefinitionService_UpdateProcessDefinition0_HTTP_Handler(srv))
	r.GET("/api/v1/processes/{id}", _ProcessDefinitionService_GetProcessDefinition0_HTTP_Handler(srv))
	r.GET("/api/v1/processes", _ProcessDefinitionService_ListProcessDefinitions0_HTTP_Handler(srv))
	r.DELETE("/api/v1/processes/{id}", _ProcessDefinitionService_DeleteProcessDefinition0_HTTP_Handler(srv))
	r.PATCH("/api/v1/processes/{id}/enable", _ProcessDefinitionService_EnableProcessDefinition0_HTTP_Handler(srv))
	r.PATCH("/api/v1/processes/{id}/disable", _ProcessDefinitionService_DisableProcessDefinition0_HTTP_Handler(srv))
	r.GET("/api/v1/processes/{id}/stats", _ProcessDefinitionService_GetProcessStats0_HTTP_Handler(srv))
}

func _ProcessDefinitionService_CreateProcessDefinition0_HTTP_Handler(srv ProcessDefinitionServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateProcessDefinitionRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationProcessDefinitionServiceCreateProcessDefinition)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateProcessDefinition(ctx, req.(*CreateProcessDefinitionRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ProcessDefinitionResponse)
		return ctx.Result(200, reply)
	}
}

func _ProcessDefinitionService_UpdateProcessDefinition0_HTTP_Handler(srv ProcessDefinitionServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateProcessDefinitionRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationProcessDefinitionServiceUpdateProcessDefinition)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateProcessDefinition(ctx, req.(*UpdateProcessDefinitionRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ProcessDefinitionResponse)
		return ctx.Result(200, reply)
	}
}

func _ProcessDefinitionService_GetProcessDefinition0_HTTP_Handler(srv ProcessDefinitionServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetProcessDefinitionRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationProcessDefinitionServiceGetProcessDefinition)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetProcessDefinition(ctx, req.(*GetProcessDefinitionRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ProcessDefinitionResponse)
		return ctx.Result(200, reply)
	}
}

func _ProcessDefinitionService_ListProcessDefinitions0_HTTP_Handler(srv ProcessDefinitionServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListProcessDefinitionsRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationProcessDefinitionServiceListProcessDefinitions)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListProcessDefinitions(ctx, req.(*ListProcessDefinitionsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListProcessDefinitionsResponse)
		return ctx.Result(200, reply)
	}
}

func _ProcessDefinitionService_DeleteProcessDefinition0_HTTP_Handler(srv ProcessDefinitionServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteProcessDefinitionRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationProcessDefinitionServiceDeleteProcessDefinition)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteProcessDefinition(ctx, req.(*DeleteProcessDefinitionRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _ProcessDefinitionService_EnableProcessDefinition0_HTTP_Handler(srv ProcessDefinitionServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in EnableProcessDefinitionRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationProcessDefinitionServiceEnableProcessDefinition)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.EnableProcessDefinition(ctx, req.(*EnableProcessDefinitionRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _ProcessDefinitionService_DisableProcessDefinition0_HTTP_Handler(srv ProcessDefinitionServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DisableProcessDefinitionRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationProcessDefinitionServiceDisableProcessDefinition)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DisableProcessDefinition(ctx, req.(*DisableProcessDefinitionRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _ProcessDefinitionService_GetProcessStats0_HTTP_Handler(srv ProcessDefinitionServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetProcessStatsRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationProcessDefinitionServiceGetProcessStats)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetProcessStats(ctx, req.(*GetProcessStatsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ProcessStatsResponse)
		return ctx.Result(200, reply)
	}
}

type ProcessDefinitionServiceHTTPClient interface {
	// CreateProcessDefinition 创建流程定义
	CreateProcessDefinition(ctx context.Context, req *CreateProcessDefinitionRequest, opts ...http.CallOption) (rsp *ProcessDefinitionResponse, err error)
	// DeleteProcessDefinition 删除流程定义
	DeleteProcessDefinition(ctx context.Context, req *DeleteProcessDefinitionRequest, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	// DisableProcessDefinition 禁用流程定义
	DisableProcessDefinition(ctx context.Context, req *DisableProcessDefinitionRequest, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	// EnableProcessDefinition 启用流程定义
	EnableProcessDefinition(ctx context.Context, req *EnableProcessDefinitionRequest, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	// GetProcessDefinition 获取流程定义
	GetProcessDefinition(ctx context.Context, req *GetProcessDefinitionRequest, opts ...http.CallOption) (rsp *ProcessDefinitionResponse, err error)
	// GetProcessStats 获取流程统计
	GetProcessStats(ctx context.Context, req *GetProcessStatsRequest, opts ...http.CallOption) (rsp *ProcessStatsResponse, err error)
	// ListProcessDefinitions 列出流程定义
	ListProcessDefinitions(ctx context.Context, req *ListProcessDefinitionsRequest, opts ...http.CallOption) (rsp *ListProcessDefinitionsResponse, err error)
	// UpdateProcessDefinition 更新流程定义
	UpdateProcessDefinition(ctx context.Context, req *UpdateProcessDefinitionRequest, opts ...http.CallOption) (rsp *ProcessDefinitionResponse, err error)
}

type ProcessDefinitionServiceHTTPClientImpl struct {
	cc *http.Client
}

func NewProcessDefinitionServiceHTTPClient(client *http.Client) ProcessDefinitionServiceHTTPClient {
	return &ProcessDefinitionServiceHTTPClientImpl{client}
}

// CreateProcessDefinition 创建流程定义
func (c *ProcessDefinitionServiceHTTPClientImpl) CreateProcessDefinition(ctx context.Context, in *CreateProcessDefinitionRequest, opts ...http.CallOption) (*ProcessDefinitionResponse, error) {
	var out ProcessDefinitionResponse
	pattern := "/api/v1/processes"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationProcessDefinitionServiceCreateProcessDefinition))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

// DeleteProcessDefinition 删除流程定义
func (c *ProcessDefinitionServiceHTTPClientImpl) DeleteProcessDefinition(ctx context.Context, in *DeleteProcessDefinitionRequest, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/api/v1/processes/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationProcessDefinitionServiceDeleteProcessDefinition))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

// DisableProcessDefinition 禁用流程定义
func (c *ProcessDefinitionServiceHTTPClientImpl) DisableProcessDefinition(ctx context.Context, in *DisableProcessDefinitionRequest, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/api/v1/processes/{id}/disable"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationProcessDefinitionServiceDisableProcessDefinition))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PATCH", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

// EnableProcessDefinition 启用流程定义
func (c *ProcessDefinitionServiceHTTPClientImpl) EnableProcessDefinition(ctx context.Context, in *EnableProcessDefinitionRequest, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/api/v1/processes/{id}/enable"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationProcessDefinitionServiceEnableProcessDefinition))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PATCH", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

// GetProcessDefinition 获取流程定义
func (c *ProcessDefinitionServiceHTTPClientImpl) GetProcessDefinition(ctx context.Context, in *GetProcessDefinitionRequest, opts ...http.CallOption) (*ProcessDefinitionResponse, error) {
	var out ProcessDefinitionResponse
	pattern := "/api/v1/processes/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationProcessDefinitionServiceGetProcessDefinition))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

// GetProcessStats 获取流程统计
func (c *ProcessDefinitionServiceHTTPClientImpl) GetProcessStats(ctx context.Context, in *GetProcessStatsRequest, opts ...http.CallOption) (*ProcessStatsResponse, error) {
	var out ProcessStatsResponse
	pattern := "/api/v1/processes/{id}/stats"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationProcessDefinitionServiceGetProcessStats))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

// ListProcessDefinitions 列出流程定义
func (c *ProcessDefinitionServiceHTTPClientImpl) ListProcessDefinitions(ctx context.Context, in *ListProcessDefinitionsRequest, opts ...http.CallOption) (*ListProcessDefinitionsResponse, error) {
	var out ListProcessDefinitionsResponse
	pattern := "/api/v1/processes"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationProcessDefinitionServiceListProcessDefinitions))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

// UpdateProcessDefinition 更新流程定义
func (c *ProcessDefinitionServiceHTTPClientImpl) UpdateProcessDefinition(ctx context.Context, in *UpdateProcessDefinitionRequest, opts ...http.CallOption) (*ProcessDefinitionResponse, error) {
	var out ProcessDefinitionResponse
	pattern := "/api/v1/processes/{id}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationProcessDefinitionServiceUpdateProcessDefinition))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

const OperationProcessInstanceServiceCancelProcess = "/api.approval.v1.ProcessInstanceService/CancelProcess"
const OperationProcessInstanceServiceGetInstanceStatsSummary = "/api.approval.v1.ProcessInstanceService/GetInstanceStatsSummary"
const OperationProcessInstanceServiceGetProcessInstance = "/api.approval.v1.ProcessInstanceService/GetProcessInstance"
const OperationProcessInstanceServiceListMyApplications = "/api.approval.v1.ProcessInstanceService/ListMyApplications"
const OperationProcessInstanceServiceListProcessInstances = "/api.approval.v1.ProcessInstanceService/ListProcessInstances"
const OperationProcessInstanceServiceStartProcess = "/api.approval.v1.ProcessInstanceService/StartProcess"
const OperationProcessInstanceServiceWithdrawProcess = "/api.approval.v1.ProcessInstanceService/WithdrawProcess"

type ProcessInstanceServiceHTTPServer interface {
	// CancelProcess 取消流程
	CancelProcess(context.Context, *CancelProcessRequest) (*emptypb.Empty, error)
	// GetInstanceStatsSummary 获取实例统计汇总
	GetInstanceStatsSummary(context.Context, *GetInstanceStatsSummaryRequest) (*InstanceStatsSummaryResponse, error)
	// GetProcessInstance 获取流程实例
	GetProcessInstance(context.Context, *GetProcessInstanceRequest) (*ProcessInstanceResponse, error)
	// ListMyApplications 列出我的申请
	ListMyApplications(context.Context, *ListMyApplicationsRequest) (*ListProcessInstancesResponse, error)
	// ListProcessInstances 列出流程实例
	ListProcessInstances(context.Context, *ListProcessInstancesRequest) (*ListProcessInstancesResponse, error)
	// StartProcess 启动流程
	StartProcess(context.Context, *StartProcessRequest) (*ProcessInstanceResponse, error)
	// WithdrawProcess 撤回流程
	WithdrawProcess(context.Context, *WithdrawProcessRequest) (*emptypb.Empty, error)
}

func RegisterProcessInstanceServiceHTTPServer(s *http.Server, srv ProcessInstanceServiceHTTPServer) {
	r := s.Route("/")
	r.POST("/api/v1/process-instances/start", _ProcessInstanceService_StartProcess0_HTTP_Handler(srv))
	r.GET("/api/v1/process-instances/{id}", _ProcessInstanceService_GetProcessInstance0_HTTP_Handler(srv))
	r.GET("/api/v1/process-instances/my-applications", _ProcessInstanceService_ListMyApplications0_HTTP_Handler(srv))
	r.POST("/api/v1/process-instances/{id}/withdraw", _ProcessInstanceService_WithdrawProcess0_HTTP_Handler(srv))
	r.POST("/api/v1/process-instances/{id}/cancel", _ProcessInstanceService_CancelProcess0_HTTP_Handler(srv))
	r.GET("/api/v1/process-instances", _ProcessInstanceService_ListProcessInstances0_HTTP_Handler(srv))
	r.GET("/api/v1/process-instances/stats/summary", _ProcessInstanceService_GetInstanceStatsSummary0_HTTP_Handler(srv))
}

func _ProcessInstanceService_StartProcess0_HTTP_Handler(srv ProcessInstanceServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in StartProcessRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationProcessInstanceServiceStartProcess)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.StartProcess(ctx, req.(*StartProcessRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ProcessInstanceResponse)
		return ctx.Result(200, reply)
	}
}

func _ProcessInstanceService_GetProcessInstance0_HTTP_Handler(srv ProcessInstanceServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetProcessInstanceRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationProcessInstanceServiceGetProcessInstance)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetProcessInstance(ctx, req.(*GetProcessInstanceRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ProcessInstanceResponse)
		return ctx.Result(200, reply)
	}
}

func _ProcessInstanceService_ListMyApplications0_HTTP_Handler(srv ProcessInstanceServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListMyApplicationsRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationProcessInstanceServiceListMyApplications)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListMyApplications(ctx, req.(*ListMyApplicationsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListProcessInstancesResponse)
		return ctx.Result(200, reply)
	}
}

func _ProcessInstanceService_WithdrawProcess0_HTTP_Handler(srv ProcessInstanceServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in WithdrawProcessRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationProcessInstanceServiceWithdrawProcess)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.WithdrawProcess(ctx, req.(*WithdrawProcessRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _ProcessInstanceService_CancelProcess0_HTTP_Handler(srv ProcessInstanceServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CancelProcessRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationProcessInstanceServiceCancelProcess)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CancelProcess(ctx, req.(*CancelProcessRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _ProcessInstanceService_ListProcessInstances0_HTTP_Handler(srv ProcessInstanceServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListProcessInstancesRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationProcessInstanceServiceListProcessInstances)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListProcessInstances(ctx, req.(*ListProcessInstancesRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListProcessInstancesResponse)
		return ctx.Result(200, reply)
	}
}

func _ProcessInstanceService_GetInstanceStatsSummary0_HTTP_Handler(srv ProcessInstanceServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetInstanceStatsSummaryRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationProcessInstanceServiceGetInstanceStatsSummary)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetInstanceStatsSummary(ctx, req.(*GetInstanceStatsSummaryRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*InstanceStatsSummaryResponse)
		return ctx.Result(200, reply)
	}
}

type ProcessInstanceServiceHTTPClient interface {
	// CancelProcess 取消流程
	CancelProcess(ctx context.Context, req *CancelProcessRequest, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	// GetInstanceStatsSummary 获取实例统计汇总
	GetInstanceStatsSummary(ctx context.Context, req *GetInstanceStatsSummaryRequest, opts ...http.CallOption) (rsp *InstanceStatsSummaryResponse, err error)
	// GetProcessInstance 获取流程实例
	GetProcessInstance(ctx context.Context, req *GetProcessInstanceRequest, opts ...http.CallOption) (rsp *ProcessInstanceResponse, err error)
	// ListMyApplications 列出我的申请
	ListMyApplications(ctx context.Context, req *ListMyApplicationsRequest, opts ...http.CallOption) (rsp *ListProcessInstancesResponse, err error)
	// ListProcessInstances 列出流程实例
	ListProcessInstances(ctx context.Context, req *ListProcessInstancesRequest, opts ...http.CallOption) (rsp *ListProcessInstancesResponse, err error)
	// StartProcess 启动流程
	StartProcess(ctx context.Context, req *StartProcessRequest, opts ...http.CallOption) (rsp *ProcessInstanceResponse, err error)
	// WithdrawProcess 撤回流程
	WithdrawProcess(ctx context.Context, req *WithdrawProcessRequest, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
}

type ProcessInstanceServiceHTTPClientImpl struct {
	cc *http.Client
}

func NewProcessInstanceServiceHTTPClient(client *http.Client) ProcessInstanceServiceHTTPClient {
	return &ProcessInstanceServiceHTTPClientImpl{client}
}

// CancelProcess 取消流程
func (c *ProcessInstanceServiceHTTPClientImpl) CancelProcess(ctx context.Context, in *CancelProcessRequest, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/api/v1/process-instances/{id}/cancel"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationProcessInstanceServiceCancelProcess))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

// GetInstanceStatsSummary 获取实例统计汇总
func (c *ProcessInstanceServiceHTTPClientImpl) GetInstanceStatsSummary(ctx context.Context, in *GetInstanceStatsSummaryRequest, opts ...http.CallOption) (*InstanceStatsSummaryResponse, error) {
	var out InstanceStatsSummaryResponse
	pattern := "/api/v1/process-instances/stats/summary"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationProcessInstanceServiceGetInstanceStatsSummary))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

// GetProcessInstance 获取流程实例
func (c *ProcessInstanceServiceHTTPClientImpl) GetProcessInstance(ctx context.Context, in *GetProcessInstanceRequest, opts ...http.CallOption) (*ProcessInstanceResponse, error) {
	var out ProcessInstanceResponse
	pattern := "/api/v1/process-instances/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationProcessInstanceServiceGetProcessInstance))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

// ListMyApplications 列出我的申请
func (c *ProcessInstanceServiceHTTPClientImpl) ListMyApplications(ctx context.Context, in *ListMyApplicationsRequest, opts ...http.CallOption) (*ListProcessInstancesResponse, error) {
	var out ListProcessInstancesResponse
	pattern := "/api/v1/process-instances/my-applications"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationProcessInstanceServiceListMyApplications))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

// ListProcessInstances 列出流程实例
func (c *ProcessInstanceServiceHTTPClientImpl) ListProcessInstances(ctx context.Context, in *ListProcessInstancesRequest, opts ...http.CallOption) (*ListProcessInstancesResponse, error) {
	var out ListProcessInstancesResponse
	pattern := "/api/v1/process-instances"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationProcessInstanceServiceListProcessInstances))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

// StartProcess 启动流程
func (c *ProcessInstanceServiceHTTPClientImpl) StartProcess(ctx context.Context, in *StartProcessRequest, opts ...http.CallOption) (*ProcessInstanceResponse, error) {
	var out ProcessInstanceResponse
	pattern := "/api/v1/process-instances/start"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationProcessInstanceServiceStartProcess))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

// WithdrawProcess 撤回流程
func (c *ProcessInstanceServiceHTTPClientImpl) WithdrawProcess(ctx context.Context, in *WithdrawProcessRequest, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/api/v1/process-instances/{id}/withdraw"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationProcessInstanceServiceWithdrawProcess))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

const OperationApprovalTaskServiceBatchProcessTasks = "/api.approval.v1.ApprovalTaskService/BatchProcessTasks"
const OperationApprovalTaskServiceCountPendingTasks = "/api.approval.v1.ApprovalTaskService/CountPendingTasks"
const OperationApprovalTaskServiceDelegateTask = "/api.approval.v1.ApprovalTaskService/DelegateTask"
const OperationApprovalTaskServiceGetApprovalTask = "/api.approval.v1.ApprovalTaskService/GetApprovalTask"
const OperationApprovalTaskServiceListMyTasks = "/api.approval.v1.ApprovalTaskService/ListMyTasks"
const OperationApprovalTaskServiceProcessTask = "/api.approval.v1.ApprovalTaskService/ProcessTask"
const OperationApprovalTaskServiceTransferTask = "/api.approval.v1.ApprovalTaskService/TransferTask"

type ApprovalTaskServiceHTTPServer interface {
	// BatchProcessTasks 批量处理任务
	BatchProcessTasks(context.Context, *BatchProcessTasksRequest) (*BatchProcessTasksResponse, error)
	// CountPendingTasks 统计待处理任务数
	CountPendingTasks(context.Context, *CountPendingTasksRequest) (*CountPendingTasksResponse, error)
	// DelegateTask 委托任务
	DelegateTask(context.Context, *DelegateTaskRequest) (*emptypb.Empty, error)
	// GetApprovalTask 获取审批任务
	GetApprovalTask(context.Context, *GetApprovalTaskRequest) (*ApprovalTaskResponse, error)
	// ListMyTasks 列出我的任务
	ListMyTasks(context.Context, *ListMyTasksRequest) (*ListApprovalTasksResponse, error)
	// ProcessTask 处理审批任务
	ProcessTask(context.Context, *ProcessTaskRequest) (*emptypb.Empty, error)
	// TransferTask 转审任务
	TransferTask(context.Context, *TransferTaskRequest) (*emptypb.Empty, error)
}

func RegisterApprovalTaskServiceHTTPServer(s *http.Server, srv ApprovalTaskServiceHTTPServer) {
	r := s.Route("/")
	r.GET("/api/v1/approval-tasks/{id}", _ApprovalTaskService_GetApprovalTask0_HTTP_Handler(srv))
	r.GET("/api/v1/approval-tasks/my-tasks", _ApprovalTaskService_ListMyTasks0_HTTP_Handler(srv))
	r.GET("/api/v1/approval-tasks/my-tasks/count", _ApprovalTaskService_CountPendingTasks0_HTTP_Handler(srv))
	r.POST("/api/v1/approval-tasks/{id}/process", _ApprovalTaskService_ProcessTask0_HTTP_Handler(srv))
	r.POST("/api/v1/approval-tasks/batch-process", _ApprovalTaskService_BatchProcessTasks0_HTTP_Handler(srv))
	r.POST("/api/v1/approval-tasks/{id}/transfer", _ApprovalTaskService_TransferTask0_HTTP_Handler(srv))
	r.POST("/api/v1/approval-tasks/{id}/delegate", _ApprovalTaskService_DelegateTask0_HTTP_Handler(srv))
}

func _ApprovalTaskService_GetApprovalTask0_HTTP_Handler(srv ApprovalTaskServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetApprovalTaskRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationApprovalTaskServiceGetApprovalTask)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetApprovalTask(ctx, req.(*GetApprovalTaskRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ApprovalTaskResponse)
		return ctx.Result(200, reply)
	}
}

func _ApprovalTaskService_ListMyTasks0_HTTP_Handler(srv ApprovalTaskServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListMyTasksRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationApprovalTaskServiceListMyTasks)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListMyTasks(ctx, req.(*ListMyTasksRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListApprovalTasksResponse)
		return ctx.Result(200, reply)
	}
}

func _ApprovalTaskService_CountPendingTasks0_HTTP_Handler(srv ApprovalTaskServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CountPendingTasksRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationApprovalTaskServiceCountPendingTasks)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CountPendingTasks(ctx, req.(*CountPendingTasksRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CountPendingTasksResponse)
		return ctx.Result(200, reply)
	}
}

func _ApprovalTaskService_ProcessTask0_HTTP_Handler(srv ApprovalTaskServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ProcessTaskRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationApprovalTaskServiceProcessTask)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ProcessTask(ctx, req.(*ProcessTaskRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _ApprovalTaskService_BatchProcessTasks0_HTTP_Handler(srv ApprovalTaskServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in BatchProcessTasksRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationApprovalTaskServiceBatchProcessTasks)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.BatchProcessTasks(ctx, req.(*BatchProcessTasksRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*BatchProcessTasksResponse)
		return ctx.Result(200, reply)
	}
}

func _ApprovalTaskService_TransferTask0_HTTP_Handler(srv ApprovalTaskServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in TransferTaskRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationApprovalTaskServiceTransferTask)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.TransferTask(ctx, req.(*TransferTaskRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _ApprovalTaskService_DelegateTask0_HTTP_Handler(srv ApprovalTaskServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DelegateTaskRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationApprovalTaskServiceDelegateTask)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DelegateTask(ctx, req.(*DelegateTaskRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

type ApprovalTaskServiceHTTPClient interface {
	// BatchProcessTasks 批量处理任务
	BatchProcessTasks(ctx context.Context, req *BatchProcessTasksRequest, opts ...http.CallOption) (rsp *BatchProcessTasksResponse, err error)
	// CountPendingTasks 统计待处理任务数
	CountPendingTasks(ctx context.Context, req *CountPendingTasksRequest, opts ...http.CallOption) (rsp *CountPendingTasksResponse, err error)
	// DelegateTask 委托任务
	DelegateTask(ctx context.Context, req *DelegateTaskRequest, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	// GetApprovalTask 获取审批任务
	GetApprovalTask(ctx context.Context, req *GetApprovalTaskRequest, opts ...http.CallOption) (rsp *ApprovalTaskResponse, err error)
	// ListMyTasks 列出我的任务
	ListMyTasks(ctx context.Context, req *ListMyTasksRequest, opts ...http.CallOption) (rsp *ListApprovalTasksResponse, err error)
	// ProcessTask 处理审批任务
	ProcessTask(ctx context.Context, req *ProcessTaskRequest, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	// TransferTask 转审任务
	TransferTask(ctx context.Context, req *TransferTaskRequest, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
}

type ApprovalTaskServiceHTTPClientImpl struct {
	cc *http.Client
}

func NewApprovalTaskServiceHTTPClient(client *http.Client) ApprovalTaskServiceHTTPClient {
	return &ApprovalTaskServiceHTTPClientImpl{client}
}

// BatchProcessTasks 批量处理任务
func (c *ApprovalTaskServiceHTTPClientImpl) BatchProcessTasks(ctx context.Context, in *BatchProcessTasksRequest, opts ...http.CallOption) (*BatchProcessTasksResponse, error) {
	var out BatchProcessTasksResponse
	pattern := "/api/v1/approval-tasks/batch-process"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationApprovalTaskServiceBatchProcessTasks))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

// CountPendingTasks 统计待处理任务数
func (c *ApprovalTaskServiceHTTPClientImpl) CountPendingTasks(ctx context.Context, in *CountPendingTasksRequest, opts ...http.CallOption) (*CountPendingTasksResponse, error) {
	var out CountPendingTasksResponse
	pattern := "/api/v1/approval-tasks/my-tasks/count"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationApprovalTaskServiceCountPendingTasks))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

// DelegateTask 委托任务
func (c *ApprovalTaskServiceHTTPClientImpl) DelegateTask(ctx context.Context, in *DelegateTaskRequest, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/api/v1/approval-tasks/{id}/delegate"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationApprovalTaskServiceDelegateTask))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

// GetApprovalTask 获取审批任务
func (c *ApprovalTaskServiceHTTPClientImpl) GetApprovalTask(ctx context.Context, in *GetApprovalTaskRequest, opts ...http.CallOption) (*ApprovalTaskResponse, error) {
	var out ApprovalTaskResponse
	pattern := "/api/v1/approval-tasks/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationApprovalTaskServiceGetApprovalTask))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

// ListMyTasks 列出我的任务
func (c *ApprovalTaskServiceHTTPClientImpl) ListMyTasks(ctx context.Context, in *ListMyTasksRequest, opts ...http.CallOption) (*ListApprovalTasksResponse, error) {
	var out ListApprovalTasksResponse
	pattern := "/api/v1/approval-tasks/my-tasks"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationApprovalTaskServiceListMyTasks))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

// ProcessTask 处理审批任务
func (c *ApprovalTaskServiceHTTPClientImpl) ProcessTask(ctx context.Context, in *ProcessTaskRequest, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/api/v1/approval-tasks/{id}/process"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationApprovalTaskServiceProcessTask))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

// TransferTask 转审任务
func (c *ApprovalTaskServiceHTTPClientImpl) TransferTask(ctx context.Context, in *TransferTaskRequest, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/api/v1/approval-tasks/{id}/transfer"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationApprovalTaskServiceTransferTask))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
