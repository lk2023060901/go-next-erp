// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: api/approval/v1/approval.proto

package approvalv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ProcessDefinitionServiceClient is the client API for ProcessDefinitionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProcessDefinitionServiceClient interface {
	// 创建流程定义
	CreateProcessDefinition(ctx context.Context, in *CreateProcessDefinitionRequest, opts ...grpc.CallOption) (*ProcessDefinitionResponse, error)
	// 更新流程定义
	UpdateProcessDefinition(ctx context.Context, in *UpdateProcessDefinitionRequest, opts ...grpc.CallOption) (*ProcessDefinitionResponse, error)
	// 获取流程定义
	GetProcessDefinition(ctx context.Context, in *GetProcessDefinitionRequest, opts ...grpc.CallOption) (*ProcessDefinitionResponse, error)
	// 列出流程定义
	ListProcessDefinitions(ctx context.Context, in *ListProcessDefinitionsRequest, opts ...grpc.CallOption) (*ListProcessDefinitionsResponse, error)
	// 删除流程定义
	DeleteProcessDefinition(ctx context.Context, in *DeleteProcessDefinitionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 启用流程定义
	EnableProcessDefinition(ctx context.Context, in *EnableProcessDefinitionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 禁用流程定义
	DisableProcessDefinition(ctx context.Context, in *DisableProcessDefinitionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 获取流程统计
	GetProcessStats(ctx context.Context, in *GetProcessStatsRequest, opts ...grpc.CallOption) (*ProcessStatsResponse, error)
}

type processDefinitionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewProcessDefinitionServiceClient(cc grpc.ClientConnInterface) ProcessDefinitionServiceClient {
	return &processDefinitionServiceClient{cc}
}

func (c *processDefinitionServiceClient) CreateProcessDefinition(ctx context.Context, in *CreateProcessDefinitionRequest, opts ...grpc.CallOption) (*ProcessDefinitionResponse, error) {
	out := new(ProcessDefinitionResponse)
	err := c.cc.Invoke(ctx, "/api.approval.v1.ProcessDefinitionService/CreateProcessDefinition", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *processDefinitionServiceClient) UpdateProcessDefinition(ctx context.Context, in *UpdateProcessDefinitionRequest, opts ...grpc.CallOption) (*ProcessDefinitionResponse, error) {
	out := new(ProcessDefinitionResponse)
	err := c.cc.Invoke(ctx, "/api.approval.v1.ProcessDefinitionService/UpdateProcessDefinition", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *processDefinitionServiceClient) GetProcessDefinition(ctx context.Context, in *GetProcessDefinitionRequest, opts ...grpc.CallOption) (*ProcessDefinitionResponse, error) {
	out := new(ProcessDefinitionResponse)
	err := c.cc.Invoke(ctx, "/api.approval.v1.ProcessDefinitionService/GetProcessDefinition", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *processDefinitionServiceClient) ListProcessDefinitions(ctx context.Context, in *ListProcessDefinitionsRequest, opts ...grpc.CallOption) (*ListProcessDefinitionsResponse, error) {
	out := new(ListProcessDefinitionsResponse)
	err := c.cc.Invoke(ctx, "/api.approval.v1.ProcessDefinitionService/ListProcessDefinitions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *processDefinitionServiceClient) DeleteProcessDefinition(ctx context.Context, in *DeleteProcessDefinitionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/api.approval.v1.ProcessDefinitionService/DeleteProcessDefinition", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *processDefinitionServiceClient) EnableProcessDefinition(ctx context.Context, in *EnableProcessDefinitionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/api.approval.v1.ProcessDefinitionService/EnableProcessDefinition", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *processDefinitionServiceClient) DisableProcessDefinition(ctx context.Context, in *DisableProcessDefinitionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/api.approval.v1.ProcessDefinitionService/DisableProcessDefinition", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *processDefinitionServiceClient) GetProcessStats(ctx context.Context, in *GetProcessStatsRequest, opts ...grpc.CallOption) (*ProcessStatsResponse, error) {
	out := new(ProcessStatsResponse)
	err := c.cc.Invoke(ctx, "/api.approval.v1.ProcessDefinitionService/GetProcessStats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProcessDefinitionServiceServer is the server API for ProcessDefinitionService service.
// All implementations should embed UnimplementedProcessDefinitionServiceServer
// for forward compatibility
type ProcessDefinitionServiceServer interface {
	// 创建流程定义
	CreateProcessDefinition(context.Context, *CreateProcessDefinitionRequest) (*ProcessDefinitionResponse, error)
	// 更新流程定义
	UpdateProcessDefinition(context.Context, *UpdateProcessDefinitionRequest) (*ProcessDefinitionResponse, error)
	// 获取流程定义
	GetProcessDefinition(context.Context, *GetProcessDefinitionRequest) (*ProcessDefinitionResponse, error)
	// 列出流程定义
	ListProcessDefinitions(context.Context, *ListProcessDefinitionsRequest) (*ListProcessDefinitionsResponse, error)
	// 删除流程定义
	DeleteProcessDefinition(context.Context, *DeleteProcessDefinitionRequest) (*emptypb.Empty, error)
	// 启用流程定义
	EnableProcessDefinition(context.Context, *EnableProcessDefinitionRequest) (*emptypb.Empty, error)
	// 禁用流程定义
	DisableProcessDefinition(context.Context, *DisableProcessDefinitionRequest) (*emptypb.Empty, error)
	// 获取流程统计
	GetProcessStats(context.Context, *GetProcessStatsRequest) (*ProcessStatsResponse, error)
}

// UnimplementedProcessDefinitionServiceServer should be embedded to have forward compatible implementations.
type UnimplementedProcessDefinitionServiceServer struct {
}

func (UnimplementedProcessDefinitionServiceServer) CreateProcessDefinition(context.Context, *CreateProcessDefinitionRequest) (*ProcessDefinitionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProcessDefinition not implemented")
}
func (UnimplementedProcessDefinitionServiceServer) UpdateProcessDefinition(context.Context, *UpdateProcessDefinitionRequest) (*ProcessDefinitionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProcessDefinition not implemented")
}
func (UnimplementedProcessDefinitionServiceServer) GetProcessDefinition(context.Context, *GetProcessDefinitionRequest) (*ProcessDefinitionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProcessDefinition not implemented")
}
func (UnimplementedProcessDefinitionServiceServer) ListProcessDefinitions(context.Context, *ListProcessDefinitionsRequest) (*ListProcessDefinitionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListProcessDefinitions not implemented")
}
func (UnimplementedProcessDefinitionServiceServer) DeleteProcessDefinition(context.Context, *DeleteProcessDefinitionRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteProcessDefinition not implemented")
}
func (UnimplementedProcessDefinitionServiceServer) EnableProcessDefinition(context.Context, *EnableProcessDefinitionRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnableProcessDefinition not implemented")
}
func (UnimplementedProcessDefinitionServiceServer) DisableProcessDefinition(context.Context, *DisableProcessDefinitionRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisableProcessDefinition not implemented")
}
func (UnimplementedProcessDefinitionServiceServer) GetProcessStats(context.Context, *GetProcessStatsRequest) (*ProcessStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProcessStats not implemented")
}

// UnsafeProcessDefinitionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProcessDefinitionServiceServer will
// result in compilation errors.
type UnsafeProcessDefinitionServiceServer interface {
	mustEmbedUnimplementedProcessDefinitionServiceServer()
}

func RegisterProcessDefinitionServiceServer(s grpc.ServiceRegistrar, srv ProcessDefinitionServiceServer) {
	s.RegisterService(&ProcessDefinitionService_ServiceDesc, srv)
}

func _ProcessDefinitionService_CreateProcessDefinition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateProcessDefinitionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProcessDefinitionServiceServer).CreateProcessDefinition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.approval.v1.ProcessDefinitionService/CreateProcessDefinition",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProcessDefinitionServiceServer).CreateProcessDefinition(ctx, req.(*CreateProcessDefinitionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProcessDefinitionService_UpdateProcessDefinition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProcessDefinitionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProcessDefinitionServiceServer).UpdateProcessDefinition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.approval.v1.ProcessDefinitionService/UpdateProcessDefinition",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProcessDefinitionServiceServer).UpdateProcessDefinition(ctx, req.(*UpdateProcessDefinitionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProcessDefinitionService_GetProcessDefinition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProcessDefinitionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProcessDefinitionServiceServer).GetProcessDefinition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.approval.v1.ProcessDefinitionService/GetProcessDefinition",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProcessDefinitionServiceServer).GetProcessDefinition(ctx, req.(*GetProcessDefinitionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProcessDefinitionService_ListProcessDefinitions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListProcessDefinitionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProcessDefinitionServiceServer).ListProcessDefinitions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.approval.v1.ProcessDefinitionService/ListProcessDefinitions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProcessDefinitionServiceServer).ListProcessDefinitions(ctx, req.(*ListProcessDefinitionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProcessDefinitionService_DeleteProcessDefinition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteProcessDefinitionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProcessDefinitionServiceServer).DeleteProcessDefinition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.approval.v1.ProcessDefinitionService/DeleteProcessDefinition",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProcessDefinitionServiceServer).DeleteProcessDefinition(ctx, req.(*DeleteProcessDefinitionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProcessDefinitionService_EnableProcessDefinition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnableProcessDefinitionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProcessDefinitionServiceServer).EnableProcessDefinition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.approval.v1.ProcessDefinitionService/EnableProcessDefinition",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProcessDefinitionServiceServer).EnableProcessDefinition(ctx, req.(*EnableProcessDefinitionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProcessDefinitionService_DisableProcessDefinition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DisableProcessDefinitionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProcessDefinitionServiceServer).DisableProcessDefinition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.approval.v1.ProcessDefinitionService/DisableProcessDefinition",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProcessDefinitionServiceServer).DisableProcessDefinition(ctx, req.(*DisableProcessDefinitionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProcessDefinitionService_GetProcessStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProcessStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProcessDefinitionServiceServer).GetProcessStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.approval.v1.ProcessDefinitionService/GetProcessStats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProcessDefinitionServiceServer).GetProcessStats(ctx, req.(*GetProcessStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ProcessDefinitionService_ServiceDesc is the grpc.ServiceDesc for ProcessDefinitionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProcessDefinitionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.approval.v1.ProcessDefinitionService",
	HandlerType: (*ProcessDefinitionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateProcessDefinition",
			Handler:    _ProcessDefinitionService_CreateProcessDefinition_Handler,
		},
		{
			MethodName: "UpdateProcessDefinition",
			Handler:    _ProcessDefinitionService_UpdateProcessDefinition_Handler,
		},
		{
			MethodName: "GetProcessDefinition",
			Handler:    _ProcessDefinitionService_GetProcessDefinition_Handler,
		},
		{
			MethodName: "ListProcessDefinitions",
			Handler:    _ProcessDefinitionService_ListProcessDefinitions_Handler,
		},
		{
			MethodName: "DeleteProcessDefinition",
			Handler:    _ProcessDefinitionService_DeleteProcessDefinition_Handler,
		},
		{
			MethodName: "EnableProcessDefinition",
			Handler:    _ProcessDefinitionService_EnableProcessDefinition_Handler,
		},
		{
			MethodName: "DisableProcessDefinition",
			Handler:    _ProcessDefinitionService_DisableProcessDefinition_Handler,
		},
		{
			MethodName: "GetProcessStats",
			Handler:    _ProcessDefinitionService_GetProcessStats_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/approval/v1/approval.proto",
}

// ProcessInstanceServiceClient is the client API for ProcessInstanceService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProcessInstanceServiceClient interface {
	// 启动流程
	StartProcess(ctx context.Context, in *StartProcessRequest, opts ...grpc.CallOption) (*ProcessInstanceResponse, error)
	// 获取流程实例
	GetProcessInstance(ctx context.Context, in *GetProcessInstanceRequest, opts ...grpc.CallOption) (*ProcessInstanceResponse, error)
	// 列出我的申请
	ListMyApplications(ctx context.Context, in *ListMyApplicationsRequest, opts ...grpc.CallOption) (*ListProcessInstancesResponse, error)
	// 撤回流程
	WithdrawProcess(ctx context.Context, in *WithdrawProcessRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 取消流程
	CancelProcess(ctx context.Context, in *CancelProcessRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 列出流程实例
	ListProcessInstances(ctx context.Context, in *ListProcessInstancesRequest, opts ...grpc.CallOption) (*ListProcessInstancesResponse, error)
	// 获取实例统计汇总
	GetInstanceStatsSummary(ctx context.Context, in *GetInstanceStatsSummaryRequest, opts ...grpc.CallOption) (*InstanceStatsSummaryResponse, error)
}

type processInstanceServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewProcessInstanceServiceClient(cc grpc.ClientConnInterface) ProcessInstanceServiceClient {
	return &processInstanceServiceClient{cc}
}

func (c *processInstanceServiceClient) StartProcess(ctx context.Context, in *StartProcessRequest, opts ...grpc.CallOption) (*ProcessInstanceResponse, error) {
	out := new(ProcessInstanceResponse)
	err := c.cc.Invoke(ctx, "/api.approval.v1.ProcessInstanceService/StartProcess", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *processInstanceServiceClient) GetProcessInstance(ctx context.Context, in *GetProcessInstanceRequest, opts ...grpc.CallOption) (*ProcessInstanceResponse, error) {
	out := new(ProcessInstanceResponse)
	err := c.cc.Invoke(ctx, "/api.approval.v1.ProcessInstanceService/GetProcessInstance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *processInstanceServiceClient) ListMyApplications(ctx context.Context, in *ListMyApplicationsRequest, opts ...grpc.CallOption) (*ListProcessInstancesResponse, error) {
	out := new(ListProcessInstancesResponse)
	err := c.cc.Invoke(ctx, "/api.approval.v1.ProcessInstanceService/ListMyApplications", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *processInstanceServiceClient) WithdrawProcess(ctx context.Context, in *WithdrawProcessRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/api.approval.v1.ProcessInstanceService/WithdrawProcess", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *processInstanceServiceClient) CancelProcess(ctx context.Context, in *CancelProcessRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/api.approval.v1.ProcessInstanceService/CancelProcess", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *processInstanceServiceClient) ListProcessInstances(ctx context.Context, in *ListProcessInstancesRequest, opts ...grpc.CallOption) (*ListProcessInstancesResponse, error) {
	out := new(ListProcessInstancesResponse)
	err := c.cc.Invoke(ctx, "/api.approval.v1.ProcessInstanceService/ListProcessInstances", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *processInstanceServiceClient) GetInstanceStatsSummary(ctx context.Context, in *GetInstanceStatsSummaryRequest, opts ...grpc.CallOption) (*InstanceStatsSummaryResponse, error) {
	out := new(InstanceStatsSummaryResponse)
	err := c.cc.Invoke(ctx, "/api.approval.v1.ProcessInstanceService/GetInstanceStatsSummary", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProcessInstanceServiceServer is the server API for ProcessInstanceService service.
// All implementations should embed UnimplementedProcessInstanceServiceServer
// for forward compatibility
type ProcessInstanceServiceServer interface {
	// 启动流程
	StartProcess(context.Context, *StartProcessRequest) (*ProcessInstanceResponse, error)
	// 获取流程实例
	GetProcessInstance(context.Context, *GetProcessInstanceRequest) (*ProcessInstanceResponse, error)
	// 列出我的申请
	ListMyApplications(context.Context, *ListMyApplicationsRequest) (*ListProcessInstancesResponse, error)
	// 撤回流程
	WithdrawProcess(context.Context, *WithdrawProcessRequest) (*emptypb.Empty, error)
	// 取消流程
	CancelProcess(context.Context, *CancelProcessRequest) (*emptypb.Empty, error)
	// 列出流程实例
	ListProcessInstances(context.Context, *ListProcessInstancesRequest) (*ListProcessInstancesResponse, error)
	// 获取实例统计汇总
	GetInstanceStatsSummary(context.Context, *GetInstanceStatsSummaryRequest) (*InstanceStatsSummaryResponse, error)
}

// UnimplementedProcessInstanceServiceServer should be embedded to have forward compatible implementations.
type UnimplementedProcessInstanceServiceServer struct {
}

func (UnimplementedProcessInstanceServiceServer) StartProcess(context.Context, *StartProcessRequest) (*ProcessInstanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartProcess not implemented")
}
func (UnimplementedProcessInstanceServiceServer) GetProcessInstance(context.Context, *GetProcessInstanceRequest) (*ProcessInstanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProcessInstance not implemented")
}
func (UnimplementedProcessInstanceServiceServer) ListMyApplications(context.Context, *ListMyApplicationsRequest) (*ListProcessInstancesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMyApplications not implemented")
}
func (UnimplementedProcessInstanceServiceServer) WithdrawProcess(context.Context, *WithdrawProcessRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WithdrawProcess not implemented")
}
func (UnimplementedProcessInstanceServiceServer) CancelProcess(context.Context, *CancelProcessRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelProcess not implemented")
}
func (UnimplementedProcessInstanceServiceServer) ListProcessInstances(context.Context, *ListProcessInstancesRequest) (*ListProcessInstancesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListProcessInstances not implemented")
}
func (UnimplementedProcessInstanceServiceServer) GetInstanceStatsSummary(context.Context, *GetInstanceStatsSummaryRequest) (*InstanceStatsSummaryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInstanceStatsSummary not implemented")
}

// UnsafeProcessInstanceServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProcessInstanceServiceServer will
// result in compilation errors.
type UnsafeProcessInstanceServiceServer interface {
	mustEmbedUnimplementedProcessInstanceServiceServer()
}

func RegisterProcessInstanceServiceServer(s grpc.ServiceRegistrar, srv ProcessInstanceServiceServer) {
	s.RegisterService(&ProcessInstanceService_ServiceDesc, srv)
}

func _ProcessInstanceService_StartProcess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartProcessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProcessInstanceServiceServer).StartProcess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.approval.v1.ProcessInstanceService/StartProcess",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProcessInstanceServiceServer).StartProcess(ctx, req.(*StartProcessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProcessInstanceService_GetProcessInstance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProcessInstanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProcessInstanceServiceServer).GetProcessInstance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.approval.v1.ProcessInstanceService/GetProcessInstance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProcessInstanceServiceServer).GetProcessInstance(ctx, req.(*GetProcessInstanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProcessInstanceService_ListMyApplications_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMyApplicationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProcessInstanceServiceServer).ListMyApplications(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.approval.v1.ProcessInstanceService/ListMyApplications",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProcessInstanceServiceServer).ListMyApplications(ctx, req.(*ListMyApplicationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProcessInstanceService_WithdrawProcess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WithdrawProcessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProcessInstanceServiceServer).WithdrawProcess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.approval.v1.ProcessInstanceService/WithdrawProcess",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProcessInstanceServiceServer).WithdrawProcess(ctx, req.(*WithdrawProcessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProcessInstanceService_CancelProcess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelProcessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProcessInstanceServiceServer).CancelProcess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.approval.v1.ProcessInstanceService/CancelProcess",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProcessInstanceServiceServer).CancelProcess(ctx, req.(*CancelProcessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProcessInstanceService_ListProcessInstances_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListProcessInstancesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProcessInstanceServiceServer).ListProcessInstances(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.approval.v1.ProcessInstanceService/ListProcessInstances",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProcessInstanceServiceServer).ListProcessInstances(ctx, req.(*ListProcessInstancesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProcessInstanceService_GetInstanceStatsSummary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInstanceStatsSummaryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProcessInstanceServiceServer).GetInstanceStatsSummary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.approval.v1.ProcessInstanceService/GetInstanceStatsSummary",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProcessInstanceServiceServer).GetInstanceStatsSummary(ctx, req.(*GetInstanceStatsSummaryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ProcessInstanceService_ServiceDesc is the grpc.ServiceDesc for ProcessInstanceService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProcessInstanceService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.approval.v1.ProcessInstanceService",
	HandlerType: (*ProcessInstanceServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StartProcess",
			Handler:    _ProcessInstanceService_StartProcess_Handler,
		},
		{
			MethodName: "GetProcessInstance",
			Handler:    _ProcessInstanceService_GetProcessInstance_Handler,
		},
		{
			MethodName: "ListMyApplications",
			Handler:    _ProcessInstanceService_ListMyApplications_Handler,
		},
		{
			MethodName: "WithdrawProcess",
			Handler:    _ProcessInstanceService_WithdrawProcess_Handler,
		},
		{
			MethodName: "CancelProcess",
			Handler:    _ProcessInstanceService_CancelProcess_Handler,
		},
		{
			MethodName: "ListProcessInstances",
			Handler:    _ProcessInstanceService_ListProcessInstances_Handler,
		},
		{
			MethodName: "GetInstanceStatsSummary",
			Handler:    _ProcessInstanceService_GetInstanceStatsSummary_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/approval/v1/approval.proto",
}

// ApprovalTaskServiceClient is the client API for ApprovalTaskService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ApprovalTaskServiceClient interface {
	// 获取审批任务
	GetApprovalTask(ctx context.Context, in *GetApprovalTaskRequest, opts ...grpc.CallOption) (*ApprovalTaskResponse, error)
	// 列出我的任务
	ListMyTasks(ctx context.Context, in *ListMyTasksRequest, opts ...grpc.CallOption) (*ListApprovalTasksResponse, error)
	// 统计待处理任务数
	CountPendingTasks(ctx context.Context, in *CountPendingTasksRequest, opts ...grpc.CallOption) (*CountPendingTasksResponse, error)
	// 处理审批任务
	ProcessTask(ctx context.Context, in *ProcessTaskRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 批量处理任务
	BatchProcessTasks(ctx context.Context, in *BatchProcessTasksRequest, opts ...grpc.CallOption) (*BatchProcessTasksResponse, error)
	// 转审任务
	TransferTask(ctx context.Context, in *TransferTaskRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 委托任务
	DelegateTask(ctx context.Context, in *DelegateTaskRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type approvalTaskServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewApprovalTaskServiceClient(cc grpc.ClientConnInterface) ApprovalTaskServiceClient {
	return &approvalTaskServiceClient{cc}
}

func (c *approvalTaskServiceClient) GetApprovalTask(ctx context.Context, in *GetApprovalTaskRequest, opts ...grpc.CallOption) (*ApprovalTaskResponse, error) {
	out := new(ApprovalTaskResponse)
	err := c.cc.Invoke(ctx, "/api.approval.v1.ApprovalTaskService/GetApprovalTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *approvalTaskServiceClient) ListMyTasks(ctx context.Context, in *ListMyTasksRequest, opts ...grpc.CallOption) (*ListApprovalTasksResponse, error) {
	out := new(ListApprovalTasksResponse)
	err := c.cc.Invoke(ctx, "/api.approval.v1.ApprovalTaskService/ListMyTasks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *approvalTaskServiceClient) CountPendingTasks(ctx context.Context, in *CountPendingTasksRequest, opts ...grpc.CallOption) (*CountPendingTasksResponse, error) {
	out := new(CountPendingTasksResponse)
	err := c.cc.Invoke(ctx, "/api.approval.v1.ApprovalTaskService/CountPendingTasks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *approvalTaskServiceClient) ProcessTask(ctx context.Context, in *ProcessTaskRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/api.approval.v1.ApprovalTaskService/ProcessTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *approvalTaskServiceClient) BatchProcessTasks(ctx context.Context, in *BatchProcessTasksRequest, opts ...grpc.CallOption) (*BatchProcessTasksResponse, error) {
	out := new(BatchProcessTasksResponse)
	err := c.cc.Invoke(ctx, "/api.approval.v1.ApprovalTaskService/BatchProcessTasks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *approvalTaskServiceClient) TransferTask(ctx context.Context, in *TransferTaskRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/api.approval.v1.ApprovalTaskService/TransferTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *approvalTaskServiceClient) DelegateTask(ctx context.Context, in *DelegateTaskRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/api.approval.v1.ApprovalTaskService/DelegateTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ApprovalTaskServiceServer is the server API for ApprovalTaskService service.
// All implementations should embed UnimplementedApprovalTaskServiceServer
// for forward compatibility
type ApprovalTaskServiceServer interface {
	// 获取审批任务
	GetApprovalTask(context.Context, *GetApprovalTaskRequest) (*ApprovalTaskResponse, error)
	// 列出我的任务
	ListMyTasks(context.Context, *ListMyTasksRequest) (*ListApprovalTasksResponse, error)
	// 统计待处理任务数
	CountPendingTasks(context.Context, *CountPendingTasksRequest) (*CountPendingTasksResponse, error)
	// 处理审批任务
	ProcessTask(context.Context, *ProcessTaskRequest) (*emptypb.Empty, error)
	// 批量处理任务
	BatchProcessTasks(context.Context, *BatchProcessTasksRequest) (*BatchProcessTasksResponse, error)
	// 转审任务
	TransferTask(context.Context, *TransferTaskRequest) (*emptypb.Empty, error)
	// 委托任务
	DelegateTask(context.Context, *DelegateTaskRequest) (*emptypb.Empty, error)
}

// UnimplementedApprovalTaskServiceServer should be embedded to have forward compatible implementations.
type UnimplementedApprovalTaskServiceServer struct {
}

func (UnimplementedApprovalTaskServiceServer) GetApprovalTask(context.Context, *GetApprovalTaskRequest) (*ApprovalTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetApprovalTask not implemented")
}
func (UnimplementedApprovalTaskServiceServer) ListMyTasks(context.Context, *ListMyTasksRequest) (*ListApprovalTasksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMyTasks not implemented")
}
func (UnimplementedApprovalTaskServiceServer) CountPendingTasks(context.Context, *CountPendingTasksRequest) (*CountPendingTasksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountPendingTasks not implemented")
}
func (UnimplementedApprovalTaskServiceServer) ProcessTask(context.Context, *ProcessTaskRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProcessTask not implemented")
}
func (UnimplementedApprovalTaskServiceServer) BatchProcessTasks(context.Context, *BatchProcessTasksRequest) (*BatchProcessTasksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchProcessTasks not implemented")
}
func (UnimplementedApprovalTaskServiceServer) TransferTask(context.Context, *TransferTaskRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TransferTask not implemented")
}
func (UnimplementedApprovalTaskServiceServer) DelegateTask(context.Context, *DelegateTaskRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelegateTask not implemented")
}

// UnsafeApprovalTaskServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ApprovalTaskServiceServer will
// result in compilation errors.
type UnsafeApprovalTaskServiceServer interface {
	mustEmbedUnimplementedApprovalTaskServiceServer()
}

func RegisterApprovalTaskServiceServer(s grpc.ServiceRegistrar, srv ApprovalTaskServiceServer) {
	s.RegisterService(&ApprovalTaskService_ServiceDesc, srv)
}

func _ApprovalTaskService_GetApprovalTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetApprovalTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApprovalTaskServiceServer).GetApprovalTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.approval.v1.ApprovalTaskService/GetApprovalTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApprovalTaskServiceServer).GetApprovalTask(ctx, req.(*GetApprovalTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApprovalTaskService_ListMyTasks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMyTasksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApprovalTaskServiceServer).ListMyTasks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.approval.v1.ApprovalTaskService/ListMyTasks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApprovalTaskServiceServer).ListMyTasks(ctx, req.(*ListMyTasksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApprovalTaskService_CountPendingTasks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountPendingTasksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApprovalTaskServiceServer).CountPendingTasks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.approval.v1.ApprovalTaskService/CountPendingTasks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApprovalTaskServiceServer).CountPendingTasks(ctx, req.(*CountPendingTasksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApprovalTaskService_ProcessTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProcessTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApprovalTaskServiceServer).ProcessTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.approval.v1.ApprovalTaskService/ProcessTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApprovalTaskServiceServer).ProcessTask(ctx, req.(*ProcessTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApprovalTaskService_BatchProcessTasks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchProcessTasksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApprovalTaskServiceServer).BatchProcessTasks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.approval.v1.ApprovalTaskService/BatchProcessTasks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApprovalTaskServiceServer).BatchProcessTasks(ctx, req.(*BatchProcessTasksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApprovalTaskService_TransferTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransferTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApprovalTaskServiceServer).TransferTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.approval.v1.ApprovalTaskService/TransferTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApprovalTaskServiceServer).TransferTask(ctx, req.(*TransferTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApprovalTaskService_DelegateTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelegateTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApprovalTaskServiceServer).DelegateTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.approval.v1.ApprovalTaskService/DelegateTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApprovalTaskServiceServer).DelegateTask(ctx, req.(*DelegateTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ApprovalTaskService_ServiceDesc is the grpc.ServiceDesc for ApprovalTaskService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ApprovalTaskService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.approval.v1.ApprovalTaskService",
	HandlerType: (*ApprovalTaskServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetApprovalTask",
			Handler:    _ApprovalTaskService_GetApprovalTask_Handler,
		},
		{
			MethodName: "ListMyTasks",
			Handler:    _ApprovalTaskService_ListMyTasks_Handler,
		},
		{
			MethodName: "CountPendingTasks",
			Handler:    _ApprovalTaskService_CountPendingTasks_Handler,
		},
		{
			MethodName: "ProcessTask",
			Handler:    _ApprovalTaskService_ProcessTask_Handler,
		},
		{
			MethodName: "BatchProcessTasks",
			Handler:    _ApprovalTaskService_BatchProcessTasks_Handler,
		},
		{
			MethodName: "TransferTask",
			Handler:    _ApprovalTaskService_TransferTask_Handler,
		},
		{
			MethodName: "DelegateTask",
			Handler:    _ApprovalTaskService_DelegateTask_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/approval/v1/approval.proto",
}
