// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/approval/v1/approval.proto

package approvalv1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// define the regex for a UUID once up-front
var _approval_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on CreateProcessDefinitionRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateProcessDefinitionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateProcessDefinitionRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CreateProcessDefinitionRequestMultiError, or nil if none found.
func (m *CreateProcessDefinitionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateProcessDefinitionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetCode()); l < 1 || l > 50 {
		err := CreateProcessDefinitionRequestValidationError{
			field:  "Code",
			reason: "value length must be between 1 and 50 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetName()); l < 1 || l > 100 {
		err := CreateProcessDefinitionRequestValidationError{
			field:  "Name",
			reason: "value length must be between 1 and 100 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetCategory()); l < 1 || l > 50 {
		err := CreateProcessDefinitionRequestValidationError{
			field:  "Category",
			reason: "value length must be between 1 and 50 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if err := m._validateUuid(m.GetFormId()); err != nil {
		err = CreateProcessDefinitionRequestValidationError{
			field:  "FormId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if err := m._validateUuid(m.GetWorkflowId()); err != nil {
		err = CreateProcessDefinitionRequestValidationError{
			field:  "WorkflowId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CreateProcessDefinitionRequestMultiError(errors)
	}

	return nil
}

func (m *CreateProcessDefinitionRequest) _validateUuid(uuid string) error {
	if matched := _approval_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// CreateProcessDefinitionRequestMultiError is an error wrapping multiple
// validation errors returned by CreateProcessDefinitionRequest.ValidateAll()
// if the designated constraints aren't met.
type CreateProcessDefinitionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateProcessDefinitionRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateProcessDefinitionRequestMultiError) AllErrors() []error { return m }

// CreateProcessDefinitionRequestValidationError is the validation error
// returned by CreateProcessDefinitionRequest.Validate if the designated
// constraints aren't met.
type CreateProcessDefinitionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateProcessDefinitionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateProcessDefinitionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateProcessDefinitionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateProcessDefinitionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateProcessDefinitionRequestValidationError) ErrorName() string {
	return "CreateProcessDefinitionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateProcessDefinitionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateProcessDefinitionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateProcessDefinitionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateProcessDefinitionRequestValidationError{}

// Validate checks the field values on UpdateProcessDefinitionRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateProcessDefinitionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateProcessDefinitionRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// UpdateProcessDefinitionRequestMultiError, or nil if none found.
func (m *UpdateProcessDefinitionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateProcessDefinitionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetId()); err != nil {
		err = UpdateProcessDefinitionRequestValidationError{
			field:  "Id",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetName()); l < 1 || l > 100 {
		err := UpdateProcessDefinitionRequestValidationError{
			field:  "Name",
			reason: "value length must be between 1 and 100 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if err := m._validateUuid(m.GetFormId()); err != nil {
		err = UpdateProcessDefinitionRequestValidationError{
			field:  "FormId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if err := m._validateUuid(m.GetWorkflowId()); err != nil {
		err = UpdateProcessDefinitionRequestValidationError{
			field:  "WorkflowId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Enabled

	if len(errors) > 0 {
		return UpdateProcessDefinitionRequestMultiError(errors)
	}

	return nil
}

func (m *UpdateProcessDefinitionRequest) _validateUuid(uuid string) error {
	if matched := _approval_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// UpdateProcessDefinitionRequestMultiError is an error wrapping multiple
// validation errors returned by UpdateProcessDefinitionRequest.ValidateAll()
// if the designated constraints aren't met.
type UpdateProcessDefinitionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateProcessDefinitionRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateProcessDefinitionRequestMultiError) AllErrors() []error { return m }

// UpdateProcessDefinitionRequestValidationError is the validation error
// returned by UpdateProcessDefinitionRequest.Validate if the designated
// constraints aren't met.
type UpdateProcessDefinitionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateProcessDefinitionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateProcessDefinitionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateProcessDefinitionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateProcessDefinitionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateProcessDefinitionRequestValidationError) ErrorName() string {
	return "UpdateProcessDefinitionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateProcessDefinitionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateProcessDefinitionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateProcessDefinitionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateProcessDefinitionRequestValidationError{}

// Validate checks the field values on GetProcessDefinitionRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetProcessDefinitionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetProcessDefinitionRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetProcessDefinitionRequestMultiError, or nil if none found.
func (m *GetProcessDefinitionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetProcessDefinitionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetId()); err != nil {
		err = GetProcessDefinitionRequestValidationError{
			field:  "Id",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetProcessDefinitionRequestMultiError(errors)
	}

	return nil
}

func (m *GetProcessDefinitionRequest) _validateUuid(uuid string) error {
	if matched := _approval_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// GetProcessDefinitionRequestMultiError is an error wrapping multiple
// validation errors returned by GetProcessDefinitionRequest.ValidateAll() if
// the designated constraints aren't met.
type GetProcessDefinitionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetProcessDefinitionRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetProcessDefinitionRequestMultiError) AllErrors() []error { return m }

// GetProcessDefinitionRequestValidationError is the validation error returned
// by GetProcessDefinitionRequest.Validate if the designated constraints
// aren't met.
type GetProcessDefinitionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetProcessDefinitionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetProcessDefinitionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetProcessDefinitionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetProcessDefinitionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetProcessDefinitionRequestValidationError) ErrorName() string {
	return "GetProcessDefinitionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetProcessDefinitionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetProcessDefinitionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetProcessDefinitionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetProcessDefinitionRequestValidationError{}

// Validate checks the field values on ListProcessDefinitionsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListProcessDefinitionsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListProcessDefinitionsRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListProcessDefinitionsRequestMultiError, or nil if none found.
func (m *ListProcessDefinitionsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListProcessDefinitionsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Page

	// no validation rules for PageSize

	if len(errors) > 0 {
		return ListProcessDefinitionsRequestMultiError(errors)
	}

	return nil
}

// ListProcessDefinitionsRequestMultiError is an error wrapping multiple
// validation errors returned by ListProcessDefinitionsRequest.ValidateAll()
// if the designated constraints aren't met.
type ListProcessDefinitionsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListProcessDefinitionsRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListProcessDefinitionsRequestMultiError) AllErrors() []error { return m }

// ListProcessDefinitionsRequestValidationError is the validation error
// returned by ListProcessDefinitionsRequest.Validate if the designated
// constraints aren't met.
type ListProcessDefinitionsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListProcessDefinitionsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListProcessDefinitionsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListProcessDefinitionsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListProcessDefinitionsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListProcessDefinitionsRequestValidationError) ErrorName() string {
	return "ListProcessDefinitionsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListProcessDefinitionsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListProcessDefinitionsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListProcessDefinitionsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListProcessDefinitionsRequestValidationError{}

// Validate checks the field values on DeleteProcessDefinitionRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteProcessDefinitionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteProcessDefinitionRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// DeleteProcessDefinitionRequestMultiError, or nil if none found.
func (m *DeleteProcessDefinitionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteProcessDefinitionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetId()); err != nil {
		err = DeleteProcessDefinitionRequestValidationError{
			field:  "Id",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteProcessDefinitionRequestMultiError(errors)
	}

	return nil
}

func (m *DeleteProcessDefinitionRequest) _validateUuid(uuid string) error {
	if matched := _approval_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// DeleteProcessDefinitionRequestMultiError is an error wrapping multiple
// validation errors returned by DeleteProcessDefinitionRequest.ValidateAll()
// if the designated constraints aren't met.
type DeleteProcessDefinitionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteProcessDefinitionRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteProcessDefinitionRequestMultiError) AllErrors() []error { return m }

// DeleteProcessDefinitionRequestValidationError is the validation error
// returned by DeleteProcessDefinitionRequest.Validate if the designated
// constraints aren't met.
type DeleteProcessDefinitionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteProcessDefinitionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteProcessDefinitionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteProcessDefinitionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteProcessDefinitionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteProcessDefinitionRequestValidationError) ErrorName() string {
	return "DeleteProcessDefinitionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteProcessDefinitionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteProcessDefinitionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteProcessDefinitionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteProcessDefinitionRequestValidationError{}

// Validate checks the field values on EnableProcessDefinitionRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *EnableProcessDefinitionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EnableProcessDefinitionRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// EnableProcessDefinitionRequestMultiError, or nil if none found.
func (m *EnableProcessDefinitionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *EnableProcessDefinitionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetId()); err != nil {
		err = EnableProcessDefinitionRequestValidationError{
			field:  "Id",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return EnableProcessDefinitionRequestMultiError(errors)
	}

	return nil
}

func (m *EnableProcessDefinitionRequest) _validateUuid(uuid string) error {
	if matched := _approval_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// EnableProcessDefinitionRequestMultiError is an error wrapping multiple
// validation errors returned by EnableProcessDefinitionRequest.ValidateAll()
// if the designated constraints aren't met.
type EnableProcessDefinitionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EnableProcessDefinitionRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EnableProcessDefinitionRequestMultiError) AllErrors() []error { return m }

// EnableProcessDefinitionRequestValidationError is the validation error
// returned by EnableProcessDefinitionRequest.Validate if the designated
// constraints aren't met.
type EnableProcessDefinitionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EnableProcessDefinitionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EnableProcessDefinitionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EnableProcessDefinitionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EnableProcessDefinitionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EnableProcessDefinitionRequestValidationError) ErrorName() string {
	return "EnableProcessDefinitionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e EnableProcessDefinitionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEnableProcessDefinitionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EnableProcessDefinitionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EnableProcessDefinitionRequestValidationError{}

// Validate checks the field values on DisableProcessDefinitionRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DisableProcessDefinitionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DisableProcessDefinitionRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// DisableProcessDefinitionRequestMultiError, or nil if none found.
func (m *DisableProcessDefinitionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DisableProcessDefinitionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetId()); err != nil {
		err = DisableProcessDefinitionRequestValidationError{
			field:  "Id",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DisableProcessDefinitionRequestMultiError(errors)
	}

	return nil
}

func (m *DisableProcessDefinitionRequest) _validateUuid(uuid string) error {
	if matched := _approval_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// DisableProcessDefinitionRequestMultiError is an error wrapping multiple
// validation errors returned by DisableProcessDefinitionRequest.ValidateAll()
// if the designated constraints aren't met.
type DisableProcessDefinitionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DisableProcessDefinitionRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DisableProcessDefinitionRequestMultiError) AllErrors() []error { return m }

// DisableProcessDefinitionRequestValidationError is the validation error
// returned by DisableProcessDefinitionRequest.Validate if the designated
// constraints aren't met.
type DisableProcessDefinitionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DisableProcessDefinitionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DisableProcessDefinitionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DisableProcessDefinitionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DisableProcessDefinitionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DisableProcessDefinitionRequestValidationError) ErrorName() string {
	return "DisableProcessDefinitionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DisableProcessDefinitionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDisableProcessDefinitionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DisableProcessDefinitionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DisableProcessDefinitionRequestValidationError{}

// Validate checks the field values on GetProcessStatsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetProcessStatsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetProcessStatsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetProcessStatsRequestMultiError, or nil if none found.
func (m *GetProcessStatsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetProcessStatsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetId()); err != nil {
		err = GetProcessStatsRequestValidationError{
			field:  "Id",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetProcessStatsRequestMultiError(errors)
	}

	return nil
}

func (m *GetProcessStatsRequest) _validateUuid(uuid string) error {
	if matched := _approval_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// GetProcessStatsRequestMultiError is an error wrapping multiple validation
// errors returned by GetProcessStatsRequest.ValidateAll() if the designated
// constraints aren't met.
type GetProcessStatsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetProcessStatsRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetProcessStatsRequestMultiError) AllErrors() []error { return m }

// GetProcessStatsRequestValidationError is the validation error returned by
// GetProcessStatsRequest.Validate if the designated constraints aren't met.
type GetProcessStatsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetProcessStatsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetProcessStatsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetProcessStatsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetProcessStatsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetProcessStatsRequestValidationError) ErrorName() string {
	return "GetProcessStatsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetProcessStatsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetProcessStatsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetProcessStatsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetProcessStatsRequestValidationError{}

// Validate checks the field values on ProcessDefinitionResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ProcessDefinitionResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ProcessDefinitionResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ProcessDefinitionResponseMultiError, or nil if none found.
func (m *ProcessDefinitionResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ProcessDefinitionResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for TenantId

	// no validation rules for Code

	// no validation rules for Name

	// no validation rules for FormId

	// no validation rules for FormName

	// no validation rules for WorkflowId

	// no validation rules for WorkflowName

	// no validation rules for Enabled

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	if len(errors) > 0 {
		return ProcessDefinitionResponseMultiError(errors)
	}

	return nil
}

// ProcessDefinitionResponseMultiError is an error wrapping multiple validation
// errors returned by ProcessDefinitionResponse.ValidateAll() if the
// designated constraints aren't met.
type ProcessDefinitionResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProcessDefinitionResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProcessDefinitionResponseMultiError) AllErrors() []error { return m }

// ProcessDefinitionResponseValidationError is the validation error returned by
// ProcessDefinitionResponse.Validate if the designated constraints aren't met.
type ProcessDefinitionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProcessDefinitionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProcessDefinitionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProcessDefinitionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProcessDefinitionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProcessDefinitionResponseValidationError) ErrorName() string {
	return "ProcessDefinitionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ProcessDefinitionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProcessDefinitionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProcessDefinitionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProcessDefinitionResponseValidationError{}

// Validate checks the field values on ListProcessDefinitionsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListProcessDefinitionsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListProcessDefinitionsResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListProcessDefinitionsResponseMultiError, or nil if none found.
func (m *ListProcessDefinitionsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListProcessDefinitionsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListProcessDefinitionsResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListProcessDefinitionsResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListProcessDefinitionsResponseValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Total

	if len(errors) > 0 {
		return ListProcessDefinitionsResponseMultiError(errors)
	}

	return nil
}

// ListProcessDefinitionsResponseMultiError is an error wrapping multiple
// validation errors returned by ListProcessDefinitionsResponse.ValidateAll()
// if the designated constraints aren't met.
type ListProcessDefinitionsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListProcessDefinitionsResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListProcessDefinitionsResponseMultiError) AllErrors() []error { return m }

// ListProcessDefinitionsResponseValidationError is the validation error
// returned by ListProcessDefinitionsResponse.Validate if the designated
// constraints aren't met.
type ListProcessDefinitionsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListProcessDefinitionsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListProcessDefinitionsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListProcessDefinitionsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListProcessDefinitionsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListProcessDefinitionsResponseValidationError) ErrorName() string {
	return "ListProcessDefinitionsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListProcessDefinitionsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListProcessDefinitionsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListProcessDefinitionsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListProcessDefinitionsResponseValidationError{}

// Validate checks the field values on ProcessStatsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ProcessStatsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ProcessStatsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ProcessStatsResponseMultiError, or nil if none found.
func (m *ProcessStatsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ProcessStatsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ProcessDefId

	// no validation rules for ProcessCode

	// no validation rules for ProcessName

	// no validation rules for TotalInstances

	// no validation rules for PendingInstances

	// no validation rules for ApprovedInstances

	// no validation rules for RejectedInstances

	// no validation rules for AvgDuration

	if len(errors) > 0 {
		return ProcessStatsResponseMultiError(errors)
	}

	return nil
}

// ProcessStatsResponseMultiError is an error wrapping multiple validation
// errors returned by ProcessStatsResponse.ValidateAll() if the designated
// constraints aren't met.
type ProcessStatsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProcessStatsResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProcessStatsResponseMultiError) AllErrors() []error { return m }

// ProcessStatsResponseValidationError is the validation error returned by
// ProcessStatsResponse.Validate if the designated constraints aren't met.
type ProcessStatsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProcessStatsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProcessStatsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProcessStatsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProcessStatsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProcessStatsResponseValidationError) ErrorName() string {
	return "ProcessStatsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ProcessStatsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProcessStatsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProcessStatsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProcessStatsResponseValidationError{}

// Validate checks the field values on StartProcessRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *StartProcessRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StartProcessRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// StartProcessRequestMultiError, or nil if none found.
func (m *StartProcessRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *StartProcessRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetProcessDefId()); err != nil {
		err = StartProcessRequestValidationError{
			field:  "ProcessDefId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for FormData

	if len(errors) > 0 {
		return StartProcessRequestMultiError(errors)
	}

	return nil
}

func (m *StartProcessRequest) _validateUuid(uuid string) error {
	if matched := _approval_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// StartProcessRequestMultiError is an error wrapping multiple validation
// errors returned by StartProcessRequest.ValidateAll() if the designated
// constraints aren't met.
type StartProcessRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StartProcessRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StartProcessRequestMultiError) AllErrors() []error { return m }

// StartProcessRequestValidationError is the validation error returned by
// StartProcessRequest.Validate if the designated constraints aren't met.
type StartProcessRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StartProcessRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StartProcessRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StartProcessRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StartProcessRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StartProcessRequestValidationError) ErrorName() string {
	return "StartProcessRequestValidationError"
}

// Error satisfies the builtin error interface
func (e StartProcessRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStartProcessRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StartProcessRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StartProcessRequestValidationError{}

// Validate checks the field values on GetProcessInstanceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetProcessInstanceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetProcessInstanceRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetProcessInstanceRequestMultiError, or nil if none found.
func (m *GetProcessInstanceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetProcessInstanceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetId()); err != nil {
		err = GetProcessInstanceRequestValidationError{
			field:  "Id",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetProcessInstanceRequestMultiError(errors)
	}

	return nil
}

func (m *GetProcessInstanceRequest) _validateUuid(uuid string) error {
	if matched := _approval_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// GetProcessInstanceRequestMultiError is an error wrapping multiple validation
// errors returned by GetProcessInstanceRequest.ValidateAll() if the
// designated constraints aren't met.
type GetProcessInstanceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetProcessInstanceRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetProcessInstanceRequestMultiError) AllErrors() []error { return m }

// GetProcessInstanceRequestValidationError is the validation error returned by
// GetProcessInstanceRequest.Validate if the designated constraints aren't met.
type GetProcessInstanceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetProcessInstanceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetProcessInstanceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetProcessInstanceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetProcessInstanceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetProcessInstanceRequestValidationError) ErrorName() string {
	return "GetProcessInstanceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetProcessInstanceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetProcessInstanceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetProcessInstanceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetProcessInstanceRequestValidationError{}

// Validate checks the field values on ListMyApplicationsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListMyApplicationsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListMyApplicationsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListMyApplicationsRequestMultiError, or nil if none found.
func (m *ListMyApplicationsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListMyApplicationsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Limit

	// no validation rules for Offset

	if len(errors) > 0 {
		return ListMyApplicationsRequestMultiError(errors)
	}

	return nil
}

// ListMyApplicationsRequestMultiError is an error wrapping multiple validation
// errors returned by ListMyApplicationsRequest.ValidateAll() if the
// designated constraints aren't met.
type ListMyApplicationsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListMyApplicationsRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListMyApplicationsRequestMultiError) AllErrors() []error { return m }

// ListMyApplicationsRequestValidationError is the validation error returned by
// ListMyApplicationsRequest.Validate if the designated constraints aren't met.
type ListMyApplicationsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListMyApplicationsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListMyApplicationsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListMyApplicationsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListMyApplicationsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListMyApplicationsRequestValidationError) ErrorName() string {
	return "ListMyApplicationsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListMyApplicationsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListMyApplicationsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListMyApplicationsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListMyApplicationsRequestValidationError{}

// Validate checks the field values on WithdrawProcessRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *WithdrawProcessRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on WithdrawProcessRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// WithdrawProcessRequestMultiError, or nil if none found.
func (m *WithdrawProcessRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *WithdrawProcessRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetId()); err != nil {
		err = WithdrawProcessRequestValidationError{
			field:  "Id",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return WithdrawProcessRequestMultiError(errors)
	}

	return nil
}

func (m *WithdrawProcessRequest) _validateUuid(uuid string) error {
	if matched := _approval_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// WithdrawProcessRequestMultiError is an error wrapping multiple validation
// errors returned by WithdrawProcessRequest.ValidateAll() if the designated
// constraints aren't met.
type WithdrawProcessRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WithdrawProcessRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WithdrawProcessRequestMultiError) AllErrors() []error { return m }

// WithdrawProcessRequestValidationError is the validation error returned by
// WithdrawProcessRequest.Validate if the designated constraints aren't met.
type WithdrawProcessRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WithdrawProcessRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WithdrawProcessRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WithdrawProcessRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WithdrawProcessRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WithdrawProcessRequestValidationError) ErrorName() string {
	return "WithdrawProcessRequestValidationError"
}

// Error satisfies the builtin error interface
func (e WithdrawProcessRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWithdrawProcessRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WithdrawProcessRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WithdrawProcessRequestValidationError{}

// Validate checks the field values on CancelProcessRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CancelProcessRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CancelProcessRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CancelProcessRequestMultiError, or nil if none found.
func (m *CancelProcessRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CancelProcessRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetId()); err != nil {
		err = CancelProcessRequestValidationError{
			field:  "Id",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Reason

	if len(errors) > 0 {
		return CancelProcessRequestMultiError(errors)
	}

	return nil
}

func (m *CancelProcessRequest) _validateUuid(uuid string) error {
	if matched := _approval_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// CancelProcessRequestMultiError is an error wrapping multiple validation
// errors returned by CancelProcessRequest.ValidateAll() if the designated
// constraints aren't met.
type CancelProcessRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CancelProcessRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CancelProcessRequestMultiError) AllErrors() []error { return m }

// CancelProcessRequestValidationError is the validation error returned by
// CancelProcessRequest.Validate if the designated constraints aren't met.
type CancelProcessRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CancelProcessRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CancelProcessRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CancelProcessRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CancelProcessRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CancelProcessRequestValidationError) ErrorName() string {
	return "CancelProcessRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CancelProcessRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCancelProcessRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CancelProcessRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CancelProcessRequestValidationError{}

// Validate checks the field values on ListProcessInstancesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListProcessInstancesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListProcessInstancesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListProcessInstancesRequestMultiError, or nil if none found.
func (m *ListProcessInstancesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListProcessInstancesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ProcessDefId

	// no validation rules for Status

	// no validation rules for ApplicantId

	// no validation rules for StartDate

	// no validation rules for EndDate

	// no validation rules for Limit

	// no validation rules for Offset

	if len(errors) > 0 {
		return ListProcessInstancesRequestMultiError(errors)
	}

	return nil
}

// ListProcessInstancesRequestMultiError is an error wrapping multiple
// validation errors returned by ListProcessInstancesRequest.ValidateAll() if
// the designated constraints aren't met.
type ListProcessInstancesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListProcessInstancesRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListProcessInstancesRequestMultiError) AllErrors() []error { return m }

// ListProcessInstancesRequestValidationError is the validation error returned
// by ListProcessInstancesRequest.Validate if the designated constraints
// aren't met.
type ListProcessInstancesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListProcessInstancesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListProcessInstancesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListProcessInstancesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListProcessInstancesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListProcessInstancesRequestValidationError) ErrorName() string {
	return "ListProcessInstancesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListProcessInstancesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListProcessInstancesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListProcessInstancesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListProcessInstancesRequestValidationError{}

// Validate checks the field values on ProcessInstanceResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ProcessInstanceResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ProcessInstanceResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ProcessInstanceResponseMultiError, or nil if none found.
func (m *ProcessInstanceResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ProcessInstanceResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for TenantId

	// no validation rules for ProcessDefId

	// no validation rules for ProcessDefCode

	// no validation rules for ProcessDefName

	// no validation rules for WorkflowInstanceId

	// no validation rules for FormDataId

	// no validation rules for ApplicantId

	// no validation rules for ApplicantName

	// no validation rules for Title

	// no validation rules for Status

	// no validation rules for CurrentNodeId

	// no validation rules for CurrentNodeName

	// no validation rules for StartedAt

	// no validation rules for CompletedAt

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	if len(errors) > 0 {
		return ProcessInstanceResponseMultiError(errors)
	}

	return nil
}

// ProcessInstanceResponseMultiError is an error wrapping multiple validation
// errors returned by ProcessInstanceResponse.ValidateAll() if the designated
// constraints aren't met.
type ProcessInstanceResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProcessInstanceResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProcessInstanceResponseMultiError) AllErrors() []error { return m }

// ProcessInstanceResponseValidationError is the validation error returned by
// ProcessInstanceResponse.Validate if the designated constraints aren't met.
type ProcessInstanceResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProcessInstanceResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProcessInstanceResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProcessInstanceResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProcessInstanceResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProcessInstanceResponseValidationError) ErrorName() string {
	return "ProcessInstanceResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ProcessInstanceResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProcessInstanceResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProcessInstanceResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProcessInstanceResponseValidationError{}

// Validate checks the field values on ListProcessInstancesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListProcessInstancesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListProcessInstancesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListProcessInstancesResponseMultiError, or nil if none found.
func (m *ListProcessInstancesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListProcessInstancesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListProcessInstancesResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListProcessInstancesResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListProcessInstancesResponseValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Total

	if len(errors) > 0 {
		return ListProcessInstancesResponseMultiError(errors)
	}

	return nil
}

// ListProcessInstancesResponseMultiError is an error wrapping multiple
// validation errors returned by ListProcessInstancesResponse.ValidateAll() if
// the designated constraints aren't met.
type ListProcessInstancesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListProcessInstancesResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListProcessInstancesResponseMultiError) AllErrors() []error { return m }

// ListProcessInstancesResponseValidationError is the validation error returned
// by ListProcessInstancesResponse.Validate if the designated constraints
// aren't met.
type ListProcessInstancesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListProcessInstancesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListProcessInstancesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListProcessInstancesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListProcessInstancesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListProcessInstancesResponseValidationError) ErrorName() string {
	return "ListProcessInstancesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListProcessInstancesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListProcessInstancesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListProcessInstancesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListProcessInstancesResponseValidationError{}

// Validate checks the field values on InstanceStatsSummaryResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *InstanceStatsSummaryResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on InstanceStatsSummaryResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// InstanceStatsSummaryResponseMultiError, or nil if none found.
func (m *InstanceStatsSummaryResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *InstanceStatsSummaryResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	// no validation rules for Pending

	// no validation rules for Approved

	// no validation rules for Rejected

	// no validation rules for Withdrawn

	// no validation rules for Cancelled

	// no validation rules for ByStatus

	if len(errors) > 0 {
		return InstanceStatsSummaryResponseMultiError(errors)
	}

	return nil
}

// InstanceStatsSummaryResponseMultiError is an error wrapping multiple
// validation errors returned by InstanceStatsSummaryResponse.ValidateAll() if
// the designated constraints aren't met.
type InstanceStatsSummaryResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InstanceStatsSummaryResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InstanceStatsSummaryResponseMultiError) AllErrors() []error { return m }

// InstanceStatsSummaryResponseValidationError is the validation error returned
// by InstanceStatsSummaryResponse.Validate if the designated constraints
// aren't met.
type InstanceStatsSummaryResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InstanceStatsSummaryResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InstanceStatsSummaryResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InstanceStatsSummaryResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InstanceStatsSummaryResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InstanceStatsSummaryResponseValidationError) ErrorName() string {
	return "InstanceStatsSummaryResponseValidationError"
}

// Error satisfies the builtin error interface
func (e InstanceStatsSummaryResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInstanceStatsSummaryResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InstanceStatsSummaryResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InstanceStatsSummaryResponseValidationError{}

// Validate checks the field values on GetInstanceStatsSummaryRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetInstanceStatsSummaryRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetInstanceStatsSummaryRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetInstanceStatsSummaryRequestMultiError, or nil if none found.
func (m *GetInstanceStatsSummaryRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetInstanceStatsSummaryRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetInstanceStatsSummaryRequestMultiError(errors)
	}

	return nil
}

// GetInstanceStatsSummaryRequestMultiError is an error wrapping multiple
// validation errors returned by GetInstanceStatsSummaryRequest.ValidateAll()
// if the designated constraints aren't met.
type GetInstanceStatsSummaryRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetInstanceStatsSummaryRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetInstanceStatsSummaryRequestMultiError) AllErrors() []error { return m }

// GetInstanceStatsSummaryRequestValidationError is the validation error
// returned by GetInstanceStatsSummaryRequest.Validate if the designated
// constraints aren't met.
type GetInstanceStatsSummaryRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetInstanceStatsSummaryRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetInstanceStatsSummaryRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetInstanceStatsSummaryRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetInstanceStatsSummaryRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetInstanceStatsSummaryRequestValidationError) ErrorName() string {
	return "GetInstanceStatsSummaryRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetInstanceStatsSummaryRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetInstanceStatsSummaryRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetInstanceStatsSummaryRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetInstanceStatsSummaryRequestValidationError{}

// Validate checks the field values on GetApprovalTaskRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetApprovalTaskRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetApprovalTaskRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetApprovalTaskRequestMultiError, or nil if none found.
func (m *GetApprovalTaskRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetApprovalTaskRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetId()); err != nil {
		err = GetApprovalTaskRequestValidationError{
			field:  "Id",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetApprovalTaskRequestMultiError(errors)
	}

	return nil
}

func (m *GetApprovalTaskRequest) _validateUuid(uuid string) error {
	if matched := _approval_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// GetApprovalTaskRequestMultiError is an error wrapping multiple validation
// errors returned by GetApprovalTaskRequest.ValidateAll() if the designated
// constraints aren't met.
type GetApprovalTaskRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetApprovalTaskRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetApprovalTaskRequestMultiError) AllErrors() []error { return m }

// GetApprovalTaskRequestValidationError is the validation error returned by
// GetApprovalTaskRequest.Validate if the designated constraints aren't met.
type GetApprovalTaskRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetApprovalTaskRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetApprovalTaskRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetApprovalTaskRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetApprovalTaskRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetApprovalTaskRequestValidationError) ErrorName() string {
	return "GetApprovalTaskRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetApprovalTaskRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetApprovalTaskRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetApprovalTaskRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetApprovalTaskRequestValidationError{}

// Validate checks the field values on ListMyTasksRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListMyTasksRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListMyTasksRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListMyTasksRequestMultiError, or nil if none found.
func (m *ListMyTasksRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListMyTasksRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	// no validation rules for Limit

	// no validation rules for Offset

	if len(errors) > 0 {
		return ListMyTasksRequestMultiError(errors)
	}

	return nil
}

// ListMyTasksRequestMultiError is an error wrapping multiple validation errors
// returned by ListMyTasksRequest.ValidateAll() if the designated constraints
// aren't met.
type ListMyTasksRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListMyTasksRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListMyTasksRequestMultiError) AllErrors() []error { return m }

// ListMyTasksRequestValidationError is the validation error returned by
// ListMyTasksRequest.Validate if the designated constraints aren't met.
type ListMyTasksRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListMyTasksRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListMyTasksRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListMyTasksRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListMyTasksRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListMyTasksRequestValidationError) ErrorName() string {
	return "ListMyTasksRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListMyTasksRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListMyTasksRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListMyTasksRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListMyTasksRequestValidationError{}

// Validate checks the field values on CountPendingTasksRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CountPendingTasksRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CountPendingTasksRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CountPendingTasksRequestMultiError, or nil if none found.
func (m *CountPendingTasksRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CountPendingTasksRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CountPendingTasksRequestMultiError(errors)
	}

	return nil
}

// CountPendingTasksRequestMultiError is an error wrapping multiple validation
// errors returned by CountPendingTasksRequest.ValidateAll() if the designated
// constraints aren't met.
type CountPendingTasksRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CountPendingTasksRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CountPendingTasksRequestMultiError) AllErrors() []error { return m }

// CountPendingTasksRequestValidationError is the validation error returned by
// CountPendingTasksRequest.Validate if the designated constraints aren't met.
type CountPendingTasksRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CountPendingTasksRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CountPendingTasksRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CountPendingTasksRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CountPendingTasksRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CountPendingTasksRequestValidationError) ErrorName() string {
	return "CountPendingTasksRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CountPendingTasksRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCountPendingTasksRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CountPendingTasksRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CountPendingTasksRequestValidationError{}

// Validate checks the field values on CountPendingTasksResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CountPendingTasksResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CountPendingTasksResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CountPendingTasksResponseMultiError, or nil if none found.
func (m *CountPendingTasksResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CountPendingTasksResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Count

	if len(errors) > 0 {
		return CountPendingTasksResponseMultiError(errors)
	}

	return nil
}

// CountPendingTasksResponseMultiError is an error wrapping multiple validation
// errors returned by CountPendingTasksResponse.ValidateAll() if the
// designated constraints aren't met.
type CountPendingTasksResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CountPendingTasksResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CountPendingTasksResponseMultiError) AllErrors() []error { return m }

// CountPendingTasksResponseValidationError is the validation error returned by
// CountPendingTasksResponse.Validate if the designated constraints aren't met.
type CountPendingTasksResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CountPendingTasksResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CountPendingTasksResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CountPendingTasksResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CountPendingTasksResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CountPendingTasksResponseValidationError) ErrorName() string {
	return "CountPendingTasksResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CountPendingTasksResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCountPendingTasksResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CountPendingTasksResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CountPendingTasksResponseValidationError{}

// Validate checks the field values on ProcessTaskRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ProcessTaskRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ProcessTaskRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ProcessTaskRequestMultiError, or nil if none found.
func (m *ProcessTaskRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ProcessTaskRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetId()); err != nil {
		err = ProcessTaskRequestValidationError{
			field:  "Id",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := _ProcessTaskRequest_Action_InLookup[m.GetAction()]; !ok {
		err := ProcessTaskRequestValidationError{
			field:  "Action",
			reason: "value must be in list [approve reject transfer]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Comment

	if len(errors) > 0 {
		return ProcessTaskRequestMultiError(errors)
	}

	return nil
}

func (m *ProcessTaskRequest) _validateUuid(uuid string) error {
	if matched := _approval_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// ProcessTaskRequestMultiError is an error wrapping multiple validation errors
// returned by ProcessTaskRequest.ValidateAll() if the designated constraints
// aren't met.
type ProcessTaskRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProcessTaskRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProcessTaskRequestMultiError) AllErrors() []error { return m }

// ProcessTaskRequestValidationError is the validation error returned by
// ProcessTaskRequest.Validate if the designated constraints aren't met.
type ProcessTaskRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProcessTaskRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProcessTaskRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProcessTaskRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProcessTaskRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProcessTaskRequestValidationError) ErrorName() string {
	return "ProcessTaskRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ProcessTaskRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProcessTaskRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProcessTaskRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProcessTaskRequestValidationError{}

var _ProcessTaskRequest_Action_InLookup = map[string]struct{}{
	"approve":  {},
	"reject":   {},
	"transfer": {},
}

// Validate checks the field values on BatchProcessTasksRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *BatchProcessTasksRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BatchProcessTasksRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BatchProcessTasksRequestMultiError, or nil if none found.
func (m *BatchProcessTasksRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *BatchProcessTasksRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if _, ok := _BatchProcessTasksRequest_Action_InLookup[m.GetAction()]; !ok {
		err := BatchProcessTasksRequestValidationError{
			field:  "Action",
			reason: "value must be in list [approve reject]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Comment

	if len(errors) > 0 {
		return BatchProcessTasksRequestMultiError(errors)
	}

	return nil
}

// BatchProcessTasksRequestMultiError is an error wrapping multiple validation
// errors returned by BatchProcessTasksRequest.ValidateAll() if the designated
// constraints aren't met.
type BatchProcessTasksRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BatchProcessTasksRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BatchProcessTasksRequestMultiError) AllErrors() []error { return m }

// BatchProcessTasksRequestValidationError is the validation error returned by
// BatchProcessTasksRequest.Validate if the designated constraints aren't met.
type BatchProcessTasksRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BatchProcessTasksRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BatchProcessTasksRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BatchProcessTasksRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BatchProcessTasksRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BatchProcessTasksRequestValidationError) ErrorName() string {
	return "BatchProcessTasksRequestValidationError"
}

// Error satisfies the builtin error interface
func (e BatchProcessTasksRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBatchProcessTasksRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BatchProcessTasksRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BatchProcessTasksRequestValidationError{}

var _BatchProcessTasksRequest_Action_InLookup = map[string]struct{}{
	"approve": {},
	"reject":  {},
}

// Validate checks the field values on BatchProcessTasksResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *BatchProcessTasksResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BatchProcessTasksResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BatchProcessTasksResponseMultiError, or nil if none found.
func (m *BatchProcessTasksResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *BatchProcessTasksResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetResults() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, BatchProcessTasksResponseValidationError{
						field:  fmt.Sprintf("Results[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, BatchProcessTasksResponseValidationError{
						field:  fmt.Sprintf("Results[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return BatchProcessTasksResponseValidationError{
					field:  fmt.Sprintf("Results[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return BatchProcessTasksResponseMultiError(errors)
	}

	return nil
}

// BatchProcessTasksResponseMultiError is an error wrapping multiple validation
// errors returned by BatchProcessTasksResponse.ValidateAll() if the
// designated constraints aren't met.
type BatchProcessTasksResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BatchProcessTasksResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BatchProcessTasksResponseMultiError) AllErrors() []error { return m }

// BatchProcessTasksResponseValidationError is the validation error returned by
// BatchProcessTasksResponse.Validate if the designated constraints aren't met.
type BatchProcessTasksResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BatchProcessTasksResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BatchProcessTasksResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BatchProcessTasksResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BatchProcessTasksResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BatchProcessTasksResponseValidationError) ErrorName() string {
	return "BatchProcessTasksResponseValidationError"
}

// Error satisfies the builtin error interface
func (e BatchProcessTasksResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBatchProcessTasksResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BatchProcessTasksResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BatchProcessTasksResponseValidationError{}

// Validate checks the field values on BatchProcessResult with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *BatchProcessResult) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BatchProcessResult with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BatchProcessResultMultiError, or nil if none found.
func (m *BatchProcessResult) ValidateAll() error {
	return m.validate(true)
}

func (m *BatchProcessResult) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TaskId

	// no validation rules for Success

	// no validation rules for Error

	if len(errors) > 0 {
		return BatchProcessResultMultiError(errors)
	}

	return nil
}

// BatchProcessResultMultiError is an error wrapping multiple validation errors
// returned by BatchProcessResult.ValidateAll() if the designated constraints
// aren't met.
type BatchProcessResultMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BatchProcessResultMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BatchProcessResultMultiError) AllErrors() []error { return m }

// BatchProcessResultValidationError is the validation error returned by
// BatchProcessResult.Validate if the designated constraints aren't met.
type BatchProcessResultValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BatchProcessResultValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BatchProcessResultValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BatchProcessResultValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BatchProcessResultValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BatchProcessResultValidationError) ErrorName() string {
	return "BatchProcessResultValidationError"
}

// Error satisfies the builtin error interface
func (e BatchProcessResultValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBatchProcessResult.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BatchProcessResultValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BatchProcessResultValidationError{}

// Validate checks the field values on TransferTaskRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TransferTaskRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TransferTaskRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TransferTaskRequestMultiError, or nil if none found.
func (m *TransferTaskRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *TransferTaskRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetId()); err != nil {
		err = TransferTaskRequestValidationError{
			field:  "Id",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if err := m._validateUuid(m.GetTransferToId()); err != nil {
		err = TransferTaskRequestValidationError{
			field:  "TransferToId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Comment

	if len(errors) > 0 {
		return TransferTaskRequestMultiError(errors)
	}

	return nil
}

func (m *TransferTaskRequest) _validateUuid(uuid string) error {
	if matched := _approval_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// TransferTaskRequestMultiError is an error wrapping multiple validation
// errors returned by TransferTaskRequest.ValidateAll() if the designated
// constraints aren't met.
type TransferTaskRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TransferTaskRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TransferTaskRequestMultiError) AllErrors() []error { return m }

// TransferTaskRequestValidationError is the validation error returned by
// TransferTaskRequest.Validate if the designated constraints aren't met.
type TransferTaskRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TransferTaskRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TransferTaskRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TransferTaskRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TransferTaskRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TransferTaskRequestValidationError) ErrorName() string {
	return "TransferTaskRequestValidationError"
}

// Error satisfies the builtin error interface
func (e TransferTaskRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTransferTaskRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TransferTaskRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TransferTaskRequestValidationError{}

// Validate checks the field values on DelegateTaskRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DelegateTaskRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DelegateTaskRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DelegateTaskRequestMultiError, or nil if none found.
func (m *DelegateTaskRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DelegateTaskRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetId()); err != nil {
		err = DelegateTaskRequestValidationError{
			field:  "Id",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if err := m._validateUuid(m.GetDelegateToId()); err != nil {
		err = DelegateTaskRequestValidationError{
			field:  "DelegateToId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Comment

	if len(errors) > 0 {
		return DelegateTaskRequestMultiError(errors)
	}

	return nil
}

func (m *DelegateTaskRequest) _validateUuid(uuid string) error {
	if matched := _approval_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// DelegateTaskRequestMultiError is an error wrapping multiple validation
// errors returned by DelegateTaskRequest.ValidateAll() if the designated
// constraints aren't met.
type DelegateTaskRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DelegateTaskRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DelegateTaskRequestMultiError) AllErrors() []error { return m }

// DelegateTaskRequestValidationError is the validation error returned by
// DelegateTaskRequest.Validate if the designated constraints aren't met.
type DelegateTaskRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DelegateTaskRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DelegateTaskRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DelegateTaskRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DelegateTaskRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DelegateTaskRequestValidationError) ErrorName() string {
	return "DelegateTaskRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DelegateTaskRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDelegateTaskRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DelegateTaskRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DelegateTaskRequestValidationError{}

// Validate checks the field values on ApprovalTaskResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ApprovalTaskResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ApprovalTaskResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ApprovalTaskResponseMultiError, or nil if none found.
func (m *ApprovalTaskResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ApprovalTaskResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for TenantId

	// no validation rules for ProcessInstanceId

	// no validation rules for NodeId

	// no validation rules for NodeName

	// no validation rules for AssigneeId

	// no validation rules for AssigneeName

	// no validation rules for Status

	// no validation rules for Action

	// no validation rules for Comment

	// no validation rules for ApprovedAt

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	if len(errors) > 0 {
		return ApprovalTaskResponseMultiError(errors)
	}

	return nil
}

// ApprovalTaskResponseMultiError is an error wrapping multiple validation
// errors returned by ApprovalTaskResponse.ValidateAll() if the designated
// constraints aren't met.
type ApprovalTaskResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ApprovalTaskResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ApprovalTaskResponseMultiError) AllErrors() []error { return m }

// ApprovalTaskResponseValidationError is the validation error returned by
// ApprovalTaskResponse.Validate if the designated constraints aren't met.
type ApprovalTaskResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ApprovalTaskResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ApprovalTaskResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ApprovalTaskResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ApprovalTaskResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ApprovalTaskResponseValidationError) ErrorName() string {
	return "ApprovalTaskResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ApprovalTaskResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sApprovalTaskResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ApprovalTaskResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ApprovalTaskResponseValidationError{}

// Validate checks the field values on ListApprovalTasksResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListApprovalTasksResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListApprovalTasksResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListApprovalTasksResponseMultiError, or nil if none found.
func (m *ListApprovalTasksResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListApprovalTasksResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListApprovalTasksResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListApprovalTasksResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListApprovalTasksResponseValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Total

	if len(errors) > 0 {
		return ListApprovalTasksResponseMultiError(errors)
	}

	return nil
}

// ListApprovalTasksResponseMultiError is an error wrapping multiple validation
// errors returned by ListApprovalTasksResponse.ValidateAll() if the
// designated constraints aren't met.
type ListApprovalTasksResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListApprovalTasksResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListApprovalTasksResponseMultiError) AllErrors() []error { return m }

// ListApprovalTasksResponseValidationError is the validation error returned by
// ListApprovalTasksResponse.Validate if the designated constraints aren't met.
type ListApprovalTasksResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListApprovalTasksResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListApprovalTasksResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListApprovalTasksResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListApprovalTasksResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListApprovalTasksResponseValidationError) ErrorName() string {
	return "ListApprovalTasksResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListApprovalTasksResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListApprovalTasksResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListApprovalTasksResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListApprovalTasksResponseValidationError{}
