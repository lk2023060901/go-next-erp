// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.9.0
// - protoc             (unknown)
// source: api/hrm/v1/leave.proto

package hrmv1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationLeaveTypeServiceCreateLeaveType = "/api.hrm.v1.LeaveTypeService/CreateLeaveType"
const OperationLeaveTypeServiceDeleteLeaveType = "/api.hrm.v1.LeaveTypeService/DeleteLeaveType"
const OperationLeaveTypeServiceGetLeaveType = "/api.hrm.v1.LeaveTypeService/GetLeaveType"
const OperationLeaveTypeServiceListActiveLeaveTypes = "/api.hrm.v1.LeaveTypeService/ListActiveLeaveTypes"
const OperationLeaveTypeServiceListLeaveTypes = "/api.hrm.v1.LeaveTypeService/ListLeaveTypes"
const OperationLeaveTypeServiceUpdateLeaveType = "/api.hrm.v1.LeaveTypeService/UpdateLeaveType"

type LeaveTypeServiceHTTPServer interface {
	// CreateLeaveType 创建请假类型
	CreateLeaveType(context.Context, *CreateLeaveTypeRequest) (*LeaveTypeResponse, error)
	// DeleteLeaveType 删除请假类型
	DeleteLeaveType(context.Context, *DeleteLeaveTypeRequest) (*DeleteLeaveTypeResponse, error)
	// GetLeaveType 获取请假类型详情
	GetLeaveType(context.Context, *GetLeaveTypeRequest) (*LeaveTypeResponse, error)
	// ListActiveLeaveTypes 获取启用的请假类型
	ListActiveLeaveTypes(context.Context, *ListActiveLeaveTypesRequest) (*ListActiveLeaveTypesResponse, error)
	// ListLeaveTypes 列表查询请假类型
	ListLeaveTypes(context.Context, *ListLeaveTypesRequest) (*ListLeaveTypesResponse, error)
	// UpdateLeaveType 更新请假类型
	UpdateLeaveType(context.Context, *UpdateLeaveTypeRequest) (*LeaveTypeResponse, error)
}

func RegisterLeaveTypeServiceHTTPServer(s *http.Server, srv LeaveTypeServiceHTTPServer) {
	r := s.Route("/")
	r.POST("/api/v1/hrm/leave-types", _LeaveTypeService_CreateLeaveType0_HTTP_Handler(srv))
	r.PUT("/api/v1/hrm/leave-types/{id}", _LeaveTypeService_UpdateLeaveType0_HTTP_Handler(srv))
	r.DELETE("/api/v1/hrm/leave-types/{id}", _LeaveTypeService_DeleteLeaveType0_HTTP_Handler(srv))
	r.GET("/api/v1/hrm/leave-types/{id}", _LeaveTypeService_GetLeaveType0_HTTP_Handler(srv))
	r.GET("/api/v1/hrm/leave-types", _LeaveTypeService_ListLeaveTypes0_HTTP_Handler(srv))
	r.GET("/api/v1/hrm/leave-types/active", _LeaveTypeService_ListActiveLeaveTypes0_HTTP_Handler(srv))
}

func _LeaveTypeService_CreateLeaveType0_HTTP_Handler(srv LeaveTypeServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateLeaveTypeRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationLeaveTypeServiceCreateLeaveType)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateLeaveType(ctx, req.(*CreateLeaveTypeRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*LeaveTypeResponse)
		return ctx.Result(200, reply)
	}
}

func _LeaveTypeService_UpdateLeaveType0_HTTP_Handler(srv LeaveTypeServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateLeaveTypeRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationLeaveTypeServiceUpdateLeaveType)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateLeaveType(ctx, req.(*UpdateLeaveTypeRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*LeaveTypeResponse)
		return ctx.Result(200, reply)
	}
}

func _LeaveTypeService_DeleteLeaveType0_HTTP_Handler(srv LeaveTypeServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteLeaveTypeRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationLeaveTypeServiceDeleteLeaveType)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteLeaveType(ctx, req.(*DeleteLeaveTypeRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteLeaveTypeResponse)
		return ctx.Result(200, reply)
	}
}

func _LeaveTypeService_GetLeaveType0_HTTP_Handler(srv LeaveTypeServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetLeaveTypeRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationLeaveTypeServiceGetLeaveType)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetLeaveType(ctx, req.(*GetLeaveTypeRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*LeaveTypeResponse)
		return ctx.Result(200, reply)
	}
}

func _LeaveTypeService_ListLeaveTypes0_HTTP_Handler(srv LeaveTypeServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListLeaveTypesRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationLeaveTypeServiceListLeaveTypes)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListLeaveTypes(ctx, req.(*ListLeaveTypesRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListLeaveTypesResponse)
		return ctx.Result(200, reply)
	}
}

func _LeaveTypeService_ListActiveLeaveTypes0_HTTP_Handler(srv LeaveTypeServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListActiveLeaveTypesRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationLeaveTypeServiceListActiveLeaveTypes)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListActiveLeaveTypes(ctx, req.(*ListActiveLeaveTypesRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListActiveLeaveTypesResponse)
		return ctx.Result(200, reply)
	}
}

type LeaveTypeServiceHTTPClient interface {
	// CreateLeaveType 创建请假类型
	CreateLeaveType(ctx context.Context, req *CreateLeaveTypeRequest, opts ...http.CallOption) (rsp *LeaveTypeResponse, err error)
	// DeleteLeaveType 删除请假类型
	DeleteLeaveType(ctx context.Context, req *DeleteLeaveTypeRequest, opts ...http.CallOption) (rsp *DeleteLeaveTypeResponse, err error)
	// GetLeaveType 获取请假类型详情
	GetLeaveType(ctx context.Context, req *GetLeaveTypeRequest, opts ...http.CallOption) (rsp *LeaveTypeResponse, err error)
	// ListActiveLeaveTypes 获取启用的请假类型
	ListActiveLeaveTypes(ctx context.Context, req *ListActiveLeaveTypesRequest, opts ...http.CallOption) (rsp *ListActiveLeaveTypesResponse, err error)
	// ListLeaveTypes 列表查询请假类型
	ListLeaveTypes(ctx context.Context, req *ListLeaveTypesRequest, opts ...http.CallOption) (rsp *ListLeaveTypesResponse, err error)
	// UpdateLeaveType 更新请假类型
	UpdateLeaveType(ctx context.Context, req *UpdateLeaveTypeRequest, opts ...http.CallOption) (rsp *LeaveTypeResponse, err error)
}

type LeaveTypeServiceHTTPClientImpl struct {
	cc *http.Client
}

func NewLeaveTypeServiceHTTPClient(client *http.Client) LeaveTypeServiceHTTPClient {
	return &LeaveTypeServiceHTTPClientImpl{client}
}

// CreateLeaveType 创建请假类型
func (c *LeaveTypeServiceHTTPClientImpl) CreateLeaveType(ctx context.Context, in *CreateLeaveTypeRequest, opts ...http.CallOption) (*LeaveTypeResponse, error) {
	var out LeaveTypeResponse
	pattern := "/api/v1/hrm/leave-types"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationLeaveTypeServiceCreateLeaveType))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

// DeleteLeaveType 删除请假类型
func (c *LeaveTypeServiceHTTPClientImpl) DeleteLeaveType(ctx context.Context, in *DeleteLeaveTypeRequest, opts ...http.CallOption) (*DeleteLeaveTypeResponse, error) {
	var out DeleteLeaveTypeResponse
	pattern := "/api/v1/hrm/leave-types/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationLeaveTypeServiceDeleteLeaveType))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

// GetLeaveType 获取请假类型详情
func (c *LeaveTypeServiceHTTPClientImpl) GetLeaveType(ctx context.Context, in *GetLeaveTypeRequest, opts ...http.CallOption) (*LeaveTypeResponse, error) {
	var out LeaveTypeResponse
	pattern := "/api/v1/hrm/leave-types/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationLeaveTypeServiceGetLeaveType))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

// ListActiveLeaveTypes 获取启用的请假类型
func (c *LeaveTypeServiceHTTPClientImpl) ListActiveLeaveTypes(ctx context.Context, in *ListActiveLeaveTypesRequest, opts ...http.CallOption) (*ListActiveLeaveTypesResponse, error) {
	var out ListActiveLeaveTypesResponse
	pattern := "/api/v1/hrm/leave-types/active"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationLeaveTypeServiceListActiveLeaveTypes))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

// ListLeaveTypes 列表查询请假类型
func (c *LeaveTypeServiceHTTPClientImpl) ListLeaveTypes(ctx context.Context, in *ListLeaveTypesRequest, opts ...http.CallOption) (*ListLeaveTypesResponse, error) {
	var out ListLeaveTypesResponse
	pattern := "/api/v1/hrm/leave-types"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationLeaveTypeServiceListLeaveTypes))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

// UpdateLeaveType 更新请假类型
func (c *LeaveTypeServiceHTTPClientImpl) UpdateLeaveType(ctx context.Context, in *UpdateLeaveTypeRequest, opts ...http.CallOption) (*LeaveTypeResponse, error) {
	var out LeaveTypeResponse
	pattern := "/api/v1/hrm/leave-types/{id}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationLeaveTypeServiceUpdateLeaveType))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

const OperationLeaveRequestServiceApproveLeaveRequest = "/api.hrm.v1.LeaveRequestService/ApproveLeaveRequest"
const OperationLeaveRequestServiceCancelLeaveRequest = "/api.hrm.v1.LeaveRequestService/CancelLeaveRequest"
const OperationLeaveRequestServiceCreateLeaveRequest = "/api.hrm.v1.LeaveRequestService/CreateLeaveRequest"
const OperationLeaveRequestServiceGetLeaveRequest = "/api.hrm.v1.LeaveRequestService/GetLeaveRequest"
const OperationLeaveRequestServiceListLeaveRequests = "/api.hrm.v1.LeaveRequestService/ListLeaveRequests"
const OperationLeaveRequestServiceListMyLeaveRequests = "/api.hrm.v1.LeaveRequestService/ListMyLeaveRequests"
const OperationLeaveRequestServiceListPendingApprovals = "/api.hrm.v1.LeaveRequestService/ListPendingApprovals"
const OperationLeaveRequestServiceRejectLeaveRequest = "/api.hrm.v1.LeaveRequestService/RejectLeaveRequest"
const OperationLeaveRequestServiceSubmitLeaveRequest = "/api.hrm.v1.LeaveRequestService/SubmitLeaveRequest"
const OperationLeaveRequestServiceUpdateLeaveRequest = "/api.hrm.v1.LeaveRequestService/UpdateLeaveRequest"
const OperationLeaveRequestServiceWithdrawLeaveRequest = "/api.hrm.v1.LeaveRequestService/WithdrawLeaveRequest"

type LeaveRequestServiceHTTPServer interface {
	// ApproveLeaveRequest 批准请假
	ApproveLeaveRequest(context.Context, *ApproveLeaveRequestRequest) (*ApproveLeaveRequestResponse, error)
	// CancelLeaveRequest 取消请假
	CancelLeaveRequest(context.Context, *CancelLeaveRequestRequest) (*CancelLeaveRequestResponse, error)
	// CreateLeaveRequest 创建请假申请
	CreateLeaveRequest(context.Context, *CreateLeaveRequestRequest) (*LeaveRequestResponse, error)
	// GetLeaveRequest 获取请假详情
	GetLeaveRequest(context.Context, *GetLeaveRequestRequest) (*LeaveRequestDetailResponse, error)
	// ListLeaveRequests 查询请假记录（管理员）
	ListLeaveRequests(context.Context, *ListLeaveRequestsRequest) (*ListLeaveRequestsResponse, error)
	// ListMyLeaveRequests 查询我的请假记录
	ListMyLeaveRequests(context.Context, *ListMyLeaveRequestsRequest) (*ListLeaveRequestsResponse, error)
	// ListPendingApprovals 查询待我审批的请假
	ListPendingApprovals(context.Context, *ListPendingApprovalsRequest) (*ListLeaveRequestsResponse, error)
	// RejectLeaveRequest 拒绝请假
	RejectLeaveRequest(context.Context, *RejectLeaveRequestRequest) (*RejectLeaveRequestResponse, error)
	// SubmitLeaveRequest 提交请假申请
	SubmitLeaveRequest(context.Context, *SubmitLeaveRequestRequest) (*SubmitLeaveRequestResponse, error)
	// UpdateLeaveRequest 更新请假申请
	UpdateLeaveRequest(context.Context, *UpdateLeaveRequestRequest) (*LeaveRequestResponse, error)
	// WithdrawLeaveRequest 撤回请假申请
	WithdrawLeaveRequest(context.Context, *WithdrawLeaveRequestRequest) (*WithdrawLeaveRequestResponse, error)
}

func RegisterLeaveRequestServiceHTTPServer(s *http.Server, srv LeaveRequestServiceHTTPServer) {
	r := s.Route("/")
	r.POST("/api/v1/hrm/leave-requests", _LeaveRequestService_CreateLeaveRequest0_HTTP_Handler(srv))
	r.PUT("/api/v1/hrm/leave-requests/{id}", _LeaveRequestService_UpdateLeaveRequest0_HTTP_Handler(srv))
	r.POST("/api/v1/hrm/leave-requests/{request_id}/submit", _LeaveRequestService_SubmitLeaveRequest0_HTTP_Handler(srv))
	r.POST("/api/v1/hrm/leave-requests/{request_id}/withdraw", _LeaveRequestService_WithdrawLeaveRequest0_HTTP_Handler(srv))
	r.POST("/api/v1/hrm/leave-requests/{request_id}/cancel", _LeaveRequestService_CancelLeaveRequest0_HTTP_Handler(srv))
	r.GET("/api/v1/hrm/leave-requests/{request_id}", _LeaveRequestService_GetLeaveRequest0_HTTP_Handler(srv))
	r.GET("/api/v1/hrm/leave-requests/my", _LeaveRequestService_ListMyLeaveRequests0_HTTP_Handler(srv))
	r.GET("/api/v1/hrm/leave-requests", _LeaveRequestService_ListLeaveRequests0_HTTP_Handler(srv))
	r.GET("/api/v1/hrm/leave-requests/pending-approvals", _LeaveRequestService_ListPendingApprovals0_HTTP_Handler(srv))
	r.POST("/api/v1/hrm/leave-requests/{request_id}/approve", _LeaveRequestService_ApproveLeaveRequest0_HTTP_Handler(srv))
	r.POST("/api/v1/hrm/leave-requests/{request_id}/reject", _LeaveRequestService_RejectLeaveRequest0_HTTP_Handler(srv))
}

func _LeaveRequestService_CreateLeaveRequest0_HTTP_Handler(srv LeaveRequestServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateLeaveRequestRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationLeaveRequestServiceCreateLeaveRequest)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateLeaveRequest(ctx, req.(*CreateLeaveRequestRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*LeaveRequestResponse)
		return ctx.Result(200, reply)
	}
}

func _LeaveRequestService_UpdateLeaveRequest0_HTTP_Handler(srv LeaveRequestServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateLeaveRequestRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationLeaveRequestServiceUpdateLeaveRequest)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateLeaveRequest(ctx, req.(*UpdateLeaveRequestRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*LeaveRequestResponse)
		return ctx.Result(200, reply)
	}
}

func _LeaveRequestService_SubmitLeaveRequest0_HTTP_Handler(srv LeaveRequestServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SubmitLeaveRequestRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationLeaveRequestServiceSubmitLeaveRequest)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SubmitLeaveRequest(ctx, req.(*SubmitLeaveRequestRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SubmitLeaveRequestResponse)
		return ctx.Result(200, reply)
	}
}

func _LeaveRequestService_WithdrawLeaveRequest0_HTTP_Handler(srv LeaveRequestServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in WithdrawLeaveRequestRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationLeaveRequestServiceWithdrawLeaveRequest)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.WithdrawLeaveRequest(ctx, req.(*WithdrawLeaveRequestRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*WithdrawLeaveRequestResponse)
		return ctx.Result(200, reply)
	}
}

func _LeaveRequestService_CancelLeaveRequest0_HTTP_Handler(srv LeaveRequestServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CancelLeaveRequestRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationLeaveRequestServiceCancelLeaveRequest)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CancelLeaveRequest(ctx, req.(*CancelLeaveRequestRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CancelLeaveRequestResponse)
		return ctx.Result(200, reply)
	}
}

func _LeaveRequestService_GetLeaveRequest0_HTTP_Handler(srv LeaveRequestServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetLeaveRequestRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationLeaveRequestServiceGetLeaveRequest)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetLeaveRequest(ctx, req.(*GetLeaveRequestRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*LeaveRequestDetailResponse)
		return ctx.Result(200, reply)
	}
}

func _LeaveRequestService_ListMyLeaveRequests0_HTTP_Handler(srv LeaveRequestServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListMyLeaveRequestsRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationLeaveRequestServiceListMyLeaveRequests)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListMyLeaveRequests(ctx, req.(*ListMyLeaveRequestsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListLeaveRequestsResponse)
		return ctx.Result(200, reply)
	}
}

func _LeaveRequestService_ListLeaveRequests0_HTTP_Handler(srv LeaveRequestServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListLeaveRequestsRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationLeaveRequestServiceListLeaveRequests)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListLeaveRequests(ctx, req.(*ListLeaveRequestsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListLeaveRequestsResponse)
		return ctx.Result(200, reply)
	}
}

func _LeaveRequestService_ListPendingApprovals0_HTTP_Handler(srv LeaveRequestServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListPendingApprovalsRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationLeaveRequestServiceListPendingApprovals)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListPendingApprovals(ctx, req.(*ListPendingApprovalsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListLeaveRequestsResponse)
		return ctx.Result(200, reply)
	}
}

func _LeaveRequestService_ApproveLeaveRequest0_HTTP_Handler(srv LeaveRequestServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ApproveLeaveRequestRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationLeaveRequestServiceApproveLeaveRequest)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ApproveLeaveRequest(ctx, req.(*ApproveLeaveRequestRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ApproveLeaveRequestResponse)
		return ctx.Result(200, reply)
	}
}

func _LeaveRequestService_RejectLeaveRequest0_HTTP_Handler(srv LeaveRequestServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in RejectLeaveRequestRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationLeaveRequestServiceRejectLeaveRequest)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.RejectLeaveRequest(ctx, req.(*RejectLeaveRequestRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*RejectLeaveRequestResponse)
		return ctx.Result(200, reply)
	}
}

type LeaveRequestServiceHTTPClient interface {
	// ApproveLeaveRequest 批准请假
	ApproveLeaveRequest(ctx context.Context, req *ApproveLeaveRequestRequest, opts ...http.CallOption) (rsp *ApproveLeaveRequestResponse, err error)
	// CancelLeaveRequest 取消请假
	CancelLeaveRequest(ctx context.Context, req *CancelLeaveRequestRequest, opts ...http.CallOption) (rsp *CancelLeaveRequestResponse, err error)
	// CreateLeaveRequest 创建请假申请
	CreateLeaveRequest(ctx context.Context, req *CreateLeaveRequestRequest, opts ...http.CallOption) (rsp *LeaveRequestResponse, err error)
	// GetLeaveRequest 获取请假详情
	GetLeaveRequest(ctx context.Context, req *GetLeaveRequestRequest, opts ...http.CallOption) (rsp *LeaveRequestDetailResponse, err error)
	// ListLeaveRequests 查询请假记录（管理员）
	ListLeaveRequests(ctx context.Context, req *ListLeaveRequestsRequest, opts ...http.CallOption) (rsp *ListLeaveRequestsResponse, err error)
	// ListMyLeaveRequests 查询我的请假记录
	ListMyLeaveRequests(ctx context.Context, req *ListMyLeaveRequestsRequest, opts ...http.CallOption) (rsp *ListLeaveRequestsResponse, err error)
	// ListPendingApprovals 查询待我审批的请假
	ListPendingApprovals(ctx context.Context, req *ListPendingApprovalsRequest, opts ...http.CallOption) (rsp *ListLeaveRequestsResponse, err error)
	// RejectLeaveRequest 拒绝请假
	RejectLeaveRequest(ctx context.Context, req *RejectLeaveRequestRequest, opts ...http.CallOption) (rsp *RejectLeaveRequestResponse, err error)
	// SubmitLeaveRequest 提交请假申请
	SubmitLeaveRequest(ctx context.Context, req *SubmitLeaveRequestRequest, opts ...http.CallOption) (rsp *SubmitLeaveRequestResponse, err error)
	// UpdateLeaveRequest 更新请假申请
	UpdateLeaveRequest(ctx context.Context, req *UpdateLeaveRequestRequest, opts ...http.CallOption) (rsp *LeaveRequestResponse, err error)
	// WithdrawLeaveRequest 撤回请假申请
	WithdrawLeaveRequest(ctx context.Context, req *WithdrawLeaveRequestRequest, opts ...http.CallOption) (rsp *WithdrawLeaveRequestResponse, err error)
}

type LeaveRequestServiceHTTPClientImpl struct {
	cc *http.Client
}

func NewLeaveRequestServiceHTTPClient(client *http.Client) LeaveRequestServiceHTTPClient {
	return &LeaveRequestServiceHTTPClientImpl{client}
}

// ApproveLeaveRequest 批准请假
func (c *LeaveRequestServiceHTTPClientImpl) ApproveLeaveRequest(ctx context.Context, in *ApproveLeaveRequestRequest, opts ...http.CallOption) (*ApproveLeaveRequestResponse, error) {
	var out ApproveLeaveRequestResponse
	pattern := "/api/v1/hrm/leave-requests/{request_id}/approve"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationLeaveRequestServiceApproveLeaveRequest))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

// CancelLeaveRequest 取消请假
func (c *LeaveRequestServiceHTTPClientImpl) CancelLeaveRequest(ctx context.Context, in *CancelLeaveRequestRequest, opts ...http.CallOption) (*CancelLeaveRequestResponse, error) {
	var out CancelLeaveRequestResponse
	pattern := "/api/v1/hrm/leave-requests/{request_id}/cancel"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationLeaveRequestServiceCancelLeaveRequest))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

// CreateLeaveRequest 创建请假申请
func (c *LeaveRequestServiceHTTPClientImpl) CreateLeaveRequest(ctx context.Context, in *CreateLeaveRequestRequest, opts ...http.CallOption) (*LeaveRequestResponse, error) {
	var out LeaveRequestResponse
	pattern := "/api/v1/hrm/leave-requests"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationLeaveRequestServiceCreateLeaveRequest))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

// GetLeaveRequest 获取请假详情
func (c *LeaveRequestServiceHTTPClientImpl) GetLeaveRequest(ctx context.Context, in *GetLeaveRequestRequest, opts ...http.CallOption) (*LeaveRequestDetailResponse, error) {
	var out LeaveRequestDetailResponse
	pattern := "/api/v1/hrm/leave-requests/{request_id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationLeaveRequestServiceGetLeaveRequest))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

// ListLeaveRequests 查询请假记录（管理员）
func (c *LeaveRequestServiceHTTPClientImpl) ListLeaveRequests(ctx context.Context, in *ListLeaveRequestsRequest, opts ...http.CallOption) (*ListLeaveRequestsResponse, error) {
	var out ListLeaveRequestsResponse
	pattern := "/api/v1/hrm/leave-requests"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationLeaveRequestServiceListLeaveRequests))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

// ListMyLeaveRequests 查询我的请假记录
func (c *LeaveRequestServiceHTTPClientImpl) ListMyLeaveRequests(ctx context.Context, in *ListMyLeaveRequestsRequest, opts ...http.CallOption) (*ListLeaveRequestsResponse, error) {
	var out ListLeaveRequestsResponse
	pattern := "/api/v1/hrm/leave-requests/my"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationLeaveRequestServiceListMyLeaveRequests))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

// ListPendingApprovals 查询待我审批的请假
func (c *LeaveRequestServiceHTTPClientImpl) ListPendingApprovals(ctx context.Context, in *ListPendingApprovalsRequest, opts ...http.CallOption) (*ListLeaveRequestsResponse, error) {
	var out ListLeaveRequestsResponse
	pattern := "/api/v1/hrm/leave-requests/pending-approvals"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationLeaveRequestServiceListPendingApprovals))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

// RejectLeaveRequest 拒绝请假
func (c *LeaveRequestServiceHTTPClientImpl) RejectLeaveRequest(ctx context.Context, in *RejectLeaveRequestRequest, opts ...http.CallOption) (*RejectLeaveRequestResponse, error) {
	var out RejectLeaveRequestResponse
	pattern := "/api/v1/hrm/leave-requests/{request_id}/reject"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationLeaveRequestServiceRejectLeaveRequest))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

// SubmitLeaveRequest 提交请假申请
func (c *LeaveRequestServiceHTTPClientImpl) SubmitLeaveRequest(ctx context.Context, in *SubmitLeaveRequestRequest, opts ...http.CallOption) (*SubmitLeaveRequestResponse, error) {
	var out SubmitLeaveRequestResponse
	pattern := "/api/v1/hrm/leave-requests/{request_id}/submit"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationLeaveRequestServiceSubmitLeaveRequest))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

// UpdateLeaveRequest 更新请假申请
func (c *LeaveRequestServiceHTTPClientImpl) UpdateLeaveRequest(ctx context.Context, in *UpdateLeaveRequestRequest, opts ...http.CallOption) (*LeaveRequestResponse, error) {
	var out LeaveRequestResponse
	pattern := "/api/v1/hrm/leave-requests/{id}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationLeaveRequestServiceUpdateLeaveRequest))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

// WithdrawLeaveRequest 撤回请假申请
func (c *LeaveRequestServiceHTTPClientImpl) WithdrawLeaveRequest(ctx context.Context, in *WithdrawLeaveRequestRequest, opts ...http.CallOption) (*WithdrawLeaveRequestResponse, error) {
	var out WithdrawLeaveRequestResponse
	pattern := "/api/v1/hrm/leave-requests/{request_id}/withdraw"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationLeaveRequestServiceWithdrawLeaveRequest))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

const OperationLeaveQuotaServiceGetEmployeeQuotas = "/api.hrm.v1.LeaveQuotaService/GetEmployeeQuotas"
const OperationLeaveQuotaServiceInitEmployeeQuota = "/api.hrm.v1.LeaveQuotaService/InitEmployeeQuota"
const OperationLeaveQuotaServiceUpdateQuota = "/api.hrm.v1.LeaveQuotaService/UpdateQuota"

type LeaveQuotaServiceHTTPServer interface {
	// GetEmployeeQuotas 获取员工额度
	GetEmployeeQuotas(context.Context, *GetEmployeeQuotasRequest) (*GetEmployeeQuotasResponse, error)
	// InitEmployeeQuota 初始化员工额度
	InitEmployeeQuota(context.Context, *InitEmployeeQuotaRequest) (*InitEmployeeQuotaResponse, error)
	// UpdateQuota 更新额度
	UpdateQuota(context.Context, *UpdateQuotaRequest) (*QuotaResponse, error)
}

func RegisterLeaveQuotaServiceHTTPServer(s *http.Server, srv LeaveQuotaServiceHTTPServer) {
	r := s.Route("/")
	r.POST("/api/v1/hrm/leave-quotas/init", _LeaveQuotaService_InitEmployeeQuota0_HTTP_Handler(srv))
	r.PUT("/api/v1/hrm/leave-quotas/{id}", _LeaveQuotaService_UpdateQuota0_HTTP_Handler(srv))
	r.GET("/api/v1/hrm/employees/{employee_id}/leave-quotas", _LeaveQuotaService_GetEmployeeQuotas0_HTTP_Handler(srv))
}

func _LeaveQuotaService_InitEmployeeQuota0_HTTP_Handler(srv LeaveQuotaServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in InitEmployeeQuotaRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationLeaveQuotaServiceInitEmployeeQuota)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.InitEmployeeQuota(ctx, req.(*InitEmployeeQuotaRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*InitEmployeeQuotaResponse)
		return ctx.Result(200, reply)
	}
}

func _LeaveQuotaService_UpdateQuota0_HTTP_Handler(srv LeaveQuotaServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateQuotaRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationLeaveQuotaServiceUpdateQuota)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateQuota(ctx, req.(*UpdateQuotaRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*QuotaResponse)
		return ctx.Result(200, reply)
	}
}

func _LeaveQuotaService_GetEmployeeQuotas0_HTTP_Handler(srv LeaveQuotaServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetEmployeeQuotasRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationLeaveQuotaServiceGetEmployeeQuotas)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetEmployeeQuotas(ctx, req.(*GetEmployeeQuotasRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetEmployeeQuotasResponse)
		return ctx.Result(200, reply)
	}
}

type LeaveQuotaServiceHTTPClient interface {
	// GetEmployeeQuotas 获取员工额度
	GetEmployeeQuotas(ctx context.Context, req *GetEmployeeQuotasRequest, opts ...http.CallOption) (rsp *GetEmployeeQuotasResponse, err error)
	// InitEmployeeQuota 初始化员工额度
	InitEmployeeQuota(ctx context.Context, req *InitEmployeeQuotaRequest, opts ...http.CallOption) (rsp *InitEmployeeQuotaResponse, err error)
	// UpdateQuota 更新额度
	UpdateQuota(ctx context.Context, req *UpdateQuotaRequest, opts ...http.CallOption) (rsp *QuotaResponse, err error)
}

type LeaveQuotaServiceHTTPClientImpl struct {
	cc *http.Client
}

func NewLeaveQuotaServiceHTTPClient(client *http.Client) LeaveQuotaServiceHTTPClient {
	return &LeaveQuotaServiceHTTPClientImpl{client}
}

// GetEmployeeQuotas 获取员工额度
func (c *LeaveQuotaServiceHTTPClientImpl) GetEmployeeQuotas(ctx context.Context, in *GetEmployeeQuotasRequest, opts ...http.CallOption) (*GetEmployeeQuotasResponse, error) {
	var out GetEmployeeQuotasResponse
	pattern := "/api/v1/hrm/employees/{employee_id}/leave-quotas"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationLeaveQuotaServiceGetEmployeeQuotas))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

// InitEmployeeQuota 初始化员工额度
func (c *LeaveQuotaServiceHTTPClientImpl) InitEmployeeQuota(ctx context.Context, in *InitEmployeeQuotaRequest, opts ...http.CallOption) (*InitEmployeeQuotaResponse, error) {
	var out InitEmployeeQuotaResponse
	pattern := "/api/v1/hrm/leave-quotas/init"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationLeaveQuotaServiceInitEmployeeQuota))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

// UpdateQuota 更新额度
func (c *LeaveQuotaServiceHTTPClientImpl) UpdateQuota(ctx context.Context, in *UpdateQuotaRequest, opts ...http.CallOption) (*QuotaResponse, error) {
	var out QuotaResponse
	pattern := "/api/v1/hrm/leave-quotas/{id}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationLeaveQuotaServiceUpdateQuota))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
