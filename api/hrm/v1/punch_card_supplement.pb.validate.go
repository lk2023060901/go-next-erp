// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/hrm/v1/punch_card_supplement.proto

package hrmv1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CreatePunchCardSupplementRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *CreatePunchCardSupplementRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreatePunchCardSupplementRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CreatePunchCardSupplementRequestMultiError, or nil if none found.
func (m *CreatePunchCardSupplementRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreatePunchCardSupplementRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TenantId

	// no validation rules for EmployeeId

	// no validation rules for EmployeeName

	// no validation rules for DepartmentId

	if all {
		switch v := interface{}(m.GetSupplementDate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreatePunchCardSupplementRequestValidationError{
					field:  "SupplementDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreatePunchCardSupplementRequestValidationError{
					field:  "SupplementDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSupplementDate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreatePunchCardSupplementRequestValidationError{
				field:  "SupplementDate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for SupplementType

	if all {
		switch v := interface{}(m.GetSupplementTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreatePunchCardSupplementRequestValidationError{
					field:  "SupplementTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreatePunchCardSupplementRequestValidationError{
					field:  "SupplementTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSupplementTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreatePunchCardSupplementRequestValidationError{
				field:  "SupplementTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for MissingType

	// no validation rules for Reason

	for idx, item := range m.GetEvidence() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CreatePunchCardSupplementRequestValidationError{
						field:  fmt.Sprintf("Evidence[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CreatePunchCardSupplementRequestValidationError{
						field:  fmt.Sprintf("Evidence[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreatePunchCardSupplementRequestValidationError{
					field:  fmt.Sprintf("Evidence[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Remark

	if len(errors) > 0 {
		return CreatePunchCardSupplementRequestMultiError(errors)
	}

	return nil
}

// CreatePunchCardSupplementRequestMultiError is an error wrapping multiple
// validation errors returned by
// CreatePunchCardSupplementRequest.ValidateAll() if the designated
// constraints aren't met.
type CreatePunchCardSupplementRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreatePunchCardSupplementRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreatePunchCardSupplementRequestMultiError) AllErrors() []error { return m }

// CreatePunchCardSupplementRequestValidationError is the validation error
// returned by CreatePunchCardSupplementRequest.Validate if the designated
// constraints aren't met.
type CreatePunchCardSupplementRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreatePunchCardSupplementRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreatePunchCardSupplementRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreatePunchCardSupplementRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreatePunchCardSupplementRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreatePunchCardSupplementRequestValidationError) ErrorName() string {
	return "CreatePunchCardSupplementRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreatePunchCardSupplementRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreatePunchCardSupplementRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreatePunchCardSupplementRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreatePunchCardSupplementRequestValidationError{}

// Validate checks the field values on UpdatePunchCardSupplementRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *UpdatePunchCardSupplementRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdatePunchCardSupplementRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// UpdatePunchCardSupplementRequestMultiError, or nil if none found.
func (m *UpdatePunchCardSupplementRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdatePunchCardSupplementRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if all {
		switch v := interface{}(m.GetSupplementDate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdatePunchCardSupplementRequestValidationError{
					field:  "SupplementDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdatePunchCardSupplementRequestValidationError{
					field:  "SupplementDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSupplementDate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdatePunchCardSupplementRequestValidationError{
				field:  "SupplementDate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for SupplementType

	if all {
		switch v := interface{}(m.GetSupplementTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdatePunchCardSupplementRequestValidationError{
					field:  "SupplementTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdatePunchCardSupplementRequestValidationError{
					field:  "SupplementTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSupplementTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdatePunchCardSupplementRequestValidationError{
				field:  "SupplementTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for MissingType

	// no validation rules for Reason

	for idx, item := range m.GetEvidence() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UpdatePunchCardSupplementRequestValidationError{
						field:  fmt.Sprintf("Evidence[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UpdatePunchCardSupplementRequestValidationError{
						field:  fmt.Sprintf("Evidence[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UpdatePunchCardSupplementRequestValidationError{
					field:  fmt.Sprintf("Evidence[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Remark

	if len(errors) > 0 {
		return UpdatePunchCardSupplementRequestMultiError(errors)
	}

	return nil
}

// UpdatePunchCardSupplementRequestMultiError is an error wrapping multiple
// validation errors returned by
// UpdatePunchCardSupplementRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdatePunchCardSupplementRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdatePunchCardSupplementRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdatePunchCardSupplementRequestMultiError) AllErrors() []error { return m }

// UpdatePunchCardSupplementRequestValidationError is the validation error
// returned by UpdatePunchCardSupplementRequest.Validate if the designated
// constraints aren't met.
type UpdatePunchCardSupplementRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdatePunchCardSupplementRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdatePunchCardSupplementRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdatePunchCardSupplementRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdatePunchCardSupplementRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdatePunchCardSupplementRequestValidationError) ErrorName() string {
	return "UpdatePunchCardSupplementRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdatePunchCardSupplementRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdatePunchCardSupplementRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdatePunchCardSupplementRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdatePunchCardSupplementRequestValidationError{}

// Validate checks the field values on DeletePunchCardSupplementRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *DeletePunchCardSupplementRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeletePunchCardSupplementRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// DeletePunchCardSupplementRequestMultiError, or nil if none found.
func (m *DeletePunchCardSupplementRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeletePunchCardSupplementRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DeletePunchCardSupplementRequestMultiError(errors)
	}

	return nil
}

// DeletePunchCardSupplementRequestMultiError is an error wrapping multiple
// validation errors returned by
// DeletePunchCardSupplementRequest.ValidateAll() if the designated
// constraints aren't met.
type DeletePunchCardSupplementRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeletePunchCardSupplementRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeletePunchCardSupplementRequestMultiError) AllErrors() []error { return m }

// DeletePunchCardSupplementRequestValidationError is the validation error
// returned by DeletePunchCardSupplementRequest.Validate if the designated
// constraints aren't met.
type DeletePunchCardSupplementRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeletePunchCardSupplementRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeletePunchCardSupplementRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeletePunchCardSupplementRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeletePunchCardSupplementRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeletePunchCardSupplementRequestValidationError) ErrorName() string {
	return "DeletePunchCardSupplementRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeletePunchCardSupplementRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeletePunchCardSupplementRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeletePunchCardSupplementRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeletePunchCardSupplementRequestValidationError{}

// Validate checks the field values on DeletePunchCardSupplementResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *DeletePunchCardSupplementResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeletePunchCardSupplementResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// DeletePunchCardSupplementResponseMultiError, or nil if none found.
func (m *DeletePunchCardSupplementResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeletePunchCardSupplementResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	// no validation rules for Message

	if len(errors) > 0 {
		return DeletePunchCardSupplementResponseMultiError(errors)
	}

	return nil
}

// DeletePunchCardSupplementResponseMultiError is an error wrapping multiple
// validation errors returned by
// DeletePunchCardSupplementResponse.ValidateAll() if the designated
// constraints aren't met.
type DeletePunchCardSupplementResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeletePunchCardSupplementResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeletePunchCardSupplementResponseMultiError) AllErrors() []error { return m }

// DeletePunchCardSupplementResponseValidationError is the validation error
// returned by DeletePunchCardSupplementResponse.Validate if the designated
// constraints aren't met.
type DeletePunchCardSupplementResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeletePunchCardSupplementResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeletePunchCardSupplementResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeletePunchCardSupplementResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeletePunchCardSupplementResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeletePunchCardSupplementResponseValidationError) ErrorName() string {
	return "DeletePunchCardSupplementResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeletePunchCardSupplementResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeletePunchCardSupplementResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeletePunchCardSupplementResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeletePunchCardSupplementResponseValidationError{}

// Validate checks the field values on GetPunchCardSupplementRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetPunchCardSupplementRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPunchCardSupplementRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetPunchCardSupplementRequestMultiError, or nil if none found.
func (m *GetPunchCardSupplementRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPunchCardSupplementRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetPunchCardSupplementRequestMultiError(errors)
	}

	return nil
}

// GetPunchCardSupplementRequestMultiError is an error wrapping multiple
// validation errors returned by GetPunchCardSupplementRequest.ValidateAll()
// if the designated constraints aren't met.
type GetPunchCardSupplementRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPunchCardSupplementRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPunchCardSupplementRequestMultiError) AllErrors() []error { return m }

// GetPunchCardSupplementRequestValidationError is the validation error
// returned by GetPunchCardSupplementRequest.Validate if the designated
// constraints aren't met.
type GetPunchCardSupplementRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPunchCardSupplementRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPunchCardSupplementRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPunchCardSupplementRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPunchCardSupplementRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPunchCardSupplementRequestValidationError) ErrorName() string {
	return "GetPunchCardSupplementRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetPunchCardSupplementRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPunchCardSupplementRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPunchCardSupplementRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPunchCardSupplementRequestValidationError{}

// Validate checks the field values on ListPunchCardSupplementsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListPunchCardSupplementsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListPunchCardSupplementsRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListPunchCardSupplementsRequestMultiError, or nil if none found.
func (m *ListPunchCardSupplementsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListPunchCardSupplementsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TenantId

	// no validation rules for Page

	// no validation rules for PageSize

	// no validation rules for EmployeeId

	// no validation rules for DepartmentId

	// no validation rules for SupplementType

	// no validation rules for MissingType

	// no validation rules for ApprovalStatus

	// no validation rules for ProcessStatus

	if all {
		switch v := interface{}(m.GetStartDate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListPunchCardSupplementsRequestValidationError{
					field:  "StartDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListPunchCardSupplementsRequestValidationError{
					field:  "StartDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStartDate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListPunchCardSupplementsRequestValidationError{
				field:  "StartDate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetEndDate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListPunchCardSupplementsRequestValidationError{
					field:  "EndDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListPunchCardSupplementsRequestValidationError{
					field:  "EndDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEndDate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListPunchCardSupplementsRequestValidationError{
				field:  "EndDate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Keyword

	if len(errors) > 0 {
		return ListPunchCardSupplementsRequestMultiError(errors)
	}

	return nil
}

// ListPunchCardSupplementsRequestMultiError is an error wrapping multiple
// validation errors returned by ListPunchCardSupplementsRequest.ValidateAll()
// if the designated constraints aren't met.
type ListPunchCardSupplementsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListPunchCardSupplementsRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListPunchCardSupplementsRequestMultiError) AllErrors() []error { return m }

// ListPunchCardSupplementsRequestValidationError is the validation error
// returned by ListPunchCardSupplementsRequest.Validate if the designated
// constraints aren't met.
type ListPunchCardSupplementsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListPunchCardSupplementsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListPunchCardSupplementsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListPunchCardSupplementsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListPunchCardSupplementsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListPunchCardSupplementsRequestValidationError) ErrorName() string {
	return "ListPunchCardSupplementsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListPunchCardSupplementsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListPunchCardSupplementsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListPunchCardSupplementsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListPunchCardSupplementsRequestValidationError{}

// Validate checks the field values on ListPunchCardSupplementsResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ListPunchCardSupplementsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListPunchCardSupplementsResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListPunchCardSupplementsResponseMultiError, or nil if none found.
func (m *ListPunchCardSupplementsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListPunchCardSupplementsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListPunchCardSupplementsResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListPunchCardSupplementsResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListPunchCardSupplementsResponseValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Total

	// no validation rules for Page

	// no validation rules for PageSize

	if len(errors) > 0 {
		return ListPunchCardSupplementsResponseMultiError(errors)
	}

	return nil
}

// ListPunchCardSupplementsResponseMultiError is an error wrapping multiple
// validation errors returned by
// ListPunchCardSupplementsResponse.ValidateAll() if the designated
// constraints aren't met.
type ListPunchCardSupplementsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListPunchCardSupplementsResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListPunchCardSupplementsResponseMultiError) AllErrors() []error { return m }

// ListPunchCardSupplementsResponseValidationError is the validation error
// returned by ListPunchCardSupplementsResponse.Validate if the designated
// constraints aren't met.
type ListPunchCardSupplementsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListPunchCardSupplementsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListPunchCardSupplementsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListPunchCardSupplementsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListPunchCardSupplementsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListPunchCardSupplementsResponseValidationError) ErrorName() string {
	return "ListPunchCardSupplementsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListPunchCardSupplementsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListPunchCardSupplementsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListPunchCardSupplementsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListPunchCardSupplementsResponseValidationError{}

// Validate checks the field values on ListEmployeePunchCardSupplementsRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *ListEmployeePunchCardSupplementsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// ListEmployeePunchCardSupplementsRequest with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// ListEmployeePunchCardSupplementsRequestMultiError, or nil if none found.
func (m *ListEmployeePunchCardSupplementsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListEmployeePunchCardSupplementsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TenantId

	// no validation rules for EmployeeId

	// no validation rules for Year

	// no validation rules for Page

	// no validation rules for PageSize

	if len(errors) > 0 {
		return ListEmployeePunchCardSupplementsRequestMultiError(errors)
	}

	return nil
}

// ListEmployeePunchCardSupplementsRequestMultiError is an error wrapping
// multiple validation errors returned by
// ListEmployeePunchCardSupplementsRequest.ValidateAll() if the designated
// constraints aren't met.
type ListEmployeePunchCardSupplementsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListEmployeePunchCardSupplementsRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListEmployeePunchCardSupplementsRequestMultiError) AllErrors() []error { return m }

// ListEmployeePunchCardSupplementsRequestValidationError is the validation
// error returned by ListEmployeePunchCardSupplementsRequest.Validate if the
// designated constraints aren't met.
type ListEmployeePunchCardSupplementsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListEmployeePunchCardSupplementsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListEmployeePunchCardSupplementsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListEmployeePunchCardSupplementsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListEmployeePunchCardSupplementsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListEmployeePunchCardSupplementsRequestValidationError) ErrorName() string {
	return "ListEmployeePunchCardSupplementsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListEmployeePunchCardSupplementsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListEmployeePunchCardSupplementsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListEmployeePunchCardSupplementsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListEmployeePunchCardSupplementsRequestValidationError{}

// Validate checks the field values on ListPendingPunchCardSupplementsRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *ListPendingPunchCardSupplementsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// ListPendingPunchCardSupplementsRequest with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// ListPendingPunchCardSupplementsRequestMultiError, or nil if none found.
func (m *ListPendingPunchCardSupplementsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListPendingPunchCardSupplementsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TenantId

	// no validation rules for Page

	// no validation rules for PageSize

	if len(errors) > 0 {
		return ListPendingPunchCardSupplementsRequestMultiError(errors)
	}

	return nil
}

// ListPendingPunchCardSupplementsRequestMultiError is an error wrapping
// multiple validation errors returned by
// ListPendingPunchCardSupplementsRequest.ValidateAll() if the designated
// constraints aren't met.
type ListPendingPunchCardSupplementsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListPendingPunchCardSupplementsRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListPendingPunchCardSupplementsRequestMultiError) AllErrors() []error { return m }

// ListPendingPunchCardSupplementsRequestValidationError is the validation
// error returned by ListPendingPunchCardSupplementsRequest.Validate if the
// designated constraints aren't met.
type ListPendingPunchCardSupplementsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListPendingPunchCardSupplementsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListPendingPunchCardSupplementsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListPendingPunchCardSupplementsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListPendingPunchCardSupplementsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListPendingPunchCardSupplementsRequestValidationError) ErrorName() string {
	return "ListPendingPunchCardSupplementsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListPendingPunchCardSupplementsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListPendingPunchCardSupplementsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListPendingPunchCardSupplementsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListPendingPunchCardSupplementsRequestValidationError{}

// Validate checks the field values on SubmitPunchCardSupplementRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *SubmitPunchCardSupplementRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SubmitPunchCardSupplementRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// SubmitPunchCardSupplementRequestMultiError, or nil if none found.
func (m *SubmitPunchCardSupplementRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SubmitPunchCardSupplementRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for SupplementId

	// no validation rules for SubmitterId

	if len(errors) > 0 {
		return SubmitPunchCardSupplementRequestMultiError(errors)
	}

	return nil
}

// SubmitPunchCardSupplementRequestMultiError is an error wrapping multiple
// validation errors returned by
// SubmitPunchCardSupplementRequest.ValidateAll() if the designated
// constraints aren't met.
type SubmitPunchCardSupplementRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SubmitPunchCardSupplementRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SubmitPunchCardSupplementRequestMultiError) AllErrors() []error { return m }

// SubmitPunchCardSupplementRequestValidationError is the validation error
// returned by SubmitPunchCardSupplementRequest.Validate if the designated
// constraints aren't met.
type SubmitPunchCardSupplementRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SubmitPunchCardSupplementRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SubmitPunchCardSupplementRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SubmitPunchCardSupplementRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SubmitPunchCardSupplementRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SubmitPunchCardSupplementRequestValidationError) ErrorName() string {
	return "SubmitPunchCardSupplementRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SubmitPunchCardSupplementRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSubmitPunchCardSupplementRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SubmitPunchCardSupplementRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SubmitPunchCardSupplementRequestValidationError{}

// Validate checks the field values on SubmitPunchCardSupplementResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *SubmitPunchCardSupplementResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SubmitPunchCardSupplementResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// SubmitPunchCardSupplementResponseMultiError, or nil if none found.
func (m *SubmitPunchCardSupplementResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SubmitPunchCardSupplementResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	// no validation rules for Message

	if len(errors) > 0 {
		return SubmitPunchCardSupplementResponseMultiError(errors)
	}

	return nil
}

// SubmitPunchCardSupplementResponseMultiError is an error wrapping multiple
// validation errors returned by
// SubmitPunchCardSupplementResponse.ValidateAll() if the designated
// constraints aren't met.
type SubmitPunchCardSupplementResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SubmitPunchCardSupplementResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SubmitPunchCardSupplementResponseMultiError) AllErrors() []error { return m }

// SubmitPunchCardSupplementResponseValidationError is the validation error
// returned by SubmitPunchCardSupplementResponse.Validate if the designated
// constraints aren't met.
type SubmitPunchCardSupplementResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SubmitPunchCardSupplementResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SubmitPunchCardSupplementResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SubmitPunchCardSupplementResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SubmitPunchCardSupplementResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SubmitPunchCardSupplementResponseValidationError) ErrorName() string {
	return "SubmitPunchCardSupplementResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SubmitPunchCardSupplementResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSubmitPunchCardSupplementResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SubmitPunchCardSupplementResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SubmitPunchCardSupplementResponseValidationError{}

// Validate checks the field values on ApprovePunchCardSupplementRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ApprovePunchCardSupplementRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ApprovePunchCardSupplementRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ApprovePunchCardSupplementRequestMultiError, or nil if none found.
func (m *ApprovePunchCardSupplementRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ApprovePunchCardSupplementRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for SupplementId

	// no validation rules for ApproverId

	// no validation rules for Comment

	if len(errors) > 0 {
		return ApprovePunchCardSupplementRequestMultiError(errors)
	}

	return nil
}

// ApprovePunchCardSupplementRequestMultiError is an error wrapping multiple
// validation errors returned by
// ApprovePunchCardSupplementRequest.ValidateAll() if the designated
// constraints aren't met.
type ApprovePunchCardSupplementRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ApprovePunchCardSupplementRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ApprovePunchCardSupplementRequestMultiError) AllErrors() []error { return m }

// ApprovePunchCardSupplementRequestValidationError is the validation error
// returned by ApprovePunchCardSupplementRequest.Validate if the designated
// constraints aren't met.
type ApprovePunchCardSupplementRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ApprovePunchCardSupplementRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ApprovePunchCardSupplementRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ApprovePunchCardSupplementRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ApprovePunchCardSupplementRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ApprovePunchCardSupplementRequestValidationError) ErrorName() string {
	return "ApprovePunchCardSupplementRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ApprovePunchCardSupplementRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sApprovePunchCardSupplementRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ApprovePunchCardSupplementRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ApprovePunchCardSupplementRequestValidationError{}

// Validate checks the field values on ApprovePunchCardSupplementResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ApprovePunchCardSupplementResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ApprovePunchCardSupplementResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ApprovePunchCardSupplementResponseMultiError, or nil if none found.
func (m *ApprovePunchCardSupplementResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ApprovePunchCardSupplementResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	// no validation rules for Message

	if len(errors) > 0 {
		return ApprovePunchCardSupplementResponseMultiError(errors)
	}

	return nil
}

// ApprovePunchCardSupplementResponseMultiError is an error wrapping multiple
// validation errors returned by
// ApprovePunchCardSupplementResponse.ValidateAll() if the designated
// constraints aren't met.
type ApprovePunchCardSupplementResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ApprovePunchCardSupplementResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ApprovePunchCardSupplementResponseMultiError) AllErrors() []error { return m }

// ApprovePunchCardSupplementResponseValidationError is the validation error
// returned by ApprovePunchCardSupplementResponse.Validate if the designated
// constraints aren't met.
type ApprovePunchCardSupplementResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ApprovePunchCardSupplementResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ApprovePunchCardSupplementResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ApprovePunchCardSupplementResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ApprovePunchCardSupplementResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ApprovePunchCardSupplementResponseValidationError) ErrorName() string {
	return "ApprovePunchCardSupplementResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ApprovePunchCardSupplementResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sApprovePunchCardSupplementResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ApprovePunchCardSupplementResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ApprovePunchCardSupplementResponseValidationError{}

// Validate checks the field values on RejectPunchCardSupplementRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *RejectPunchCardSupplementRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RejectPunchCardSupplementRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// RejectPunchCardSupplementRequestMultiError, or nil if none found.
func (m *RejectPunchCardSupplementRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RejectPunchCardSupplementRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for SupplementId

	// no validation rules for ApproverId

	// no validation rules for Reason

	if len(errors) > 0 {
		return RejectPunchCardSupplementRequestMultiError(errors)
	}

	return nil
}

// RejectPunchCardSupplementRequestMultiError is an error wrapping multiple
// validation errors returned by
// RejectPunchCardSupplementRequest.ValidateAll() if the designated
// constraints aren't met.
type RejectPunchCardSupplementRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RejectPunchCardSupplementRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RejectPunchCardSupplementRequestMultiError) AllErrors() []error { return m }

// RejectPunchCardSupplementRequestValidationError is the validation error
// returned by RejectPunchCardSupplementRequest.Validate if the designated
// constraints aren't met.
type RejectPunchCardSupplementRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RejectPunchCardSupplementRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RejectPunchCardSupplementRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RejectPunchCardSupplementRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RejectPunchCardSupplementRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RejectPunchCardSupplementRequestValidationError) ErrorName() string {
	return "RejectPunchCardSupplementRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RejectPunchCardSupplementRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRejectPunchCardSupplementRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RejectPunchCardSupplementRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RejectPunchCardSupplementRequestValidationError{}

// Validate checks the field values on RejectPunchCardSupplementResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *RejectPunchCardSupplementResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RejectPunchCardSupplementResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// RejectPunchCardSupplementResponseMultiError, or nil if none found.
func (m *RejectPunchCardSupplementResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RejectPunchCardSupplementResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	// no validation rules for Message

	if len(errors) > 0 {
		return RejectPunchCardSupplementResponseMultiError(errors)
	}

	return nil
}

// RejectPunchCardSupplementResponseMultiError is an error wrapping multiple
// validation errors returned by
// RejectPunchCardSupplementResponse.ValidateAll() if the designated
// constraints aren't met.
type RejectPunchCardSupplementResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RejectPunchCardSupplementResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RejectPunchCardSupplementResponseMultiError) AllErrors() []error { return m }

// RejectPunchCardSupplementResponseValidationError is the validation error
// returned by RejectPunchCardSupplementResponse.Validate if the designated
// constraints aren't met.
type RejectPunchCardSupplementResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RejectPunchCardSupplementResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RejectPunchCardSupplementResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RejectPunchCardSupplementResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RejectPunchCardSupplementResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RejectPunchCardSupplementResponseValidationError) ErrorName() string {
	return "RejectPunchCardSupplementResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RejectPunchCardSupplementResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRejectPunchCardSupplementResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RejectPunchCardSupplementResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RejectPunchCardSupplementResponseValidationError{}

// Validate checks the field values on ProcessPunchCardSupplementRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ProcessPunchCardSupplementRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ProcessPunchCardSupplementRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ProcessPunchCardSupplementRequestMultiError, or nil if none found.
func (m *ProcessPunchCardSupplementRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ProcessPunchCardSupplementRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for SupplementId

	// no validation rules for ProcessorId

	if len(errors) > 0 {
		return ProcessPunchCardSupplementRequestMultiError(errors)
	}

	return nil
}

// ProcessPunchCardSupplementRequestMultiError is an error wrapping multiple
// validation errors returned by
// ProcessPunchCardSupplementRequest.ValidateAll() if the designated
// constraints aren't met.
type ProcessPunchCardSupplementRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProcessPunchCardSupplementRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProcessPunchCardSupplementRequestMultiError) AllErrors() []error { return m }

// ProcessPunchCardSupplementRequestValidationError is the validation error
// returned by ProcessPunchCardSupplementRequest.Validate if the designated
// constraints aren't met.
type ProcessPunchCardSupplementRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProcessPunchCardSupplementRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProcessPunchCardSupplementRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProcessPunchCardSupplementRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProcessPunchCardSupplementRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProcessPunchCardSupplementRequestValidationError) ErrorName() string {
	return "ProcessPunchCardSupplementRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ProcessPunchCardSupplementRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProcessPunchCardSupplementRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProcessPunchCardSupplementRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProcessPunchCardSupplementRequestValidationError{}

// Validate checks the field values on ProcessPunchCardSupplementResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ProcessPunchCardSupplementResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ProcessPunchCardSupplementResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ProcessPunchCardSupplementResponseMultiError, or nil if none found.
func (m *ProcessPunchCardSupplementResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ProcessPunchCardSupplementResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	// no validation rules for Message

	if len(errors) > 0 {
		return ProcessPunchCardSupplementResponseMultiError(errors)
	}

	return nil
}

// ProcessPunchCardSupplementResponseMultiError is an error wrapping multiple
// validation errors returned by
// ProcessPunchCardSupplementResponse.ValidateAll() if the designated
// constraints aren't met.
type ProcessPunchCardSupplementResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProcessPunchCardSupplementResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProcessPunchCardSupplementResponseMultiError) AllErrors() []error { return m }

// ProcessPunchCardSupplementResponseValidationError is the validation error
// returned by ProcessPunchCardSupplementResponse.Validate if the designated
// constraints aren't met.
type ProcessPunchCardSupplementResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProcessPunchCardSupplementResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProcessPunchCardSupplementResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProcessPunchCardSupplementResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProcessPunchCardSupplementResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProcessPunchCardSupplementResponseValidationError) ErrorName() string {
	return "ProcessPunchCardSupplementResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ProcessPunchCardSupplementResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProcessPunchCardSupplementResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProcessPunchCardSupplementResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProcessPunchCardSupplementResponseValidationError{}

// Validate checks the field values on CancelPunchCardSupplementRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *CancelPunchCardSupplementRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CancelPunchCardSupplementRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CancelPunchCardSupplementRequestMultiError, or nil if none found.
func (m *CancelPunchCardSupplementRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CancelPunchCardSupplementRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for SupplementId

	if len(errors) > 0 {
		return CancelPunchCardSupplementRequestMultiError(errors)
	}

	return nil
}

// CancelPunchCardSupplementRequestMultiError is an error wrapping multiple
// validation errors returned by
// CancelPunchCardSupplementRequest.ValidateAll() if the designated
// constraints aren't met.
type CancelPunchCardSupplementRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CancelPunchCardSupplementRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CancelPunchCardSupplementRequestMultiError) AllErrors() []error { return m }

// CancelPunchCardSupplementRequestValidationError is the validation error
// returned by CancelPunchCardSupplementRequest.Validate if the designated
// constraints aren't met.
type CancelPunchCardSupplementRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CancelPunchCardSupplementRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CancelPunchCardSupplementRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CancelPunchCardSupplementRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CancelPunchCardSupplementRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CancelPunchCardSupplementRequestValidationError) ErrorName() string {
	return "CancelPunchCardSupplementRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CancelPunchCardSupplementRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCancelPunchCardSupplementRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CancelPunchCardSupplementRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CancelPunchCardSupplementRequestValidationError{}

// Validate checks the field values on CancelPunchCardSupplementResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *CancelPunchCardSupplementResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CancelPunchCardSupplementResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// CancelPunchCardSupplementResponseMultiError, or nil if none found.
func (m *CancelPunchCardSupplementResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CancelPunchCardSupplementResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	// no validation rules for Message

	if len(errors) > 0 {
		return CancelPunchCardSupplementResponseMultiError(errors)
	}

	return nil
}

// CancelPunchCardSupplementResponseMultiError is an error wrapping multiple
// validation errors returned by
// CancelPunchCardSupplementResponse.ValidateAll() if the designated
// constraints aren't met.
type CancelPunchCardSupplementResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CancelPunchCardSupplementResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CancelPunchCardSupplementResponseMultiError) AllErrors() []error { return m }

// CancelPunchCardSupplementResponseValidationError is the validation error
// returned by CancelPunchCardSupplementResponse.Validate if the designated
// constraints aren't met.
type CancelPunchCardSupplementResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CancelPunchCardSupplementResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CancelPunchCardSupplementResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CancelPunchCardSupplementResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CancelPunchCardSupplementResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CancelPunchCardSupplementResponseValidationError) ErrorName() string {
	return "CancelPunchCardSupplementResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CancelPunchCardSupplementResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCancelPunchCardSupplementResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CancelPunchCardSupplementResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CancelPunchCardSupplementResponseValidationError{}

// Validate checks the field values on PunchCardSupplementResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PunchCardSupplementResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PunchCardSupplementResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PunchCardSupplementResponseMultiError, or nil if none found.
func (m *PunchCardSupplementResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *PunchCardSupplementResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for TenantId

	// no validation rules for EmployeeId

	// no validation rules for EmployeeName

	// no validation rules for DepartmentId

	if all {
		switch v := interface{}(m.GetSupplementDate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PunchCardSupplementResponseValidationError{
					field:  "SupplementDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PunchCardSupplementResponseValidationError{
					field:  "SupplementDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSupplementDate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PunchCardSupplementResponseValidationError{
				field:  "SupplementDate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for SupplementType

	if all {
		switch v := interface{}(m.GetSupplementTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PunchCardSupplementResponseValidationError{
					field:  "SupplementTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PunchCardSupplementResponseValidationError{
					field:  "SupplementTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSupplementTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PunchCardSupplementResponseValidationError{
				field:  "SupplementTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for MissingType

	// no validation rules for Reason

	for idx, item := range m.GetEvidence() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PunchCardSupplementResponseValidationError{
						field:  fmt.Sprintf("Evidence[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PunchCardSupplementResponseValidationError{
						field:  fmt.Sprintf("Evidence[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PunchCardSupplementResponseValidationError{
					field:  fmt.Sprintf("Evidence[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for AttendanceRecordId

	// no validation rules for ApprovalId

	// no validation rules for ApprovalStatus

	// no validation rules for ApprovedBy

	if all {
		switch v := interface{}(m.GetApprovedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PunchCardSupplementResponseValidationError{
					field:  "ApprovedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PunchCardSupplementResponseValidationError{
					field:  "ApprovedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetApprovedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PunchCardSupplementResponseValidationError{
				field:  "ApprovedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for RejectReason

	// no validation rules for ProcessStatus

	if all {
		switch v := interface{}(m.GetProcessedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PunchCardSupplementResponseValidationError{
					field:  "ProcessedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PunchCardSupplementResponseValidationError{
					field:  "ProcessedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetProcessedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PunchCardSupplementResponseValidationError{
				field:  "ProcessedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for ProcessedBy

	// no validation rules for Remark

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PunchCardSupplementResponseValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PunchCardSupplementResponseValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PunchCardSupplementResponseValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PunchCardSupplementResponseValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PunchCardSupplementResponseValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PunchCardSupplementResponseValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return PunchCardSupplementResponseMultiError(errors)
	}

	return nil
}

// PunchCardSupplementResponseMultiError is an error wrapping multiple
// validation errors returned by PunchCardSupplementResponse.ValidateAll() if
// the designated constraints aren't met.
type PunchCardSupplementResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PunchCardSupplementResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PunchCardSupplementResponseMultiError) AllErrors() []error { return m }

// PunchCardSupplementResponseValidationError is the validation error returned
// by PunchCardSupplementResponse.Validate if the designated constraints
// aren't met.
type PunchCardSupplementResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PunchCardSupplementResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PunchCardSupplementResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PunchCardSupplementResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PunchCardSupplementResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PunchCardSupplementResponseValidationError) ErrorName() string {
	return "PunchCardSupplementResponseValidationError"
}

// Error satisfies the builtin error interface
func (e PunchCardSupplementResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPunchCardSupplementResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PunchCardSupplementResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PunchCardSupplementResponseValidationError{}

// Validate checks the field values on SupplementEvidence with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SupplementEvidence) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SupplementEvidence with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SupplementEvidenceMultiError, or nil if none found.
func (m *SupplementEvidence) ValidateAll() error {
	return m.validate(true)
}

func (m *SupplementEvidence) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Type

	// no validation rules for Url

	// no validation rules for Description

	if len(errors) > 0 {
		return SupplementEvidenceMultiError(errors)
	}

	return nil
}

// SupplementEvidenceMultiError is an error wrapping multiple validation errors
// returned by SupplementEvidence.ValidateAll() if the designated constraints
// aren't met.
type SupplementEvidenceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SupplementEvidenceMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SupplementEvidenceMultiError) AllErrors() []error { return m }

// SupplementEvidenceValidationError is the validation error returned by
// SupplementEvidence.Validate if the designated constraints aren't met.
type SupplementEvidenceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SupplementEvidenceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SupplementEvidenceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SupplementEvidenceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SupplementEvidenceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SupplementEvidenceValidationError) ErrorName() string {
	return "SupplementEvidenceValidationError"
}

// Error satisfies the builtin error interface
func (e SupplementEvidenceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSupplementEvidence.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SupplementEvidenceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SupplementEvidenceValidationError{}
