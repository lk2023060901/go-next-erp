// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: api/hrm/v1/overtime.proto

package hrmv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// OvertimeServiceClient is the client API for OvertimeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OvertimeServiceClient interface {
	// 创建加班申请
	CreateOvertime(ctx context.Context, in *CreateOvertimeRequest, opts ...grpc.CallOption) (*OvertimeResponse, error)
	// 更新加班申请
	UpdateOvertime(ctx context.Context, in *UpdateOvertimeRequest, opts ...grpc.CallOption) (*OvertimeResponse, error)
	// 删除加班申请
	DeleteOvertime(ctx context.Context, in *DeleteOvertimeRequest, opts ...grpc.CallOption) (*DeleteOvertimeResponse, error)
	// 获取加班详情
	GetOvertime(ctx context.Context, in *GetOvertimeRequest, opts ...grpc.CallOption) (*OvertimeResponse, error)
	// 列表查询加班记录
	ListOvertimes(ctx context.Context, in *ListOvertimesRequest, opts ...grpc.CallOption) (*ListOvertimesResponse, error)
	// 查询员工加班记录
	ListEmployeeOvertimes(ctx context.Context, in *ListEmployeeOvertimesRequest, opts ...grpc.CallOption) (*ListOvertimesResponse, error)
	// 查询待审批的加班
	ListPendingOvertimes(ctx context.Context, in *ListPendingOvertimesRequest, opts ...grpc.CallOption) (*ListOvertimesResponse, error)
	// 提交加班审批
	SubmitOvertime(ctx context.Context, in *SubmitOvertimeRequest, opts ...grpc.CallOption) (*SubmitOvertimeResponse, error)
	// 批准加班
	ApproveOvertime(ctx context.Context, in *ApproveOvertimeRequest, opts ...grpc.CallOption) (*ApproveOvertimeResponse, error)
	// 拒绝加班
	RejectOvertime(ctx context.Context, in *RejectOvertimeRequest, opts ...grpc.CallOption) (*RejectOvertimeResponse, error)
	// 统计员工加班时长
	SumOvertimeHours(ctx context.Context, in *SumOvertimeHoursRequest, opts ...grpc.CallOption) (*SumOvertimeHoursResponse, error)
	// 统计可调休天数
	GetCompOffDays(ctx context.Context, in *GetCompOffDaysRequest, opts ...grpc.CallOption) (*GetCompOffDaysResponse, error)
	// 使用调休
	UseCompOffDays(ctx context.Context, in *UseCompOffDaysRequest, opts ...grpc.CallOption) (*UseCompOffDaysResponse, error)
}

type overtimeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOvertimeServiceClient(cc grpc.ClientConnInterface) OvertimeServiceClient {
	return &overtimeServiceClient{cc}
}

func (c *overtimeServiceClient) CreateOvertime(ctx context.Context, in *CreateOvertimeRequest, opts ...grpc.CallOption) (*OvertimeResponse, error) {
	out := new(OvertimeResponse)
	err := c.cc.Invoke(ctx, "/api.hrm.v1.OvertimeService/CreateOvertime", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *overtimeServiceClient) UpdateOvertime(ctx context.Context, in *UpdateOvertimeRequest, opts ...grpc.CallOption) (*OvertimeResponse, error) {
	out := new(OvertimeResponse)
	err := c.cc.Invoke(ctx, "/api.hrm.v1.OvertimeService/UpdateOvertime", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *overtimeServiceClient) DeleteOvertime(ctx context.Context, in *DeleteOvertimeRequest, opts ...grpc.CallOption) (*DeleteOvertimeResponse, error) {
	out := new(DeleteOvertimeResponse)
	err := c.cc.Invoke(ctx, "/api.hrm.v1.OvertimeService/DeleteOvertime", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *overtimeServiceClient) GetOvertime(ctx context.Context, in *GetOvertimeRequest, opts ...grpc.CallOption) (*OvertimeResponse, error) {
	out := new(OvertimeResponse)
	err := c.cc.Invoke(ctx, "/api.hrm.v1.OvertimeService/GetOvertime", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *overtimeServiceClient) ListOvertimes(ctx context.Context, in *ListOvertimesRequest, opts ...grpc.CallOption) (*ListOvertimesResponse, error) {
	out := new(ListOvertimesResponse)
	err := c.cc.Invoke(ctx, "/api.hrm.v1.OvertimeService/ListOvertimes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *overtimeServiceClient) ListEmployeeOvertimes(ctx context.Context, in *ListEmployeeOvertimesRequest, opts ...grpc.CallOption) (*ListOvertimesResponse, error) {
	out := new(ListOvertimesResponse)
	err := c.cc.Invoke(ctx, "/api.hrm.v1.OvertimeService/ListEmployeeOvertimes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *overtimeServiceClient) ListPendingOvertimes(ctx context.Context, in *ListPendingOvertimesRequest, opts ...grpc.CallOption) (*ListOvertimesResponse, error) {
	out := new(ListOvertimesResponse)
	err := c.cc.Invoke(ctx, "/api.hrm.v1.OvertimeService/ListPendingOvertimes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *overtimeServiceClient) SubmitOvertime(ctx context.Context, in *SubmitOvertimeRequest, opts ...grpc.CallOption) (*SubmitOvertimeResponse, error) {
	out := new(SubmitOvertimeResponse)
	err := c.cc.Invoke(ctx, "/api.hrm.v1.OvertimeService/SubmitOvertime", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *overtimeServiceClient) ApproveOvertime(ctx context.Context, in *ApproveOvertimeRequest, opts ...grpc.CallOption) (*ApproveOvertimeResponse, error) {
	out := new(ApproveOvertimeResponse)
	err := c.cc.Invoke(ctx, "/api.hrm.v1.OvertimeService/ApproveOvertime", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *overtimeServiceClient) RejectOvertime(ctx context.Context, in *RejectOvertimeRequest, opts ...grpc.CallOption) (*RejectOvertimeResponse, error) {
	out := new(RejectOvertimeResponse)
	err := c.cc.Invoke(ctx, "/api.hrm.v1.OvertimeService/RejectOvertime", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *overtimeServiceClient) SumOvertimeHours(ctx context.Context, in *SumOvertimeHoursRequest, opts ...grpc.CallOption) (*SumOvertimeHoursResponse, error) {
	out := new(SumOvertimeHoursResponse)
	err := c.cc.Invoke(ctx, "/api.hrm.v1.OvertimeService/SumOvertimeHours", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *overtimeServiceClient) GetCompOffDays(ctx context.Context, in *GetCompOffDaysRequest, opts ...grpc.CallOption) (*GetCompOffDaysResponse, error) {
	out := new(GetCompOffDaysResponse)
	err := c.cc.Invoke(ctx, "/api.hrm.v1.OvertimeService/GetCompOffDays", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *overtimeServiceClient) UseCompOffDays(ctx context.Context, in *UseCompOffDaysRequest, opts ...grpc.CallOption) (*UseCompOffDaysResponse, error) {
	out := new(UseCompOffDaysResponse)
	err := c.cc.Invoke(ctx, "/api.hrm.v1.OvertimeService/UseCompOffDays", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OvertimeServiceServer is the server API for OvertimeService service.
// All implementations should embed UnimplementedOvertimeServiceServer
// for forward compatibility
type OvertimeServiceServer interface {
	// 创建加班申请
	CreateOvertime(context.Context, *CreateOvertimeRequest) (*OvertimeResponse, error)
	// 更新加班申请
	UpdateOvertime(context.Context, *UpdateOvertimeRequest) (*OvertimeResponse, error)
	// 删除加班申请
	DeleteOvertime(context.Context, *DeleteOvertimeRequest) (*DeleteOvertimeResponse, error)
	// 获取加班详情
	GetOvertime(context.Context, *GetOvertimeRequest) (*OvertimeResponse, error)
	// 列表查询加班记录
	ListOvertimes(context.Context, *ListOvertimesRequest) (*ListOvertimesResponse, error)
	// 查询员工加班记录
	ListEmployeeOvertimes(context.Context, *ListEmployeeOvertimesRequest) (*ListOvertimesResponse, error)
	// 查询待审批的加班
	ListPendingOvertimes(context.Context, *ListPendingOvertimesRequest) (*ListOvertimesResponse, error)
	// 提交加班审批
	SubmitOvertime(context.Context, *SubmitOvertimeRequest) (*SubmitOvertimeResponse, error)
	// 批准加班
	ApproveOvertime(context.Context, *ApproveOvertimeRequest) (*ApproveOvertimeResponse, error)
	// 拒绝加班
	RejectOvertime(context.Context, *RejectOvertimeRequest) (*RejectOvertimeResponse, error)
	// 统计员工加班时长
	SumOvertimeHours(context.Context, *SumOvertimeHoursRequest) (*SumOvertimeHoursResponse, error)
	// 统计可调休天数
	GetCompOffDays(context.Context, *GetCompOffDaysRequest) (*GetCompOffDaysResponse, error)
	// 使用调休
	UseCompOffDays(context.Context, *UseCompOffDaysRequest) (*UseCompOffDaysResponse, error)
}

// UnimplementedOvertimeServiceServer should be embedded to have forward compatible implementations.
type UnimplementedOvertimeServiceServer struct {
}

func (UnimplementedOvertimeServiceServer) CreateOvertime(context.Context, *CreateOvertimeRequest) (*OvertimeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOvertime not implemented")
}
func (UnimplementedOvertimeServiceServer) UpdateOvertime(context.Context, *UpdateOvertimeRequest) (*OvertimeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOvertime not implemented")
}
func (UnimplementedOvertimeServiceServer) DeleteOvertime(context.Context, *DeleteOvertimeRequest) (*DeleteOvertimeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteOvertime not implemented")
}
func (UnimplementedOvertimeServiceServer) GetOvertime(context.Context, *GetOvertimeRequest) (*OvertimeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOvertime not implemented")
}
func (UnimplementedOvertimeServiceServer) ListOvertimes(context.Context, *ListOvertimesRequest) (*ListOvertimesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOvertimes not implemented")
}
func (UnimplementedOvertimeServiceServer) ListEmployeeOvertimes(context.Context, *ListEmployeeOvertimesRequest) (*ListOvertimesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListEmployeeOvertimes not implemented")
}
func (UnimplementedOvertimeServiceServer) ListPendingOvertimes(context.Context, *ListPendingOvertimesRequest) (*ListOvertimesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPendingOvertimes not implemented")
}
func (UnimplementedOvertimeServiceServer) SubmitOvertime(context.Context, *SubmitOvertimeRequest) (*SubmitOvertimeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitOvertime not implemented")
}
func (UnimplementedOvertimeServiceServer) ApproveOvertime(context.Context, *ApproveOvertimeRequest) (*ApproveOvertimeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApproveOvertime not implemented")
}
func (UnimplementedOvertimeServiceServer) RejectOvertime(context.Context, *RejectOvertimeRequest) (*RejectOvertimeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RejectOvertime not implemented")
}
func (UnimplementedOvertimeServiceServer) SumOvertimeHours(context.Context, *SumOvertimeHoursRequest) (*SumOvertimeHoursResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SumOvertimeHours not implemented")
}
func (UnimplementedOvertimeServiceServer) GetCompOffDays(context.Context, *GetCompOffDaysRequest) (*GetCompOffDaysResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCompOffDays not implemented")
}
func (UnimplementedOvertimeServiceServer) UseCompOffDays(context.Context, *UseCompOffDaysRequest) (*UseCompOffDaysResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UseCompOffDays not implemented")
}

// UnsafeOvertimeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OvertimeServiceServer will
// result in compilation errors.
type UnsafeOvertimeServiceServer interface {
	mustEmbedUnimplementedOvertimeServiceServer()
}

func RegisterOvertimeServiceServer(s grpc.ServiceRegistrar, srv OvertimeServiceServer) {
	s.RegisterService(&OvertimeService_ServiceDesc, srv)
}

func _OvertimeService_CreateOvertime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOvertimeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OvertimeServiceServer).CreateOvertime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.hrm.v1.OvertimeService/CreateOvertime",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OvertimeServiceServer).CreateOvertime(ctx, req.(*CreateOvertimeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OvertimeService_UpdateOvertime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOvertimeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OvertimeServiceServer).UpdateOvertime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.hrm.v1.OvertimeService/UpdateOvertime",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OvertimeServiceServer).UpdateOvertime(ctx, req.(*UpdateOvertimeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OvertimeService_DeleteOvertime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteOvertimeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OvertimeServiceServer).DeleteOvertime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.hrm.v1.OvertimeService/DeleteOvertime",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OvertimeServiceServer).DeleteOvertime(ctx, req.(*DeleteOvertimeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OvertimeService_GetOvertime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOvertimeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OvertimeServiceServer).GetOvertime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.hrm.v1.OvertimeService/GetOvertime",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OvertimeServiceServer).GetOvertime(ctx, req.(*GetOvertimeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OvertimeService_ListOvertimes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListOvertimesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OvertimeServiceServer).ListOvertimes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.hrm.v1.OvertimeService/ListOvertimes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OvertimeServiceServer).ListOvertimes(ctx, req.(*ListOvertimesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OvertimeService_ListEmployeeOvertimes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListEmployeeOvertimesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OvertimeServiceServer).ListEmployeeOvertimes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.hrm.v1.OvertimeService/ListEmployeeOvertimes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OvertimeServiceServer).ListEmployeeOvertimes(ctx, req.(*ListEmployeeOvertimesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OvertimeService_ListPendingOvertimes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPendingOvertimesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OvertimeServiceServer).ListPendingOvertimes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.hrm.v1.OvertimeService/ListPendingOvertimes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OvertimeServiceServer).ListPendingOvertimes(ctx, req.(*ListPendingOvertimesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OvertimeService_SubmitOvertime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubmitOvertimeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OvertimeServiceServer).SubmitOvertime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.hrm.v1.OvertimeService/SubmitOvertime",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OvertimeServiceServer).SubmitOvertime(ctx, req.(*SubmitOvertimeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OvertimeService_ApproveOvertime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApproveOvertimeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OvertimeServiceServer).ApproveOvertime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.hrm.v1.OvertimeService/ApproveOvertime",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OvertimeServiceServer).ApproveOvertime(ctx, req.(*ApproveOvertimeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OvertimeService_RejectOvertime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RejectOvertimeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OvertimeServiceServer).RejectOvertime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.hrm.v1.OvertimeService/RejectOvertime",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OvertimeServiceServer).RejectOvertime(ctx, req.(*RejectOvertimeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OvertimeService_SumOvertimeHours_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SumOvertimeHoursRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OvertimeServiceServer).SumOvertimeHours(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.hrm.v1.OvertimeService/SumOvertimeHours",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OvertimeServiceServer).SumOvertimeHours(ctx, req.(*SumOvertimeHoursRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OvertimeService_GetCompOffDays_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCompOffDaysRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OvertimeServiceServer).GetCompOffDays(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.hrm.v1.OvertimeService/GetCompOffDays",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OvertimeServiceServer).GetCompOffDays(ctx, req.(*GetCompOffDaysRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OvertimeService_UseCompOffDays_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UseCompOffDaysRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OvertimeServiceServer).UseCompOffDays(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.hrm.v1.OvertimeService/UseCompOffDays",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OvertimeServiceServer).UseCompOffDays(ctx, req.(*UseCompOffDaysRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OvertimeService_ServiceDesc is the grpc.ServiceDesc for OvertimeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OvertimeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.hrm.v1.OvertimeService",
	HandlerType: (*OvertimeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateOvertime",
			Handler:    _OvertimeService_CreateOvertime_Handler,
		},
		{
			MethodName: "UpdateOvertime",
			Handler:    _OvertimeService_UpdateOvertime_Handler,
		},
		{
			MethodName: "DeleteOvertime",
			Handler:    _OvertimeService_DeleteOvertime_Handler,
		},
		{
			MethodName: "GetOvertime",
			Handler:    _OvertimeService_GetOvertime_Handler,
		},
		{
			MethodName: "ListOvertimes",
			Handler:    _OvertimeService_ListOvertimes_Handler,
		},
		{
			MethodName: "ListEmployeeOvertimes",
			Handler:    _OvertimeService_ListEmployeeOvertimes_Handler,
		},
		{
			MethodName: "ListPendingOvertimes",
			Handler:    _OvertimeService_ListPendingOvertimes_Handler,
		},
		{
			MethodName: "SubmitOvertime",
			Handler:    _OvertimeService_SubmitOvertime_Handler,
		},
		{
			MethodName: "ApproveOvertime",
			Handler:    _OvertimeService_ApproveOvertime_Handler,
		},
		{
			MethodName: "RejectOvertime",
			Handler:    _OvertimeService_RejectOvertime_Handler,
		},
		{
			MethodName: "SumOvertimeHours",
			Handler:    _OvertimeService_SumOvertimeHours_Handler,
		},
		{
			MethodName: "GetCompOffDays",
			Handler:    _OvertimeService_GetCompOffDays_Handler,
		},
		{
			MethodName: "UseCompOffDays",
			Handler:    _OvertimeService_UseCompOffDays_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/hrm/v1/overtime.proto",
}
