// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/hrm/v1/overtime.proto

package hrmv1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on OvertimeResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *OvertimeResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OvertimeResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// OvertimeResponseMultiError, or nil if none found.
func (m *OvertimeResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *OvertimeResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for TenantId

	// no validation rules for EmployeeId

	// no validation rules for EmployeeName

	// no validation rules for DepartmentId

	if all {
		switch v := interface{}(m.GetStartTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, OvertimeResponseValidationError{
					field:  "StartTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, OvertimeResponseValidationError{
					field:  "StartTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStartTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OvertimeResponseValidationError{
				field:  "StartTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetEndTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, OvertimeResponseValidationError{
					field:  "EndTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, OvertimeResponseValidationError{
					field:  "EndTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEndTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OvertimeResponseValidationError{
				field:  "EndTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Duration

	// no validation rules for OvertimeType

	// no validation rules for PayType

	// no validation rules for PayRate

	// no validation rules for Reason

	// no validation rules for ApprovalStatus

	// no validation rules for ApprovedBy

	if all {
		switch v := interface{}(m.GetApprovedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, OvertimeResponseValidationError{
					field:  "ApprovedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, OvertimeResponseValidationError{
					field:  "ApprovedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetApprovedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OvertimeResponseValidationError{
				field:  "ApprovedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for RejectReason

	// no validation rules for CompOffDays

	// no validation rules for CompOffUsed

	if all {
		switch v := interface{}(m.GetCompOffExpireAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, OvertimeResponseValidationError{
					field:  "CompOffExpireAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, OvertimeResponseValidationError{
					field:  "CompOffExpireAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCompOffExpireAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OvertimeResponseValidationError{
				field:  "CompOffExpireAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Remark

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, OvertimeResponseValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, OvertimeResponseValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OvertimeResponseValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, OvertimeResponseValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, OvertimeResponseValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OvertimeResponseValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return OvertimeResponseMultiError(errors)
	}

	return nil
}

// OvertimeResponseMultiError is an error wrapping multiple validation errors
// returned by OvertimeResponse.ValidateAll() if the designated constraints
// aren't met.
type OvertimeResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OvertimeResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OvertimeResponseMultiError) AllErrors() []error { return m }

// OvertimeResponseValidationError is the validation error returned by
// OvertimeResponse.Validate if the designated constraints aren't met.
type OvertimeResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OvertimeResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OvertimeResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OvertimeResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OvertimeResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OvertimeResponseValidationError) ErrorName() string { return "OvertimeResponseValidationError" }

// Error satisfies the builtin error interface
func (e OvertimeResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOvertimeResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OvertimeResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OvertimeResponseValidationError{}

// Validate checks the field values on CreateOvertimeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateOvertimeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateOvertimeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateOvertimeRequestMultiError, or nil if none found.
func (m *CreateOvertimeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateOvertimeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TenantId

	// no validation rules for EmployeeId

	// no validation rules for EmployeeName

	// no validation rules for DepartmentId

	if all {
		switch v := interface{}(m.GetStartTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateOvertimeRequestValidationError{
					field:  "StartTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateOvertimeRequestValidationError{
					field:  "StartTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStartTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateOvertimeRequestValidationError{
				field:  "StartTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetEndTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateOvertimeRequestValidationError{
					field:  "EndTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateOvertimeRequestValidationError{
					field:  "EndTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEndTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateOvertimeRequestValidationError{
				field:  "EndTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Duration

	// no validation rules for OvertimeType

	// no validation rules for PayType

	// no validation rules for Reason

	// no validation rules for Remark

	if len(errors) > 0 {
		return CreateOvertimeRequestMultiError(errors)
	}

	return nil
}

// CreateOvertimeRequestMultiError is an error wrapping multiple validation
// errors returned by CreateOvertimeRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateOvertimeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateOvertimeRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateOvertimeRequestMultiError) AllErrors() []error { return m }

// CreateOvertimeRequestValidationError is the validation error returned by
// CreateOvertimeRequest.Validate if the designated constraints aren't met.
type CreateOvertimeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateOvertimeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateOvertimeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateOvertimeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateOvertimeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateOvertimeRequestValidationError) ErrorName() string {
	return "CreateOvertimeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateOvertimeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateOvertimeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateOvertimeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateOvertimeRequestValidationError{}

// Validate checks the field values on UpdateOvertimeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateOvertimeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateOvertimeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateOvertimeRequestMultiError, or nil if none found.
func (m *UpdateOvertimeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateOvertimeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if all {
		switch v := interface{}(m.GetStartTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateOvertimeRequestValidationError{
					field:  "StartTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateOvertimeRequestValidationError{
					field:  "StartTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStartTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateOvertimeRequestValidationError{
				field:  "StartTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetEndTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateOvertimeRequestValidationError{
					field:  "EndTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateOvertimeRequestValidationError{
					field:  "EndTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEndTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateOvertimeRequestValidationError{
				field:  "EndTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Duration

	// no validation rules for OvertimeType

	// no validation rules for PayType

	// no validation rules for Reason

	// no validation rules for Remark

	if len(errors) > 0 {
		return UpdateOvertimeRequestMultiError(errors)
	}

	return nil
}

// UpdateOvertimeRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateOvertimeRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateOvertimeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateOvertimeRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateOvertimeRequestMultiError) AllErrors() []error { return m }

// UpdateOvertimeRequestValidationError is the validation error returned by
// UpdateOvertimeRequest.Validate if the designated constraints aren't met.
type UpdateOvertimeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateOvertimeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateOvertimeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateOvertimeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateOvertimeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateOvertimeRequestValidationError) ErrorName() string {
	return "UpdateOvertimeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateOvertimeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateOvertimeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateOvertimeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateOvertimeRequestValidationError{}

// Validate checks the field values on DeleteOvertimeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteOvertimeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteOvertimeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteOvertimeRequestMultiError, or nil if none found.
func (m *DeleteOvertimeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteOvertimeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DeleteOvertimeRequestMultiError(errors)
	}

	return nil
}

// DeleteOvertimeRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteOvertimeRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteOvertimeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteOvertimeRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteOvertimeRequestMultiError) AllErrors() []error { return m }

// DeleteOvertimeRequestValidationError is the validation error returned by
// DeleteOvertimeRequest.Validate if the designated constraints aren't met.
type DeleteOvertimeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteOvertimeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteOvertimeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteOvertimeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteOvertimeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteOvertimeRequestValidationError) ErrorName() string {
	return "DeleteOvertimeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteOvertimeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteOvertimeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteOvertimeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteOvertimeRequestValidationError{}

// Validate checks the field values on DeleteOvertimeResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteOvertimeResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteOvertimeResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteOvertimeResponseMultiError, or nil if none found.
func (m *DeleteOvertimeResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteOvertimeResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	// no validation rules for Message

	if len(errors) > 0 {
		return DeleteOvertimeResponseMultiError(errors)
	}

	return nil
}

// DeleteOvertimeResponseMultiError is an error wrapping multiple validation
// errors returned by DeleteOvertimeResponse.ValidateAll() if the designated
// constraints aren't met.
type DeleteOvertimeResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteOvertimeResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteOvertimeResponseMultiError) AllErrors() []error { return m }

// DeleteOvertimeResponseValidationError is the validation error returned by
// DeleteOvertimeResponse.Validate if the designated constraints aren't met.
type DeleteOvertimeResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteOvertimeResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteOvertimeResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteOvertimeResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteOvertimeResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteOvertimeResponseValidationError) ErrorName() string {
	return "DeleteOvertimeResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteOvertimeResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteOvertimeResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteOvertimeResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteOvertimeResponseValidationError{}

// Validate checks the field values on GetOvertimeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetOvertimeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetOvertimeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetOvertimeRequestMultiError, or nil if none found.
func (m *GetOvertimeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetOvertimeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetOvertimeRequestMultiError(errors)
	}

	return nil
}

// GetOvertimeRequestMultiError is an error wrapping multiple validation errors
// returned by GetOvertimeRequest.ValidateAll() if the designated constraints
// aren't met.
type GetOvertimeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetOvertimeRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetOvertimeRequestMultiError) AllErrors() []error { return m }

// GetOvertimeRequestValidationError is the validation error returned by
// GetOvertimeRequest.Validate if the designated constraints aren't met.
type GetOvertimeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOvertimeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOvertimeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOvertimeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOvertimeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOvertimeRequestValidationError) ErrorName() string {
	return "GetOvertimeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetOvertimeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOvertimeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOvertimeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOvertimeRequestValidationError{}

// Validate checks the field values on ListOvertimesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListOvertimesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListOvertimesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListOvertimesRequestMultiError, or nil if none found.
func (m *ListOvertimesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListOvertimesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TenantId

	// no validation rules for EmployeeId

	// no validation rules for DepartmentId

	// no validation rules for OvertimeType

	// no validation rules for ApprovalStatus

	if all {
		switch v := interface{}(m.GetStartDate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListOvertimesRequestValidationError{
					field:  "StartDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListOvertimesRequestValidationError{
					field:  "StartDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStartDate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListOvertimesRequestValidationError{
				field:  "StartDate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetEndDate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListOvertimesRequestValidationError{
					field:  "EndDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListOvertimesRequestValidationError{
					field:  "EndDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEndDate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListOvertimesRequestValidationError{
				field:  "EndDate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Keyword

	// no validation rules for Page

	// no validation rules for PageSize

	if len(errors) > 0 {
		return ListOvertimesRequestMultiError(errors)
	}

	return nil
}

// ListOvertimesRequestMultiError is an error wrapping multiple validation
// errors returned by ListOvertimesRequest.ValidateAll() if the designated
// constraints aren't met.
type ListOvertimesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListOvertimesRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListOvertimesRequestMultiError) AllErrors() []error { return m }

// ListOvertimesRequestValidationError is the validation error returned by
// ListOvertimesRequest.Validate if the designated constraints aren't met.
type ListOvertimesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListOvertimesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListOvertimesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListOvertimesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListOvertimesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListOvertimesRequestValidationError) ErrorName() string {
	return "ListOvertimesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListOvertimesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListOvertimesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListOvertimesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListOvertimesRequestValidationError{}

// Validate checks the field values on ListOvertimesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListOvertimesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListOvertimesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListOvertimesResponseMultiError, or nil if none found.
func (m *ListOvertimesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListOvertimesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListOvertimesResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListOvertimesResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListOvertimesResponseValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Total

	// no validation rules for Page

	// no validation rules for PageSize

	if len(errors) > 0 {
		return ListOvertimesResponseMultiError(errors)
	}

	return nil
}

// ListOvertimesResponseMultiError is an error wrapping multiple validation
// errors returned by ListOvertimesResponse.ValidateAll() if the designated
// constraints aren't met.
type ListOvertimesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListOvertimesResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListOvertimesResponseMultiError) AllErrors() []error { return m }

// ListOvertimesResponseValidationError is the validation error returned by
// ListOvertimesResponse.Validate if the designated constraints aren't met.
type ListOvertimesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListOvertimesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListOvertimesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListOvertimesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListOvertimesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListOvertimesResponseValidationError) ErrorName() string {
	return "ListOvertimesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListOvertimesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListOvertimesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListOvertimesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListOvertimesResponseValidationError{}

// Validate checks the field values on ListEmployeeOvertimesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListEmployeeOvertimesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListEmployeeOvertimesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListEmployeeOvertimesRequestMultiError, or nil if none found.
func (m *ListEmployeeOvertimesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListEmployeeOvertimesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TenantId

	// no validation rules for EmployeeId

	// no validation rules for Year

	if len(errors) > 0 {
		return ListEmployeeOvertimesRequestMultiError(errors)
	}

	return nil
}

// ListEmployeeOvertimesRequestMultiError is an error wrapping multiple
// validation errors returned by ListEmployeeOvertimesRequest.ValidateAll() if
// the designated constraints aren't met.
type ListEmployeeOvertimesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListEmployeeOvertimesRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListEmployeeOvertimesRequestMultiError) AllErrors() []error { return m }

// ListEmployeeOvertimesRequestValidationError is the validation error returned
// by ListEmployeeOvertimesRequest.Validate if the designated constraints
// aren't met.
type ListEmployeeOvertimesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListEmployeeOvertimesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListEmployeeOvertimesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListEmployeeOvertimesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListEmployeeOvertimesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListEmployeeOvertimesRequestValidationError) ErrorName() string {
	return "ListEmployeeOvertimesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListEmployeeOvertimesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListEmployeeOvertimesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListEmployeeOvertimesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListEmployeeOvertimesRequestValidationError{}

// Validate checks the field values on ListPendingOvertimesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListPendingOvertimesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListPendingOvertimesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListPendingOvertimesRequestMultiError, or nil if none found.
func (m *ListPendingOvertimesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListPendingOvertimesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TenantId

	if len(errors) > 0 {
		return ListPendingOvertimesRequestMultiError(errors)
	}

	return nil
}

// ListPendingOvertimesRequestMultiError is an error wrapping multiple
// validation errors returned by ListPendingOvertimesRequest.ValidateAll() if
// the designated constraints aren't met.
type ListPendingOvertimesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListPendingOvertimesRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListPendingOvertimesRequestMultiError) AllErrors() []error { return m }

// ListPendingOvertimesRequestValidationError is the validation error returned
// by ListPendingOvertimesRequest.Validate if the designated constraints
// aren't met.
type ListPendingOvertimesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListPendingOvertimesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListPendingOvertimesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListPendingOvertimesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListPendingOvertimesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListPendingOvertimesRequestValidationError) ErrorName() string {
	return "ListPendingOvertimesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListPendingOvertimesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListPendingOvertimesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListPendingOvertimesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListPendingOvertimesRequestValidationError{}

// Validate checks the field values on SubmitOvertimeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SubmitOvertimeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SubmitOvertimeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SubmitOvertimeRequestMultiError, or nil if none found.
func (m *SubmitOvertimeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SubmitOvertimeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OvertimeId

	// no validation rules for SubmitterId

	if len(errors) > 0 {
		return SubmitOvertimeRequestMultiError(errors)
	}

	return nil
}

// SubmitOvertimeRequestMultiError is an error wrapping multiple validation
// errors returned by SubmitOvertimeRequest.ValidateAll() if the designated
// constraints aren't met.
type SubmitOvertimeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SubmitOvertimeRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SubmitOvertimeRequestMultiError) AllErrors() []error { return m }

// SubmitOvertimeRequestValidationError is the validation error returned by
// SubmitOvertimeRequest.Validate if the designated constraints aren't met.
type SubmitOvertimeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SubmitOvertimeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SubmitOvertimeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SubmitOvertimeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SubmitOvertimeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SubmitOvertimeRequestValidationError) ErrorName() string {
	return "SubmitOvertimeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SubmitOvertimeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSubmitOvertimeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SubmitOvertimeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SubmitOvertimeRequestValidationError{}

// Validate checks the field values on SubmitOvertimeResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SubmitOvertimeResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SubmitOvertimeResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SubmitOvertimeResponseMultiError, or nil if none found.
func (m *SubmitOvertimeResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SubmitOvertimeResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	// no validation rules for Message

	if len(errors) > 0 {
		return SubmitOvertimeResponseMultiError(errors)
	}

	return nil
}

// SubmitOvertimeResponseMultiError is an error wrapping multiple validation
// errors returned by SubmitOvertimeResponse.ValidateAll() if the designated
// constraints aren't met.
type SubmitOvertimeResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SubmitOvertimeResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SubmitOvertimeResponseMultiError) AllErrors() []error { return m }

// SubmitOvertimeResponseValidationError is the validation error returned by
// SubmitOvertimeResponse.Validate if the designated constraints aren't met.
type SubmitOvertimeResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SubmitOvertimeResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SubmitOvertimeResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SubmitOvertimeResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SubmitOvertimeResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SubmitOvertimeResponseValidationError) ErrorName() string {
	return "SubmitOvertimeResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SubmitOvertimeResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSubmitOvertimeResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SubmitOvertimeResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SubmitOvertimeResponseValidationError{}

// Validate checks the field values on ApproveOvertimeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ApproveOvertimeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ApproveOvertimeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ApproveOvertimeRequestMultiError, or nil if none found.
func (m *ApproveOvertimeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ApproveOvertimeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OvertimeId

	// no validation rules for ApproverId

	if len(errors) > 0 {
		return ApproveOvertimeRequestMultiError(errors)
	}

	return nil
}

// ApproveOvertimeRequestMultiError is an error wrapping multiple validation
// errors returned by ApproveOvertimeRequest.ValidateAll() if the designated
// constraints aren't met.
type ApproveOvertimeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ApproveOvertimeRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ApproveOvertimeRequestMultiError) AllErrors() []error { return m }

// ApproveOvertimeRequestValidationError is the validation error returned by
// ApproveOvertimeRequest.Validate if the designated constraints aren't met.
type ApproveOvertimeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ApproveOvertimeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ApproveOvertimeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ApproveOvertimeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ApproveOvertimeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ApproveOvertimeRequestValidationError) ErrorName() string {
	return "ApproveOvertimeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ApproveOvertimeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sApproveOvertimeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ApproveOvertimeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ApproveOvertimeRequestValidationError{}

// Validate checks the field values on ApproveOvertimeResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ApproveOvertimeResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ApproveOvertimeResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ApproveOvertimeResponseMultiError, or nil if none found.
func (m *ApproveOvertimeResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ApproveOvertimeResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	// no validation rules for Message

	if len(errors) > 0 {
		return ApproveOvertimeResponseMultiError(errors)
	}

	return nil
}

// ApproveOvertimeResponseMultiError is an error wrapping multiple validation
// errors returned by ApproveOvertimeResponse.ValidateAll() if the designated
// constraints aren't met.
type ApproveOvertimeResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ApproveOvertimeResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ApproveOvertimeResponseMultiError) AllErrors() []error { return m }

// ApproveOvertimeResponseValidationError is the validation error returned by
// ApproveOvertimeResponse.Validate if the designated constraints aren't met.
type ApproveOvertimeResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ApproveOvertimeResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ApproveOvertimeResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ApproveOvertimeResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ApproveOvertimeResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ApproveOvertimeResponseValidationError) ErrorName() string {
	return "ApproveOvertimeResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ApproveOvertimeResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sApproveOvertimeResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ApproveOvertimeResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ApproveOvertimeResponseValidationError{}

// Validate checks the field values on RejectOvertimeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RejectOvertimeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RejectOvertimeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RejectOvertimeRequestMultiError, or nil if none found.
func (m *RejectOvertimeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RejectOvertimeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OvertimeId

	// no validation rules for ApproverId

	// no validation rules for Reason

	if len(errors) > 0 {
		return RejectOvertimeRequestMultiError(errors)
	}

	return nil
}

// RejectOvertimeRequestMultiError is an error wrapping multiple validation
// errors returned by RejectOvertimeRequest.ValidateAll() if the designated
// constraints aren't met.
type RejectOvertimeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RejectOvertimeRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RejectOvertimeRequestMultiError) AllErrors() []error { return m }

// RejectOvertimeRequestValidationError is the validation error returned by
// RejectOvertimeRequest.Validate if the designated constraints aren't met.
type RejectOvertimeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RejectOvertimeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RejectOvertimeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RejectOvertimeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RejectOvertimeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RejectOvertimeRequestValidationError) ErrorName() string {
	return "RejectOvertimeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RejectOvertimeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRejectOvertimeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RejectOvertimeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RejectOvertimeRequestValidationError{}

// Validate checks the field values on RejectOvertimeResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RejectOvertimeResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RejectOvertimeResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RejectOvertimeResponseMultiError, or nil if none found.
func (m *RejectOvertimeResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RejectOvertimeResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	// no validation rules for Message

	if len(errors) > 0 {
		return RejectOvertimeResponseMultiError(errors)
	}

	return nil
}

// RejectOvertimeResponseMultiError is an error wrapping multiple validation
// errors returned by RejectOvertimeResponse.ValidateAll() if the designated
// constraints aren't met.
type RejectOvertimeResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RejectOvertimeResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RejectOvertimeResponseMultiError) AllErrors() []error { return m }

// RejectOvertimeResponseValidationError is the validation error returned by
// RejectOvertimeResponse.Validate if the designated constraints aren't met.
type RejectOvertimeResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RejectOvertimeResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RejectOvertimeResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RejectOvertimeResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RejectOvertimeResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RejectOvertimeResponseValidationError) ErrorName() string {
	return "RejectOvertimeResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RejectOvertimeResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRejectOvertimeResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RejectOvertimeResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RejectOvertimeResponseValidationError{}

// Validate checks the field values on SumOvertimeHoursRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SumOvertimeHoursRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SumOvertimeHoursRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SumOvertimeHoursRequestMultiError, or nil if none found.
func (m *SumOvertimeHoursRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SumOvertimeHoursRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TenantId

	// no validation rules for EmployeeId

	if all {
		switch v := interface{}(m.GetStartDate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SumOvertimeHoursRequestValidationError{
					field:  "StartDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SumOvertimeHoursRequestValidationError{
					field:  "StartDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStartDate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SumOvertimeHoursRequestValidationError{
				field:  "StartDate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetEndDate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SumOvertimeHoursRequestValidationError{
					field:  "EndDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SumOvertimeHoursRequestValidationError{
					field:  "EndDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEndDate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SumOvertimeHoursRequestValidationError{
				field:  "EndDate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SumOvertimeHoursRequestMultiError(errors)
	}

	return nil
}

// SumOvertimeHoursRequestMultiError is an error wrapping multiple validation
// errors returned by SumOvertimeHoursRequest.ValidateAll() if the designated
// constraints aren't met.
type SumOvertimeHoursRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SumOvertimeHoursRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SumOvertimeHoursRequestMultiError) AllErrors() []error { return m }

// SumOvertimeHoursRequestValidationError is the validation error returned by
// SumOvertimeHoursRequest.Validate if the designated constraints aren't met.
type SumOvertimeHoursRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SumOvertimeHoursRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SumOvertimeHoursRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SumOvertimeHoursRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SumOvertimeHoursRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SumOvertimeHoursRequestValidationError) ErrorName() string {
	return "SumOvertimeHoursRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SumOvertimeHoursRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSumOvertimeHoursRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SumOvertimeHoursRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SumOvertimeHoursRequestValidationError{}

// Validate checks the field values on SumOvertimeHoursResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SumOvertimeHoursResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SumOvertimeHoursResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SumOvertimeHoursResponseMultiError, or nil if none found.
func (m *SumOvertimeHoursResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SumOvertimeHoursResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TotalHours

	if len(errors) > 0 {
		return SumOvertimeHoursResponseMultiError(errors)
	}

	return nil
}

// SumOvertimeHoursResponseMultiError is an error wrapping multiple validation
// errors returned by SumOvertimeHoursResponse.ValidateAll() if the designated
// constraints aren't met.
type SumOvertimeHoursResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SumOvertimeHoursResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SumOvertimeHoursResponseMultiError) AllErrors() []error { return m }

// SumOvertimeHoursResponseValidationError is the validation error returned by
// SumOvertimeHoursResponse.Validate if the designated constraints aren't met.
type SumOvertimeHoursResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SumOvertimeHoursResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SumOvertimeHoursResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SumOvertimeHoursResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SumOvertimeHoursResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SumOvertimeHoursResponseValidationError) ErrorName() string {
	return "SumOvertimeHoursResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SumOvertimeHoursResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSumOvertimeHoursResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SumOvertimeHoursResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SumOvertimeHoursResponseValidationError{}

// Validate checks the field values on GetCompOffDaysRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCompOffDaysRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCompOffDaysRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCompOffDaysRequestMultiError, or nil if none found.
func (m *GetCompOffDaysRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCompOffDaysRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TenantId

	// no validation rules for EmployeeId

	if len(errors) > 0 {
		return GetCompOffDaysRequestMultiError(errors)
	}

	return nil
}

// GetCompOffDaysRequestMultiError is an error wrapping multiple validation
// errors returned by GetCompOffDaysRequest.ValidateAll() if the designated
// constraints aren't met.
type GetCompOffDaysRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCompOffDaysRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCompOffDaysRequestMultiError) AllErrors() []error { return m }

// GetCompOffDaysRequestValidationError is the validation error returned by
// GetCompOffDaysRequest.Validate if the designated constraints aren't met.
type GetCompOffDaysRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCompOffDaysRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCompOffDaysRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCompOffDaysRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCompOffDaysRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCompOffDaysRequestValidationError) ErrorName() string {
	return "GetCompOffDaysRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetCompOffDaysRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCompOffDaysRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCompOffDaysRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCompOffDaysRequestValidationError{}

// Validate checks the field values on GetCompOffDaysResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCompOffDaysResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCompOffDaysResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCompOffDaysResponseMultiError, or nil if none found.
func (m *GetCompOffDaysResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCompOffDaysResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AvailableDays

	if len(errors) > 0 {
		return GetCompOffDaysResponseMultiError(errors)
	}

	return nil
}

// GetCompOffDaysResponseMultiError is an error wrapping multiple validation
// errors returned by GetCompOffDaysResponse.ValidateAll() if the designated
// constraints aren't met.
type GetCompOffDaysResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCompOffDaysResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCompOffDaysResponseMultiError) AllErrors() []error { return m }

// GetCompOffDaysResponseValidationError is the validation error returned by
// GetCompOffDaysResponse.Validate if the designated constraints aren't met.
type GetCompOffDaysResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCompOffDaysResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCompOffDaysResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCompOffDaysResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCompOffDaysResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCompOffDaysResponseValidationError) ErrorName() string {
	return "GetCompOffDaysResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetCompOffDaysResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCompOffDaysResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCompOffDaysResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCompOffDaysResponseValidationError{}

// Validate checks the field values on UseCompOffDaysRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UseCompOffDaysRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UseCompOffDaysRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UseCompOffDaysRequestMultiError, or nil if none found.
func (m *UseCompOffDaysRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UseCompOffDaysRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TenantId

	// no validation rules for EmployeeId

	// no validation rules for Days

	if len(errors) > 0 {
		return UseCompOffDaysRequestMultiError(errors)
	}

	return nil
}

// UseCompOffDaysRequestMultiError is an error wrapping multiple validation
// errors returned by UseCompOffDaysRequest.ValidateAll() if the designated
// constraints aren't met.
type UseCompOffDaysRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UseCompOffDaysRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UseCompOffDaysRequestMultiError) AllErrors() []error { return m }

// UseCompOffDaysRequestValidationError is the validation error returned by
// UseCompOffDaysRequest.Validate if the designated constraints aren't met.
type UseCompOffDaysRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UseCompOffDaysRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UseCompOffDaysRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UseCompOffDaysRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UseCompOffDaysRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UseCompOffDaysRequestValidationError) ErrorName() string {
	return "UseCompOffDaysRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UseCompOffDaysRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUseCompOffDaysRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UseCompOffDaysRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UseCompOffDaysRequestValidationError{}

// Validate checks the field values on UseCompOffDaysResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UseCompOffDaysResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UseCompOffDaysResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UseCompOffDaysResponseMultiError, or nil if none found.
func (m *UseCompOffDaysResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UseCompOffDaysResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	// no validation rules for Message

	// no validation rules for RemainingDays

	if len(errors) > 0 {
		return UseCompOffDaysResponseMultiError(errors)
	}

	return nil
}

// UseCompOffDaysResponseMultiError is an error wrapping multiple validation
// errors returned by UseCompOffDaysResponse.ValidateAll() if the designated
// constraints aren't met.
type UseCompOffDaysResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UseCompOffDaysResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UseCompOffDaysResponseMultiError) AllErrors() []error { return m }

// UseCompOffDaysResponseValidationError is the validation error returned by
// UseCompOffDaysResponse.Validate if the designated constraints aren't met.
type UseCompOffDaysResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UseCompOffDaysResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UseCompOffDaysResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UseCompOffDaysResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UseCompOffDaysResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UseCompOffDaysResponseValidationError) ErrorName() string {
	return "UseCompOffDaysResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UseCompOffDaysResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUseCompOffDaysResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UseCompOffDaysResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UseCompOffDaysResponseValidationError{}
