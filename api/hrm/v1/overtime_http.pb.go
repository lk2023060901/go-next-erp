// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.9.0
// - protoc             (unknown)
// source: api/hrm/v1/overtime.proto

package hrmv1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationOvertimeServiceApproveOvertime = "/api.hrm.v1.OvertimeService/ApproveOvertime"
const OperationOvertimeServiceCreateOvertime = "/api.hrm.v1.OvertimeService/CreateOvertime"
const OperationOvertimeServiceDeleteOvertime = "/api.hrm.v1.OvertimeService/DeleteOvertime"
const OperationOvertimeServiceGetCompOffDays = "/api.hrm.v1.OvertimeService/GetCompOffDays"
const OperationOvertimeServiceGetOvertime = "/api.hrm.v1.OvertimeService/GetOvertime"
const OperationOvertimeServiceListEmployeeOvertimes = "/api.hrm.v1.OvertimeService/ListEmployeeOvertimes"
const OperationOvertimeServiceListOvertimes = "/api.hrm.v1.OvertimeService/ListOvertimes"
const OperationOvertimeServiceListPendingOvertimes = "/api.hrm.v1.OvertimeService/ListPendingOvertimes"
const OperationOvertimeServiceRejectOvertime = "/api.hrm.v1.OvertimeService/RejectOvertime"
const OperationOvertimeServiceSubmitOvertime = "/api.hrm.v1.OvertimeService/SubmitOvertime"
const OperationOvertimeServiceSumOvertimeHours = "/api.hrm.v1.OvertimeService/SumOvertimeHours"
const OperationOvertimeServiceUpdateOvertime = "/api.hrm.v1.OvertimeService/UpdateOvertime"
const OperationOvertimeServiceUseCompOffDays = "/api.hrm.v1.OvertimeService/UseCompOffDays"

type OvertimeServiceHTTPServer interface {
	// ApproveOvertime 批准加班
	ApproveOvertime(context.Context, *ApproveOvertimeRequest) (*ApproveOvertimeResponse, error)
	// CreateOvertime 创建加班申请
	CreateOvertime(context.Context, *CreateOvertimeRequest) (*OvertimeResponse, error)
	// DeleteOvertime 删除加班申请
	DeleteOvertime(context.Context, *DeleteOvertimeRequest) (*DeleteOvertimeResponse, error)
	// GetCompOffDays 统计可调休天数
	GetCompOffDays(context.Context, *GetCompOffDaysRequest) (*GetCompOffDaysResponse, error)
	// GetOvertime 获取加班详情
	GetOvertime(context.Context, *GetOvertimeRequest) (*OvertimeResponse, error)
	// ListEmployeeOvertimes 查询员工加班记录
	ListEmployeeOvertimes(context.Context, *ListEmployeeOvertimesRequest) (*ListOvertimesResponse, error)
	// ListOvertimes 列表查询加班记录
	ListOvertimes(context.Context, *ListOvertimesRequest) (*ListOvertimesResponse, error)
	// ListPendingOvertimes 查询待审批的加班
	ListPendingOvertimes(context.Context, *ListPendingOvertimesRequest) (*ListOvertimesResponse, error)
	// RejectOvertime 拒绝加班
	RejectOvertime(context.Context, *RejectOvertimeRequest) (*RejectOvertimeResponse, error)
	// SubmitOvertime 提交加班审批
	SubmitOvertime(context.Context, *SubmitOvertimeRequest) (*SubmitOvertimeResponse, error)
	// SumOvertimeHours 统计员工加班时长
	SumOvertimeHours(context.Context, *SumOvertimeHoursRequest) (*SumOvertimeHoursResponse, error)
	// UpdateOvertime 更新加班申请
	UpdateOvertime(context.Context, *UpdateOvertimeRequest) (*OvertimeResponse, error)
	// UseCompOffDays 使用调休
	UseCompOffDays(context.Context, *UseCompOffDaysRequest) (*UseCompOffDaysResponse, error)
}

func RegisterOvertimeServiceHTTPServer(s *http.Server, srv OvertimeServiceHTTPServer) {
	r := s.Route("/")
	r.POST("/api/v1/hrm/overtimes", _OvertimeService_CreateOvertime0_HTTP_Handler(srv))
	r.PUT("/api/v1/hrm/overtimes/{id}", _OvertimeService_UpdateOvertime0_HTTP_Handler(srv))
	r.DELETE("/api/v1/hrm/overtimes/{id}", _OvertimeService_DeleteOvertime0_HTTP_Handler(srv))
	r.GET("/api/v1/hrm/overtimes/{id}", _OvertimeService_GetOvertime0_HTTP_Handler(srv))
	r.GET("/api/v1/hrm/overtimes", _OvertimeService_ListOvertimes0_HTTP_Handler(srv))
	r.GET("/api/v1/hrm/employees/{employee_id}/overtimes", _OvertimeService_ListEmployeeOvertimes0_HTTP_Handler(srv))
	r.GET("/api/v1/hrm/overtimes/pending", _OvertimeService_ListPendingOvertimes0_HTTP_Handler(srv))
	r.POST("/api/v1/hrm/overtimes/{overtime_id}/submit", _OvertimeService_SubmitOvertime0_HTTP_Handler(srv))
	r.POST("/api/v1/hrm/overtimes/{overtime_id}/approve", _OvertimeService_ApproveOvertime0_HTTP_Handler(srv))
	r.POST("/api/v1/hrm/overtimes/{overtime_id}/reject", _OvertimeService_RejectOvertime0_HTTP_Handler(srv))
	r.GET("/api/v1/hrm/employees/{employee_id}/overtime-hours", _OvertimeService_SumOvertimeHours0_HTTP_Handler(srv))
	r.GET("/api/v1/hrm/employees/{employee_id}/comp-off-days", _OvertimeService_GetCompOffDays0_HTTP_Handler(srv))
	r.POST("/api/v1/hrm/employees/{employee_id}/comp-off-days/use", _OvertimeService_UseCompOffDays0_HTTP_Handler(srv))
}

func _OvertimeService_CreateOvertime0_HTTP_Handler(srv OvertimeServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateOvertimeRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationOvertimeServiceCreateOvertime)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateOvertime(ctx, req.(*CreateOvertimeRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*OvertimeResponse)
		return ctx.Result(200, reply)
	}
}

func _OvertimeService_UpdateOvertime0_HTTP_Handler(srv OvertimeServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateOvertimeRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationOvertimeServiceUpdateOvertime)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateOvertime(ctx, req.(*UpdateOvertimeRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*OvertimeResponse)
		return ctx.Result(200, reply)
	}
}

func _OvertimeService_DeleteOvertime0_HTTP_Handler(srv OvertimeServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteOvertimeRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationOvertimeServiceDeleteOvertime)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteOvertime(ctx, req.(*DeleteOvertimeRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteOvertimeResponse)
		return ctx.Result(200, reply)
	}
}

func _OvertimeService_GetOvertime0_HTTP_Handler(srv OvertimeServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetOvertimeRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationOvertimeServiceGetOvertime)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetOvertime(ctx, req.(*GetOvertimeRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*OvertimeResponse)
		return ctx.Result(200, reply)
	}
}

func _OvertimeService_ListOvertimes0_HTTP_Handler(srv OvertimeServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListOvertimesRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationOvertimeServiceListOvertimes)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListOvertimes(ctx, req.(*ListOvertimesRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListOvertimesResponse)
		return ctx.Result(200, reply)
	}
}

func _OvertimeService_ListEmployeeOvertimes0_HTTP_Handler(srv OvertimeServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListEmployeeOvertimesRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationOvertimeServiceListEmployeeOvertimes)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListEmployeeOvertimes(ctx, req.(*ListEmployeeOvertimesRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListOvertimesResponse)
		return ctx.Result(200, reply)
	}
}

func _OvertimeService_ListPendingOvertimes0_HTTP_Handler(srv OvertimeServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListPendingOvertimesRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationOvertimeServiceListPendingOvertimes)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListPendingOvertimes(ctx, req.(*ListPendingOvertimesRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListOvertimesResponse)
		return ctx.Result(200, reply)
	}
}

func _OvertimeService_SubmitOvertime0_HTTP_Handler(srv OvertimeServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SubmitOvertimeRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationOvertimeServiceSubmitOvertime)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SubmitOvertime(ctx, req.(*SubmitOvertimeRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SubmitOvertimeResponse)
		return ctx.Result(200, reply)
	}
}

func _OvertimeService_ApproveOvertime0_HTTP_Handler(srv OvertimeServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ApproveOvertimeRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationOvertimeServiceApproveOvertime)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ApproveOvertime(ctx, req.(*ApproveOvertimeRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ApproveOvertimeResponse)
		return ctx.Result(200, reply)
	}
}

func _OvertimeService_RejectOvertime0_HTTP_Handler(srv OvertimeServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in RejectOvertimeRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationOvertimeServiceRejectOvertime)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.RejectOvertime(ctx, req.(*RejectOvertimeRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*RejectOvertimeResponse)
		return ctx.Result(200, reply)
	}
}

func _OvertimeService_SumOvertimeHours0_HTTP_Handler(srv OvertimeServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SumOvertimeHoursRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationOvertimeServiceSumOvertimeHours)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SumOvertimeHours(ctx, req.(*SumOvertimeHoursRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SumOvertimeHoursResponse)
		return ctx.Result(200, reply)
	}
}

func _OvertimeService_GetCompOffDays0_HTTP_Handler(srv OvertimeServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetCompOffDaysRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationOvertimeServiceGetCompOffDays)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetCompOffDays(ctx, req.(*GetCompOffDaysRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetCompOffDaysResponse)
		return ctx.Result(200, reply)
	}
}

func _OvertimeService_UseCompOffDays0_HTTP_Handler(srv OvertimeServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UseCompOffDaysRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationOvertimeServiceUseCompOffDays)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UseCompOffDays(ctx, req.(*UseCompOffDaysRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UseCompOffDaysResponse)
		return ctx.Result(200, reply)
	}
}

type OvertimeServiceHTTPClient interface {
	// ApproveOvertime 批准加班
	ApproveOvertime(ctx context.Context, req *ApproveOvertimeRequest, opts ...http.CallOption) (rsp *ApproveOvertimeResponse, err error)
	// CreateOvertime 创建加班申请
	CreateOvertime(ctx context.Context, req *CreateOvertimeRequest, opts ...http.CallOption) (rsp *OvertimeResponse, err error)
	// DeleteOvertime 删除加班申请
	DeleteOvertime(ctx context.Context, req *DeleteOvertimeRequest, opts ...http.CallOption) (rsp *DeleteOvertimeResponse, err error)
	// GetCompOffDays 统计可调休天数
	GetCompOffDays(ctx context.Context, req *GetCompOffDaysRequest, opts ...http.CallOption) (rsp *GetCompOffDaysResponse, err error)
	// GetOvertime 获取加班详情
	GetOvertime(ctx context.Context, req *GetOvertimeRequest, opts ...http.CallOption) (rsp *OvertimeResponse, err error)
	// ListEmployeeOvertimes 查询员工加班记录
	ListEmployeeOvertimes(ctx context.Context, req *ListEmployeeOvertimesRequest, opts ...http.CallOption) (rsp *ListOvertimesResponse, err error)
	// ListOvertimes 列表查询加班记录
	ListOvertimes(ctx context.Context, req *ListOvertimesRequest, opts ...http.CallOption) (rsp *ListOvertimesResponse, err error)
	// ListPendingOvertimes 查询待审批的加班
	ListPendingOvertimes(ctx context.Context, req *ListPendingOvertimesRequest, opts ...http.CallOption) (rsp *ListOvertimesResponse, err error)
	// RejectOvertime 拒绝加班
	RejectOvertime(ctx context.Context, req *RejectOvertimeRequest, opts ...http.CallOption) (rsp *RejectOvertimeResponse, err error)
	// SubmitOvertime 提交加班审批
	SubmitOvertime(ctx context.Context, req *SubmitOvertimeRequest, opts ...http.CallOption) (rsp *SubmitOvertimeResponse, err error)
	// SumOvertimeHours 统计员工加班时长
	SumOvertimeHours(ctx context.Context, req *SumOvertimeHoursRequest, opts ...http.CallOption) (rsp *SumOvertimeHoursResponse, err error)
	// UpdateOvertime 更新加班申请
	UpdateOvertime(ctx context.Context, req *UpdateOvertimeRequest, opts ...http.CallOption) (rsp *OvertimeResponse, err error)
	// UseCompOffDays 使用调休
	UseCompOffDays(ctx context.Context, req *UseCompOffDaysRequest, opts ...http.CallOption) (rsp *UseCompOffDaysResponse, err error)
}

type OvertimeServiceHTTPClientImpl struct {
	cc *http.Client
}

func NewOvertimeServiceHTTPClient(client *http.Client) OvertimeServiceHTTPClient {
	return &OvertimeServiceHTTPClientImpl{client}
}

// ApproveOvertime 批准加班
func (c *OvertimeServiceHTTPClientImpl) ApproveOvertime(ctx context.Context, in *ApproveOvertimeRequest, opts ...http.CallOption) (*ApproveOvertimeResponse, error) {
	var out ApproveOvertimeResponse
	pattern := "/api/v1/hrm/overtimes/{overtime_id}/approve"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationOvertimeServiceApproveOvertime))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

// CreateOvertime 创建加班申请
func (c *OvertimeServiceHTTPClientImpl) CreateOvertime(ctx context.Context, in *CreateOvertimeRequest, opts ...http.CallOption) (*OvertimeResponse, error) {
	var out OvertimeResponse
	pattern := "/api/v1/hrm/overtimes"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationOvertimeServiceCreateOvertime))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

// DeleteOvertime 删除加班申请
func (c *OvertimeServiceHTTPClientImpl) DeleteOvertime(ctx context.Context, in *DeleteOvertimeRequest, opts ...http.CallOption) (*DeleteOvertimeResponse, error) {
	var out DeleteOvertimeResponse
	pattern := "/api/v1/hrm/overtimes/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationOvertimeServiceDeleteOvertime))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

// GetCompOffDays 统计可调休天数
func (c *OvertimeServiceHTTPClientImpl) GetCompOffDays(ctx context.Context, in *GetCompOffDaysRequest, opts ...http.CallOption) (*GetCompOffDaysResponse, error) {
	var out GetCompOffDaysResponse
	pattern := "/api/v1/hrm/employees/{employee_id}/comp-off-days"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationOvertimeServiceGetCompOffDays))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

// GetOvertime 获取加班详情
func (c *OvertimeServiceHTTPClientImpl) GetOvertime(ctx context.Context, in *GetOvertimeRequest, opts ...http.CallOption) (*OvertimeResponse, error) {
	var out OvertimeResponse
	pattern := "/api/v1/hrm/overtimes/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationOvertimeServiceGetOvertime))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

// ListEmployeeOvertimes 查询员工加班记录
func (c *OvertimeServiceHTTPClientImpl) ListEmployeeOvertimes(ctx context.Context, in *ListEmployeeOvertimesRequest, opts ...http.CallOption) (*ListOvertimesResponse, error) {
	var out ListOvertimesResponse
	pattern := "/api/v1/hrm/employees/{employee_id}/overtimes"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationOvertimeServiceListEmployeeOvertimes))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

// ListOvertimes 列表查询加班记录
func (c *OvertimeServiceHTTPClientImpl) ListOvertimes(ctx context.Context, in *ListOvertimesRequest, opts ...http.CallOption) (*ListOvertimesResponse, error) {
	var out ListOvertimesResponse
	pattern := "/api/v1/hrm/overtimes"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationOvertimeServiceListOvertimes))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

// ListPendingOvertimes 查询待审批的加班
func (c *OvertimeServiceHTTPClientImpl) ListPendingOvertimes(ctx context.Context, in *ListPendingOvertimesRequest, opts ...http.CallOption) (*ListOvertimesResponse, error) {
	var out ListOvertimesResponse
	pattern := "/api/v1/hrm/overtimes/pending"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationOvertimeServiceListPendingOvertimes))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

// RejectOvertime 拒绝加班
func (c *OvertimeServiceHTTPClientImpl) RejectOvertime(ctx context.Context, in *RejectOvertimeRequest, opts ...http.CallOption) (*RejectOvertimeResponse, error) {
	var out RejectOvertimeResponse
	pattern := "/api/v1/hrm/overtimes/{overtime_id}/reject"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationOvertimeServiceRejectOvertime))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

// SubmitOvertime 提交加班审批
func (c *OvertimeServiceHTTPClientImpl) SubmitOvertime(ctx context.Context, in *SubmitOvertimeRequest, opts ...http.CallOption) (*SubmitOvertimeResponse, error) {
	var out SubmitOvertimeResponse
	pattern := "/api/v1/hrm/overtimes/{overtime_id}/submit"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationOvertimeServiceSubmitOvertime))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

// SumOvertimeHours 统计员工加班时长
func (c *OvertimeServiceHTTPClientImpl) SumOvertimeHours(ctx context.Context, in *SumOvertimeHoursRequest, opts ...http.CallOption) (*SumOvertimeHoursResponse, error) {
	var out SumOvertimeHoursResponse
	pattern := "/api/v1/hrm/employees/{employee_id}/overtime-hours"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationOvertimeServiceSumOvertimeHours))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

// UpdateOvertime 更新加班申请
func (c *OvertimeServiceHTTPClientImpl) UpdateOvertime(ctx context.Context, in *UpdateOvertimeRequest, opts ...http.CallOption) (*OvertimeResponse, error) {
	var out OvertimeResponse
	pattern := "/api/v1/hrm/overtimes/{id}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationOvertimeServiceUpdateOvertime))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

// UseCompOffDays 使用调休
func (c *OvertimeServiceHTTPClientImpl) UseCompOffDays(ctx context.Context, in *UseCompOffDaysRequest, opts ...http.CallOption) (*UseCompOffDaysResponse, error) {
	var out UseCompOffDaysResponse
	pattern := "/api/v1/hrm/employees/{employee_id}/comp-off-days/use"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationOvertimeServiceUseCompOffDays))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
