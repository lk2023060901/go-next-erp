// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.9.0
// - protoc             (unknown)
// source: api/hrm/v1/punch_card_supplement.proto

package hrmv1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationPunchCardSupplementServiceApprovePunchCardSupplement = "/hrm.v1.PunchCardSupplementService/ApprovePunchCardSupplement"
const OperationPunchCardSupplementServiceCancelPunchCardSupplement = "/hrm.v1.PunchCardSupplementService/CancelPunchCardSupplement"
const OperationPunchCardSupplementServiceCreatePunchCardSupplement = "/hrm.v1.PunchCardSupplementService/CreatePunchCardSupplement"
const OperationPunchCardSupplementServiceDeletePunchCardSupplement = "/hrm.v1.PunchCardSupplementService/DeletePunchCardSupplement"
const OperationPunchCardSupplementServiceGetPunchCardSupplement = "/hrm.v1.PunchCardSupplementService/GetPunchCardSupplement"
const OperationPunchCardSupplementServiceListEmployeePunchCardSupplements = "/hrm.v1.PunchCardSupplementService/ListEmployeePunchCardSupplements"
const OperationPunchCardSupplementServiceListPendingPunchCardSupplements = "/hrm.v1.PunchCardSupplementService/ListPendingPunchCardSupplements"
const OperationPunchCardSupplementServiceListPunchCardSupplements = "/hrm.v1.PunchCardSupplementService/ListPunchCardSupplements"
const OperationPunchCardSupplementServiceProcessPunchCardSupplement = "/hrm.v1.PunchCardSupplementService/ProcessPunchCardSupplement"
const OperationPunchCardSupplementServiceRejectPunchCardSupplement = "/hrm.v1.PunchCardSupplementService/RejectPunchCardSupplement"
const OperationPunchCardSupplementServiceSubmitPunchCardSupplement = "/hrm.v1.PunchCardSupplementService/SubmitPunchCardSupplement"
const OperationPunchCardSupplementServiceUpdatePunchCardSupplement = "/hrm.v1.PunchCardSupplementService/UpdatePunchCardSupplement"

type PunchCardSupplementServiceHTTPServer interface {
	// ApprovePunchCardSupplement ApprovePunchCardSupplement 批准补卡申请
	ApprovePunchCardSupplement(context.Context, *ApprovePunchCardSupplementRequest) (*ApprovePunchCardSupplementResponse, error)
	// CancelPunchCardSupplement CancelPunchCardSupplement 取消补卡申请
	CancelPunchCardSupplement(context.Context, *CancelPunchCardSupplementRequest) (*CancelPunchCardSupplementResponse, error)
	// CreatePunchCardSupplement CreatePunchCardSupplement 创建补卡申请
	CreatePunchCardSupplement(context.Context, *CreatePunchCardSupplementRequest) (*PunchCardSupplementResponse, error)
	// DeletePunchCardSupplement DeletePunchCardSupplement 删除补卡申请
	DeletePunchCardSupplement(context.Context, *DeletePunchCardSupplementRequest) (*DeletePunchCardSupplementResponse, error)
	// GetPunchCardSupplement GetPunchCardSupplement 获取补卡申请详情
	GetPunchCardSupplement(context.Context, *GetPunchCardSupplementRequest) (*PunchCardSupplementResponse, error)
	// ListEmployeePunchCardSupplements ListEmployeePunchCardSupplements 查询员工补卡申请记录
	ListEmployeePunchCardSupplements(context.Context, *ListEmployeePunchCardSupplementsRequest) (*ListPunchCardSupplementsResponse, error)
	// ListPendingPunchCardSupplements ListPendingPunchCardSupplements 查询待审批的补卡申请
	ListPendingPunchCardSupplements(context.Context, *ListPendingPunchCardSupplementsRequest) (*ListPunchCardSupplementsResponse, error)
	// ListPunchCardSupplements ListPunchCardSupplements 列表查询补卡申请
	ListPunchCardSupplements(context.Context, *ListPunchCardSupplementsRequest) (*ListPunchCardSupplementsResponse, error)
	// ProcessPunchCardSupplement ProcessPunchCardSupplement 处理补卡（生成补卡记录）
	ProcessPunchCardSupplement(context.Context, *ProcessPunchCardSupplementRequest) (*ProcessPunchCardSupplementResponse, error)
	// RejectPunchCardSupplement RejectPunchCardSupplement 拒绝补卡申请
	RejectPunchCardSupplement(context.Context, *RejectPunchCardSupplementRequest) (*RejectPunchCardSupplementResponse, error)
	// SubmitPunchCardSupplement SubmitPunchCardSupplement 提交补卡申请审批
	SubmitPunchCardSupplement(context.Context, *SubmitPunchCardSupplementRequest) (*SubmitPunchCardSupplementResponse, error)
	// UpdatePunchCardSupplement UpdatePunchCardSupplement 更新补卡申请
	UpdatePunchCardSupplement(context.Context, *UpdatePunchCardSupplementRequest) (*PunchCardSupplementResponse, error)
}

func RegisterPunchCardSupplementServiceHTTPServer(s *http.Server, srv PunchCardSupplementServiceHTTPServer) {
	r := s.Route("/")
	r.POST("/api/v1/hrm/punch-card-supplements", _PunchCardSupplementService_CreatePunchCardSupplement0_HTTP_Handler(srv))
	r.PUT("/api/v1/hrm/punch-card-supplements/{id}", _PunchCardSupplementService_UpdatePunchCardSupplement0_HTTP_Handler(srv))
	r.DELETE("/api/v1/hrm/punch-card-supplements/{id}", _PunchCardSupplementService_DeletePunchCardSupplement0_HTTP_Handler(srv))
	r.GET("/api/v1/hrm/punch-card-supplements/{id}", _PunchCardSupplementService_GetPunchCardSupplement0_HTTP_Handler(srv))
	r.GET("/api/v1/hrm/punch-card-supplements", _PunchCardSupplementService_ListPunchCardSupplements0_HTTP_Handler(srv))
	r.GET("/api/v1/hrm/employees/{employee_id}/punch-card-supplements", _PunchCardSupplementService_ListEmployeePunchCardSupplements0_HTTP_Handler(srv))
	r.GET("/api/v1/hrm/punch-card-supplements/pending", _PunchCardSupplementService_ListPendingPunchCardSupplements0_HTTP_Handler(srv))
	r.POST("/api/v1/hrm/punch-card-supplements/{supplement_id}/submit", _PunchCardSupplementService_SubmitPunchCardSupplement0_HTTP_Handler(srv))
	r.POST("/api/v1/hrm/punch-card-supplements/{supplement_id}/approve", _PunchCardSupplementService_ApprovePunchCardSupplement0_HTTP_Handler(srv))
	r.POST("/api/v1/hrm/punch-card-supplements/{supplement_id}/reject", _PunchCardSupplementService_RejectPunchCardSupplement0_HTTP_Handler(srv))
	r.POST("/api/v1/hrm/punch-card-supplements/{supplement_id}/process", _PunchCardSupplementService_ProcessPunchCardSupplement0_HTTP_Handler(srv))
	r.POST("/api/v1/hrm/punch-card-supplements/{supplement_id}/cancel", _PunchCardSupplementService_CancelPunchCardSupplement0_HTTP_Handler(srv))
}

func _PunchCardSupplementService_CreatePunchCardSupplement0_HTTP_Handler(srv PunchCardSupplementServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreatePunchCardSupplementRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPunchCardSupplementServiceCreatePunchCardSupplement)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreatePunchCardSupplement(ctx, req.(*CreatePunchCardSupplementRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*PunchCardSupplementResponse)
		return ctx.Result(200, reply)
	}
}

func _PunchCardSupplementService_UpdatePunchCardSupplement0_HTTP_Handler(srv PunchCardSupplementServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdatePunchCardSupplementRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPunchCardSupplementServiceUpdatePunchCardSupplement)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdatePunchCardSupplement(ctx, req.(*UpdatePunchCardSupplementRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*PunchCardSupplementResponse)
		return ctx.Result(200, reply)
	}
}

func _PunchCardSupplementService_DeletePunchCardSupplement0_HTTP_Handler(srv PunchCardSupplementServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeletePunchCardSupplementRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPunchCardSupplementServiceDeletePunchCardSupplement)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeletePunchCardSupplement(ctx, req.(*DeletePunchCardSupplementRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeletePunchCardSupplementResponse)
		return ctx.Result(200, reply)
	}
}

func _PunchCardSupplementService_GetPunchCardSupplement0_HTTP_Handler(srv PunchCardSupplementServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetPunchCardSupplementRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPunchCardSupplementServiceGetPunchCardSupplement)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetPunchCardSupplement(ctx, req.(*GetPunchCardSupplementRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*PunchCardSupplementResponse)
		return ctx.Result(200, reply)
	}
}

func _PunchCardSupplementService_ListPunchCardSupplements0_HTTP_Handler(srv PunchCardSupplementServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListPunchCardSupplementsRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPunchCardSupplementServiceListPunchCardSupplements)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListPunchCardSupplements(ctx, req.(*ListPunchCardSupplementsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListPunchCardSupplementsResponse)
		return ctx.Result(200, reply)
	}
}

func _PunchCardSupplementService_ListEmployeePunchCardSupplements0_HTTP_Handler(srv PunchCardSupplementServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListEmployeePunchCardSupplementsRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPunchCardSupplementServiceListEmployeePunchCardSupplements)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListEmployeePunchCardSupplements(ctx, req.(*ListEmployeePunchCardSupplementsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListPunchCardSupplementsResponse)
		return ctx.Result(200, reply)
	}
}

func _PunchCardSupplementService_ListPendingPunchCardSupplements0_HTTP_Handler(srv PunchCardSupplementServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListPendingPunchCardSupplementsRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPunchCardSupplementServiceListPendingPunchCardSupplements)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListPendingPunchCardSupplements(ctx, req.(*ListPendingPunchCardSupplementsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListPunchCardSupplementsResponse)
		return ctx.Result(200, reply)
	}
}

func _PunchCardSupplementService_SubmitPunchCardSupplement0_HTTP_Handler(srv PunchCardSupplementServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SubmitPunchCardSupplementRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPunchCardSupplementServiceSubmitPunchCardSupplement)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SubmitPunchCardSupplement(ctx, req.(*SubmitPunchCardSupplementRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SubmitPunchCardSupplementResponse)
		return ctx.Result(200, reply)
	}
}

func _PunchCardSupplementService_ApprovePunchCardSupplement0_HTTP_Handler(srv PunchCardSupplementServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ApprovePunchCardSupplementRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPunchCardSupplementServiceApprovePunchCardSupplement)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ApprovePunchCardSupplement(ctx, req.(*ApprovePunchCardSupplementRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ApprovePunchCardSupplementResponse)
		return ctx.Result(200, reply)
	}
}

func _PunchCardSupplementService_RejectPunchCardSupplement0_HTTP_Handler(srv PunchCardSupplementServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in RejectPunchCardSupplementRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPunchCardSupplementServiceRejectPunchCardSupplement)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.RejectPunchCardSupplement(ctx, req.(*RejectPunchCardSupplementRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*RejectPunchCardSupplementResponse)
		return ctx.Result(200, reply)
	}
}

func _PunchCardSupplementService_ProcessPunchCardSupplement0_HTTP_Handler(srv PunchCardSupplementServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ProcessPunchCardSupplementRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPunchCardSupplementServiceProcessPunchCardSupplement)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ProcessPunchCardSupplement(ctx, req.(*ProcessPunchCardSupplementRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ProcessPunchCardSupplementResponse)
		return ctx.Result(200, reply)
	}
}

func _PunchCardSupplementService_CancelPunchCardSupplement0_HTTP_Handler(srv PunchCardSupplementServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CancelPunchCardSupplementRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPunchCardSupplementServiceCancelPunchCardSupplement)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CancelPunchCardSupplement(ctx, req.(*CancelPunchCardSupplementRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CancelPunchCardSupplementResponse)
		return ctx.Result(200, reply)
	}
}

type PunchCardSupplementServiceHTTPClient interface {
	// ApprovePunchCardSupplement ApprovePunchCardSupplement 批准补卡申请
	ApprovePunchCardSupplement(ctx context.Context, req *ApprovePunchCardSupplementRequest, opts ...http.CallOption) (rsp *ApprovePunchCardSupplementResponse, err error)
	// CancelPunchCardSupplement CancelPunchCardSupplement 取消补卡申请
	CancelPunchCardSupplement(ctx context.Context, req *CancelPunchCardSupplementRequest, opts ...http.CallOption) (rsp *CancelPunchCardSupplementResponse, err error)
	// CreatePunchCardSupplement CreatePunchCardSupplement 创建补卡申请
	CreatePunchCardSupplement(ctx context.Context, req *CreatePunchCardSupplementRequest, opts ...http.CallOption) (rsp *PunchCardSupplementResponse, err error)
	// DeletePunchCardSupplement DeletePunchCardSupplement 删除补卡申请
	DeletePunchCardSupplement(ctx context.Context, req *DeletePunchCardSupplementRequest, opts ...http.CallOption) (rsp *DeletePunchCardSupplementResponse, err error)
	// GetPunchCardSupplement GetPunchCardSupplement 获取补卡申请详情
	GetPunchCardSupplement(ctx context.Context, req *GetPunchCardSupplementRequest, opts ...http.CallOption) (rsp *PunchCardSupplementResponse, err error)
	// ListEmployeePunchCardSupplements ListEmployeePunchCardSupplements 查询员工补卡申请记录
	ListEmployeePunchCardSupplements(ctx context.Context, req *ListEmployeePunchCardSupplementsRequest, opts ...http.CallOption) (rsp *ListPunchCardSupplementsResponse, err error)
	// ListPendingPunchCardSupplements ListPendingPunchCardSupplements 查询待审批的补卡申请
	ListPendingPunchCardSupplements(ctx context.Context, req *ListPendingPunchCardSupplementsRequest, opts ...http.CallOption) (rsp *ListPunchCardSupplementsResponse, err error)
	// ListPunchCardSupplements ListPunchCardSupplements 列表查询补卡申请
	ListPunchCardSupplements(ctx context.Context, req *ListPunchCardSupplementsRequest, opts ...http.CallOption) (rsp *ListPunchCardSupplementsResponse, err error)
	// ProcessPunchCardSupplement ProcessPunchCardSupplement 处理补卡（生成补卡记录）
	ProcessPunchCardSupplement(ctx context.Context, req *ProcessPunchCardSupplementRequest, opts ...http.CallOption) (rsp *ProcessPunchCardSupplementResponse, err error)
	// RejectPunchCardSupplement RejectPunchCardSupplement 拒绝补卡申请
	RejectPunchCardSupplement(ctx context.Context, req *RejectPunchCardSupplementRequest, opts ...http.CallOption) (rsp *RejectPunchCardSupplementResponse, err error)
	// SubmitPunchCardSupplement SubmitPunchCardSupplement 提交补卡申请审批
	SubmitPunchCardSupplement(ctx context.Context, req *SubmitPunchCardSupplementRequest, opts ...http.CallOption) (rsp *SubmitPunchCardSupplementResponse, err error)
	// UpdatePunchCardSupplement UpdatePunchCardSupplement 更新补卡申请
	UpdatePunchCardSupplement(ctx context.Context, req *UpdatePunchCardSupplementRequest, opts ...http.CallOption) (rsp *PunchCardSupplementResponse, err error)
}

type PunchCardSupplementServiceHTTPClientImpl struct {
	cc *http.Client
}

func NewPunchCardSupplementServiceHTTPClient(client *http.Client) PunchCardSupplementServiceHTTPClient {
	return &PunchCardSupplementServiceHTTPClientImpl{client}
}

// ApprovePunchCardSupplement ApprovePunchCardSupplement 批准补卡申请
func (c *PunchCardSupplementServiceHTTPClientImpl) ApprovePunchCardSupplement(ctx context.Context, in *ApprovePunchCardSupplementRequest, opts ...http.CallOption) (*ApprovePunchCardSupplementResponse, error) {
	var out ApprovePunchCardSupplementResponse
	pattern := "/api/v1/hrm/punch-card-supplements/{supplement_id}/approve"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationPunchCardSupplementServiceApprovePunchCardSupplement))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

// CancelPunchCardSupplement CancelPunchCardSupplement 取消补卡申请
func (c *PunchCardSupplementServiceHTTPClientImpl) CancelPunchCardSupplement(ctx context.Context, in *CancelPunchCardSupplementRequest, opts ...http.CallOption) (*CancelPunchCardSupplementResponse, error) {
	var out CancelPunchCardSupplementResponse
	pattern := "/api/v1/hrm/punch-card-supplements/{supplement_id}/cancel"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationPunchCardSupplementServiceCancelPunchCardSupplement))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

// CreatePunchCardSupplement CreatePunchCardSupplement 创建补卡申请
func (c *PunchCardSupplementServiceHTTPClientImpl) CreatePunchCardSupplement(ctx context.Context, in *CreatePunchCardSupplementRequest, opts ...http.CallOption) (*PunchCardSupplementResponse, error) {
	var out PunchCardSupplementResponse
	pattern := "/api/v1/hrm/punch-card-supplements"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationPunchCardSupplementServiceCreatePunchCardSupplement))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

// DeletePunchCardSupplement DeletePunchCardSupplement 删除补卡申请
func (c *PunchCardSupplementServiceHTTPClientImpl) DeletePunchCardSupplement(ctx context.Context, in *DeletePunchCardSupplementRequest, opts ...http.CallOption) (*DeletePunchCardSupplementResponse, error) {
	var out DeletePunchCardSupplementResponse
	pattern := "/api/v1/hrm/punch-card-supplements/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationPunchCardSupplementServiceDeletePunchCardSupplement))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

// GetPunchCardSupplement GetPunchCardSupplement 获取补卡申请详情
func (c *PunchCardSupplementServiceHTTPClientImpl) GetPunchCardSupplement(ctx context.Context, in *GetPunchCardSupplementRequest, opts ...http.CallOption) (*PunchCardSupplementResponse, error) {
	var out PunchCardSupplementResponse
	pattern := "/api/v1/hrm/punch-card-supplements/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationPunchCardSupplementServiceGetPunchCardSupplement))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

// ListEmployeePunchCardSupplements ListEmployeePunchCardSupplements 查询员工补卡申请记录
func (c *PunchCardSupplementServiceHTTPClientImpl) ListEmployeePunchCardSupplements(ctx context.Context, in *ListEmployeePunchCardSupplementsRequest, opts ...http.CallOption) (*ListPunchCardSupplementsResponse, error) {
	var out ListPunchCardSupplementsResponse
	pattern := "/api/v1/hrm/employees/{employee_id}/punch-card-supplements"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationPunchCardSupplementServiceListEmployeePunchCardSupplements))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

// ListPendingPunchCardSupplements ListPendingPunchCardSupplements 查询待审批的补卡申请
func (c *PunchCardSupplementServiceHTTPClientImpl) ListPendingPunchCardSupplements(ctx context.Context, in *ListPendingPunchCardSupplementsRequest, opts ...http.CallOption) (*ListPunchCardSupplementsResponse, error) {
	var out ListPunchCardSupplementsResponse
	pattern := "/api/v1/hrm/punch-card-supplements/pending"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationPunchCardSupplementServiceListPendingPunchCardSupplements))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

// ListPunchCardSupplements ListPunchCardSupplements 列表查询补卡申请
func (c *PunchCardSupplementServiceHTTPClientImpl) ListPunchCardSupplements(ctx context.Context, in *ListPunchCardSupplementsRequest, opts ...http.CallOption) (*ListPunchCardSupplementsResponse, error) {
	var out ListPunchCardSupplementsResponse
	pattern := "/api/v1/hrm/punch-card-supplements"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationPunchCardSupplementServiceListPunchCardSupplements))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

// ProcessPunchCardSupplement ProcessPunchCardSupplement 处理补卡（生成补卡记录）
func (c *PunchCardSupplementServiceHTTPClientImpl) ProcessPunchCardSupplement(ctx context.Context, in *ProcessPunchCardSupplementRequest, opts ...http.CallOption) (*ProcessPunchCardSupplementResponse, error) {
	var out ProcessPunchCardSupplementResponse
	pattern := "/api/v1/hrm/punch-card-supplements/{supplement_id}/process"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationPunchCardSupplementServiceProcessPunchCardSupplement))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

// RejectPunchCardSupplement RejectPunchCardSupplement 拒绝补卡申请
func (c *PunchCardSupplementServiceHTTPClientImpl) RejectPunchCardSupplement(ctx context.Context, in *RejectPunchCardSupplementRequest, opts ...http.CallOption) (*RejectPunchCardSupplementResponse, error) {
	var out RejectPunchCardSupplementResponse
	pattern := "/api/v1/hrm/punch-card-supplements/{supplement_id}/reject"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationPunchCardSupplementServiceRejectPunchCardSupplement))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

// SubmitPunchCardSupplement SubmitPunchCardSupplement 提交补卡申请审批
func (c *PunchCardSupplementServiceHTTPClientImpl) SubmitPunchCardSupplement(ctx context.Context, in *SubmitPunchCardSupplementRequest, opts ...http.CallOption) (*SubmitPunchCardSupplementResponse, error) {
	var out SubmitPunchCardSupplementResponse
	pattern := "/api/v1/hrm/punch-card-supplements/{supplement_id}/submit"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationPunchCardSupplementServiceSubmitPunchCardSupplement))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

// UpdatePunchCardSupplement UpdatePunchCardSupplement 更新补卡申请
func (c *PunchCardSupplementServiceHTTPClientImpl) UpdatePunchCardSupplement(ctx context.Context, in *UpdatePunchCardSupplementRequest, opts ...http.CallOption) (*PunchCardSupplementResponse, error) {
	var out PunchCardSupplementResponse
	pattern := "/api/v1/hrm/punch-card-supplements/{id}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationPunchCardSupplementServiceUpdatePunchCardSupplement))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
