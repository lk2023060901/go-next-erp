// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: api/hrm/v1/leave.proto

package hrmv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// LeaveTypeServiceClient is the client API for LeaveTypeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LeaveTypeServiceClient interface {
	// 创建请假类型
	CreateLeaveType(ctx context.Context, in *CreateLeaveTypeRequest, opts ...grpc.CallOption) (*LeaveTypeResponse, error)
	// 更新请假类型
	UpdateLeaveType(ctx context.Context, in *UpdateLeaveTypeRequest, opts ...grpc.CallOption) (*LeaveTypeResponse, error)
	// 删除请假类型
	DeleteLeaveType(ctx context.Context, in *DeleteLeaveTypeRequest, opts ...grpc.CallOption) (*DeleteLeaveTypeResponse, error)
	// 获取请假类型详情
	GetLeaveType(ctx context.Context, in *GetLeaveTypeRequest, opts ...grpc.CallOption) (*LeaveTypeResponse, error)
	// 列表查询请假类型
	ListLeaveTypes(ctx context.Context, in *ListLeaveTypesRequest, opts ...grpc.CallOption) (*ListLeaveTypesResponse, error)
	// 获取启用的请假类型
	ListActiveLeaveTypes(ctx context.Context, in *ListActiveLeaveTypesRequest, opts ...grpc.CallOption) (*ListActiveLeaveTypesResponse, error)
}

type leaveTypeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLeaveTypeServiceClient(cc grpc.ClientConnInterface) LeaveTypeServiceClient {
	return &leaveTypeServiceClient{cc}
}

func (c *leaveTypeServiceClient) CreateLeaveType(ctx context.Context, in *CreateLeaveTypeRequest, opts ...grpc.CallOption) (*LeaveTypeResponse, error) {
	out := new(LeaveTypeResponse)
	err := c.cc.Invoke(ctx, "/api.hrm.v1.LeaveTypeService/CreateLeaveType", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *leaveTypeServiceClient) UpdateLeaveType(ctx context.Context, in *UpdateLeaveTypeRequest, opts ...grpc.CallOption) (*LeaveTypeResponse, error) {
	out := new(LeaveTypeResponse)
	err := c.cc.Invoke(ctx, "/api.hrm.v1.LeaveTypeService/UpdateLeaveType", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *leaveTypeServiceClient) DeleteLeaveType(ctx context.Context, in *DeleteLeaveTypeRequest, opts ...grpc.CallOption) (*DeleteLeaveTypeResponse, error) {
	out := new(DeleteLeaveTypeResponse)
	err := c.cc.Invoke(ctx, "/api.hrm.v1.LeaveTypeService/DeleteLeaveType", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *leaveTypeServiceClient) GetLeaveType(ctx context.Context, in *GetLeaveTypeRequest, opts ...grpc.CallOption) (*LeaveTypeResponse, error) {
	out := new(LeaveTypeResponse)
	err := c.cc.Invoke(ctx, "/api.hrm.v1.LeaveTypeService/GetLeaveType", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *leaveTypeServiceClient) ListLeaveTypes(ctx context.Context, in *ListLeaveTypesRequest, opts ...grpc.CallOption) (*ListLeaveTypesResponse, error) {
	out := new(ListLeaveTypesResponse)
	err := c.cc.Invoke(ctx, "/api.hrm.v1.LeaveTypeService/ListLeaveTypes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *leaveTypeServiceClient) ListActiveLeaveTypes(ctx context.Context, in *ListActiveLeaveTypesRequest, opts ...grpc.CallOption) (*ListActiveLeaveTypesResponse, error) {
	out := new(ListActiveLeaveTypesResponse)
	err := c.cc.Invoke(ctx, "/api.hrm.v1.LeaveTypeService/ListActiveLeaveTypes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LeaveTypeServiceServer is the server API for LeaveTypeService service.
// All implementations should embed UnimplementedLeaveTypeServiceServer
// for forward compatibility
type LeaveTypeServiceServer interface {
	// 创建请假类型
	CreateLeaveType(context.Context, *CreateLeaveTypeRequest) (*LeaveTypeResponse, error)
	// 更新请假类型
	UpdateLeaveType(context.Context, *UpdateLeaveTypeRequest) (*LeaveTypeResponse, error)
	// 删除请假类型
	DeleteLeaveType(context.Context, *DeleteLeaveTypeRequest) (*DeleteLeaveTypeResponse, error)
	// 获取请假类型详情
	GetLeaveType(context.Context, *GetLeaveTypeRequest) (*LeaveTypeResponse, error)
	// 列表查询请假类型
	ListLeaveTypes(context.Context, *ListLeaveTypesRequest) (*ListLeaveTypesResponse, error)
	// 获取启用的请假类型
	ListActiveLeaveTypes(context.Context, *ListActiveLeaveTypesRequest) (*ListActiveLeaveTypesResponse, error)
}

// UnimplementedLeaveTypeServiceServer should be embedded to have forward compatible implementations.
type UnimplementedLeaveTypeServiceServer struct {
}

func (UnimplementedLeaveTypeServiceServer) CreateLeaveType(context.Context, *CreateLeaveTypeRequest) (*LeaveTypeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateLeaveType not implemented")
}
func (UnimplementedLeaveTypeServiceServer) UpdateLeaveType(context.Context, *UpdateLeaveTypeRequest) (*LeaveTypeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateLeaveType not implemented")
}
func (UnimplementedLeaveTypeServiceServer) DeleteLeaveType(context.Context, *DeleteLeaveTypeRequest) (*DeleteLeaveTypeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteLeaveType not implemented")
}
func (UnimplementedLeaveTypeServiceServer) GetLeaveType(context.Context, *GetLeaveTypeRequest) (*LeaveTypeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLeaveType not implemented")
}
func (UnimplementedLeaveTypeServiceServer) ListLeaveTypes(context.Context, *ListLeaveTypesRequest) (*ListLeaveTypesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListLeaveTypes not implemented")
}
func (UnimplementedLeaveTypeServiceServer) ListActiveLeaveTypes(context.Context, *ListActiveLeaveTypesRequest) (*ListActiveLeaveTypesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListActiveLeaveTypes not implemented")
}

// UnsafeLeaveTypeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LeaveTypeServiceServer will
// result in compilation errors.
type UnsafeLeaveTypeServiceServer interface {
	mustEmbedUnimplementedLeaveTypeServiceServer()
}

func RegisterLeaveTypeServiceServer(s grpc.ServiceRegistrar, srv LeaveTypeServiceServer) {
	s.RegisterService(&LeaveTypeService_ServiceDesc, srv)
}

func _LeaveTypeService_CreateLeaveType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateLeaveTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LeaveTypeServiceServer).CreateLeaveType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.hrm.v1.LeaveTypeService/CreateLeaveType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LeaveTypeServiceServer).CreateLeaveType(ctx, req.(*CreateLeaveTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LeaveTypeService_UpdateLeaveType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateLeaveTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LeaveTypeServiceServer).UpdateLeaveType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.hrm.v1.LeaveTypeService/UpdateLeaveType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LeaveTypeServiceServer).UpdateLeaveType(ctx, req.(*UpdateLeaveTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LeaveTypeService_DeleteLeaveType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteLeaveTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LeaveTypeServiceServer).DeleteLeaveType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.hrm.v1.LeaveTypeService/DeleteLeaveType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LeaveTypeServiceServer).DeleteLeaveType(ctx, req.(*DeleteLeaveTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LeaveTypeService_GetLeaveType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLeaveTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LeaveTypeServiceServer).GetLeaveType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.hrm.v1.LeaveTypeService/GetLeaveType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LeaveTypeServiceServer).GetLeaveType(ctx, req.(*GetLeaveTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LeaveTypeService_ListLeaveTypes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListLeaveTypesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LeaveTypeServiceServer).ListLeaveTypes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.hrm.v1.LeaveTypeService/ListLeaveTypes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LeaveTypeServiceServer).ListLeaveTypes(ctx, req.(*ListLeaveTypesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LeaveTypeService_ListActiveLeaveTypes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListActiveLeaveTypesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LeaveTypeServiceServer).ListActiveLeaveTypes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.hrm.v1.LeaveTypeService/ListActiveLeaveTypes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LeaveTypeServiceServer).ListActiveLeaveTypes(ctx, req.(*ListActiveLeaveTypesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LeaveTypeService_ServiceDesc is the grpc.ServiceDesc for LeaveTypeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LeaveTypeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.hrm.v1.LeaveTypeService",
	HandlerType: (*LeaveTypeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateLeaveType",
			Handler:    _LeaveTypeService_CreateLeaveType_Handler,
		},
		{
			MethodName: "UpdateLeaveType",
			Handler:    _LeaveTypeService_UpdateLeaveType_Handler,
		},
		{
			MethodName: "DeleteLeaveType",
			Handler:    _LeaveTypeService_DeleteLeaveType_Handler,
		},
		{
			MethodName: "GetLeaveType",
			Handler:    _LeaveTypeService_GetLeaveType_Handler,
		},
		{
			MethodName: "ListLeaveTypes",
			Handler:    _LeaveTypeService_ListLeaveTypes_Handler,
		},
		{
			MethodName: "ListActiveLeaveTypes",
			Handler:    _LeaveTypeService_ListActiveLeaveTypes_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/hrm/v1/leave.proto",
}

// LeaveRequestServiceClient is the client API for LeaveRequestService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LeaveRequestServiceClient interface {
	// 创建请假申请
	CreateLeaveRequest(ctx context.Context, in *CreateLeaveRequestRequest, opts ...grpc.CallOption) (*LeaveRequestResponse, error)
	// 更新请假申请
	UpdateLeaveRequest(ctx context.Context, in *UpdateLeaveRequestRequest, opts ...grpc.CallOption) (*LeaveRequestResponse, error)
	// 提交请假申请
	SubmitLeaveRequest(ctx context.Context, in *SubmitLeaveRequestRequest, opts ...grpc.CallOption) (*SubmitLeaveRequestResponse, error)
	// 撤回请假申请
	WithdrawLeaveRequest(ctx context.Context, in *WithdrawLeaveRequestRequest, opts ...grpc.CallOption) (*WithdrawLeaveRequestResponse, error)
	// 取消请假
	CancelLeaveRequest(ctx context.Context, in *CancelLeaveRequestRequest, opts ...grpc.CallOption) (*CancelLeaveRequestResponse, error)
	// 获取请假详情
	GetLeaveRequest(ctx context.Context, in *GetLeaveRequestRequest, opts ...grpc.CallOption) (*LeaveRequestDetailResponse, error)
	// 查询我的请假记录
	ListMyLeaveRequests(ctx context.Context, in *ListMyLeaveRequestsRequest, opts ...grpc.CallOption) (*ListLeaveRequestsResponse, error)
	// 查询请假记录（管理员）
	ListLeaveRequests(ctx context.Context, in *ListLeaveRequestsRequest, opts ...grpc.CallOption) (*ListLeaveRequestsResponse, error)
	// 查询待我审批的请假
	ListPendingApprovals(ctx context.Context, in *ListPendingApprovalsRequest, opts ...grpc.CallOption) (*ListLeaveRequestsResponse, error)
	// 批准请假
	ApproveLeaveRequest(ctx context.Context, in *ApproveLeaveRequestRequest, opts ...grpc.CallOption) (*ApproveLeaveRequestResponse, error)
	// 拒绝请假
	RejectLeaveRequest(ctx context.Context, in *RejectLeaveRequestRequest, opts ...grpc.CallOption) (*RejectLeaveRequestResponse, error)
}

type leaveRequestServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLeaveRequestServiceClient(cc grpc.ClientConnInterface) LeaveRequestServiceClient {
	return &leaveRequestServiceClient{cc}
}

func (c *leaveRequestServiceClient) CreateLeaveRequest(ctx context.Context, in *CreateLeaveRequestRequest, opts ...grpc.CallOption) (*LeaveRequestResponse, error) {
	out := new(LeaveRequestResponse)
	err := c.cc.Invoke(ctx, "/api.hrm.v1.LeaveRequestService/CreateLeaveRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *leaveRequestServiceClient) UpdateLeaveRequest(ctx context.Context, in *UpdateLeaveRequestRequest, opts ...grpc.CallOption) (*LeaveRequestResponse, error) {
	out := new(LeaveRequestResponse)
	err := c.cc.Invoke(ctx, "/api.hrm.v1.LeaveRequestService/UpdateLeaveRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *leaveRequestServiceClient) SubmitLeaveRequest(ctx context.Context, in *SubmitLeaveRequestRequest, opts ...grpc.CallOption) (*SubmitLeaveRequestResponse, error) {
	out := new(SubmitLeaveRequestResponse)
	err := c.cc.Invoke(ctx, "/api.hrm.v1.LeaveRequestService/SubmitLeaveRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *leaveRequestServiceClient) WithdrawLeaveRequest(ctx context.Context, in *WithdrawLeaveRequestRequest, opts ...grpc.CallOption) (*WithdrawLeaveRequestResponse, error) {
	out := new(WithdrawLeaveRequestResponse)
	err := c.cc.Invoke(ctx, "/api.hrm.v1.LeaveRequestService/WithdrawLeaveRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *leaveRequestServiceClient) CancelLeaveRequest(ctx context.Context, in *CancelLeaveRequestRequest, opts ...grpc.CallOption) (*CancelLeaveRequestResponse, error) {
	out := new(CancelLeaveRequestResponse)
	err := c.cc.Invoke(ctx, "/api.hrm.v1.LeaveRequestService/CancelLeaveRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *leaveRequestServiceClient) GetLeaveRequest(ctx context.Context, in *GetLeaveRequestRequest, opts ...grpc.CallOption) (*LeaveRequestDetailResponse, error) {
	out := new(LeaveRequestDetailResponse)
	err := c.cc.Invoke(ctx, "/api.hrm.v1.LeaveRequestService/GetLeaveRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *leaveRequestServiceClient) ListMyLeaveRequests(ctx context.Context, in *ListMyLeaveRequestsRequest, opts ...grpc.CallOption) (*ListLeaveRequestsResponse, error) {
	out := new(ListLeaveRequestsResponse)
	err := c.cc.Invoke(ctx, "/api.hrm.v1.LeaveRequestService/ListMyLeaveRequests", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *leaveRequestServiceClient) ListLeaveRequests(ctx context.Context, in *ListLeaveRequestsRequest, opts ...grpc.CallOption) (*ListLeaveRequestsResponse, error) {
	out := new(ListLeaveRequestsResponse)
	err := c.cc.Invoke(ctx, "/api.hrm.v1.LeaveRequestService/ListLeaveRequests", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *leaveRequestServiceClient) ListPendingApprovals(ctx context.Context, in *ListPendingApprovalsRequest, opts ...grpc.CallOption) (*ListLeaveRequestsResponse, error) {
	out := new(ListLeaveRequestsResponse)
	err := c.cc.Invoke(ctx, "/api.hrm.v1.LeaveRequestService/ListPendingApprovals", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *leaveRequestServiceClient) ApproveLeaveRequest(ctx context.Context, in *ApproveLeaveRequestRequest, opts ...grpc.CallOption) (*ApproveLeaveRequestResponse, error) {
	out := new(ApproveLeaveRequestResponse)
	err := c.cc.Invoke(ctx, "/api.hrm.v1.LeaveRequestService/ApproveLeaveRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *leaveRequestServiceClient) RejectLeaveRequest(ctx context.Context, in *RejectLeaveRequestRequest, opts ...grpc.CallOption) (*RejectLeaveRequestResponse, error) {
	out := new(RejectLeaveRequestResponse)
	err := c.cc.Invoke(ctx, "/api.hrm.v1.LeaveRequestService/RejectLeaveRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LeaveRequestServiceServer is the server API for LeaveRequestService service.
// All implementations should embed UnimplementedLeaveRequestServiceServer
// for forward compatibility
type LeaveRequestServiceServer interface {
	// 创建请假申请
	CreateLeaveRequest(context.Context, *CreateLeaveRequestRequest) (*LeaveRequestResponse, error)
	// 更新请假申请
	UpdateLeaveRequest(context.Context, *UpdateLeaveRequestRequest) (*LeaveRequestResponse, error)
	// 提交请假申请
	SubmitLeaveRequest(context.Context, *SubmitLeaveRequestRequest) (*SubmitLeaveRequestResponse, error)
	// 撤回请假申请
	WithdrawLeaveRequest(context.Context, *WithdrawLeaveRequestRequest) (*WithdrawLeaveRequestResponse, error)
	// 取消请假
	CancelLeaveRequest(context.Context, *CancelLeaveRequestRequest) (*CancelLeaveRequestResponse, error)
	// 获取请假详情
	GetLeaveRequest(context.Context, *GetLeaveRequestRequest) (*LeaveRequestDetailResponse, error)
	// 查询我的请假记录
	ListMyLeaveRequests(context.Context, *ListMyLeaveRequestsRequest) (*ListLeaveRequestsResponse, error)
	// 查询请假记录（管理员）
	ListLeaveRequests(context.Context, *ListLeaveRequestsRequest) (*ListLeaveRequestsResponse, error)
	// 查询待我审批的请假
	ListPendingApprovals(context.Context, *ListPendingApprovalsRequest) (*ListLeaveRequestsResponse, error)
	// 批准请假
	ApproveLeaveRequest(context.Context, *ApproveLeaveRequestRequest) (*ApproveLeaveRequestResponse, error)
	// 拒绝请假
	RejectLeaveRequest(context.Context, *RejectLeaveRequestRequest) (*RejectLeaveRequestResponse, error)
}

// UnimplementedLeaveRequestServiceServer should be embedded to have forward compatible implementations.
type UnimplementedLeaveRequestServiceServer struct {
}

func (UnimplementedLeaveRequestServiceServer) CreateLeaveRequest(context.Context, *CreateLeaveRequestRequest) (*LeaveRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateLeaveRequest not implemented")
}
func (UnimplementedLeaveRequestServiceServer) UpdateLeaveRequest(context.Context, *UpdateLeaveRequestRequest) (*LeaveRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateLeaveRequest not implemented")
}
func (UnimplementedLeaveRequestServiceServer) SubmitLeaveRequest(context.Context, *SubmitLeaveRequestRequest) (*SubmitLeaveRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitLeaveRequest not implemented")
}
func (UnimplementedLeaveRequestServiceServer) WithdrawLeaveRequest(context.Context, *WithdrawLeaveRequestRequest) (*WithdrawLeaveRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WithdrawLeaveRequest not implemented")
}
func (UnimplementedLeaveRequestServiceServer) CancelLeaveRequest(context.Context, *CancelLeaveRequestRequest) (*CancelLeaveRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelLeaveRequest not implemented")
}
func (UnimplementedLeaveRequestServiceServer) GetLeaveRequest(context.Context, *GetLeaveRequestRequest) (*LeaveRequestDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLeaveRequest not implemented")
}
func (UnimplementedLeaveRequestServiceServer) ListMyLeaveRequests(context.Context, *ListMyLeaveRequestsRequest) (*ListLeaveRequestsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMyLeaveRequests not implemented")
}
func (UnimplementedLeaveRequestServiceServer) ListLeaveRequests(context.Context, *ListLeaveRequestsRequest) (*ListLeaveRequestsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListLeaveRequests not implemented")
}
func (UnimplementedLeaveRequestServiceServer) ListPendingApprovals(context.Context, *ListPendingApprovalsRequest) (*ListLeaveRequestsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPendingApprovals not implemented")
}
func (UnimplementedLeaveRequestServiceServer) ApproveLeaveRequest(context.Context, *ApproveLeaveRequestRequest) (*ApproveLeaveRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApproveLeaveRequest not implemented")
}
func (UnimplementedLeaveRequestServiceServer) RejectLeaveRequest(context.Context, *RejectLeaveRequestRequest) (*RejectLeaveRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RejectLeaveRequest not implemented")
}

// UnsafeLeaveRequestServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LeaveRequestServiceServer will
// result in compilation errors.
type UnsafeLeaveRequestServiceServer interface {
	mustEmbedUnimplementedLeaveRequestServiceServer()
}

func RegisterLeaveRequestServiceServer(s grpc.ServiceRegistrar, srv LeaveRequestServiceServer) {
	s.RegisterService(&LeaveRequestService_ServiceDesc, srv)
}

func _LeaveRequestService_CreateLeaveRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateLeaveRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LeaveRequestServiceServer).CreateLeaveRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.hrm.v1.LeaveRequestService/CreateLeaveRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LeaveRequestServiceServer).CreateLeaveRequest(ctx, req.(*CreateLeaveRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LeaveRequestService_UpdateLeaveRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateLeaveRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LeaveRequestServiceServer).UpdateLeaveRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.hrm.v1.LeaveRequestService/UpdateLeaveRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LeaveRequestServiceServer).UpdateLeaveRequest(ctx, req.(*UpdateLeaveRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LeaveRequestService_SubmitLeaveRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubmitLeaveRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LeaveRequestServiceServer).SubmitLeaveRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.hrm.v1.LeaveRequestService/SubmitLeaveRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LeaveRequestServiceServer).SubmitLeaveRequest(ctx, req.(*SubmitLeaveRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LeaveRequestService_WithdrawLeaveRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WithdrawLeaveRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LeaveRequestServiceServer).WithdrawLeaveRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.hrm.v1.LeaveRequestService/WithdrawLeaveRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LeaveRequestServiceServer).WithdrawLeaveRequest(ctx, req.(*WithdrawLeaveRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LeaveRequestService_CancelLeaveRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelLeaveRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LeaveRequestServiceServer).CancelLeaveRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.hrm.v1.LeaveRequestService/CancelLeaveRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LeaveRequestServiceServer).CancelLeaveRequest(ctx, req.(*CancelLeaveRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LeaveRequestService_GetLeaveRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLeaveRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LeaveRequestServiceServer).GetLeaveRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.hrm.v1.LeaveRequestService/GetLeaveRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LeaveRequestServiceServer).GetLeaveRequest(ctx, req.(*GetLeaveRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LeaveRequestService_ListMyLeaveRequests_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMyLeaveRequestsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LeaveRequestServiceServer).ListMyLeaveRequests(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.hrm.v1.LeaveRequestService/ListMyLeaveRequests",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LeaveRequestServiceServer).ListMyLeaveRequests(ctx, req.(*ListMyLeaveRequestsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LeaveRequestService_ListLeaveRequests_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListLeaveRequestsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LeaveRequestServiceServer).ListLeaveRequests(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.hrm.v1.LeaveRequestService/ListLeaveRequests",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LeaveRequestServiceServer).ListLeaveRequests(ctx, req.(*ListLeaveRequestsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LeaveRequestService_ListPendingApprovals_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPendingApprovalsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LeaveRequestServiceServer).ListPendingApprovals(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.hrm.v1.LeaveRequestService/ListPendingApprovals",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LeaveRequestServiceServer).ListPendingApprovals(ctx, req.(*ListPendingApprovalsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LeaveRequestService_ApproveLeaveRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApproveLeaveRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LeaveRequestServiceServer).ApproveLeaveRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.hrm.v1.LeaveRequestService/ApproveLeaveRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LeaveRequestServiceServer).ApproveLeaveRequest(ctx, req.(*ApproveLeaveRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LeaveRequestService_RejectLeaveRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RejectLeaveRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LeaveRequestServiceServer).RejectLeaveRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.hrm.v1.LeaveRequestService/RejectLeaveRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LeaveRequestServiceServer).RejectLeaveRequest(ctx, req.(*RejectLeaveRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LeaveRequestService_ServiceDesc is the grpc.ServiceDesc for LeaveRequestService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LeaveRequestService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.hrm.v1.LeaveRequestService",
	HandlerType: (*LeaveRequestServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateLeaveRequest",
			Handler:    _LeaveRequestService_CreateLeaveRequest_Handler,
		},
		{
			MethodName: "UpdateLeaveRequest",
			Handler:    _LeaveRequestService_UpdateLeaveRequest_Handler,
		},
		{
			MethodName: "SubmitLeaveRequest",
			Handler:    _LeaveRequestService_SubmitLeaveRequest_Handler,
		},
		{
			MethodName: "WithdrawLeaveRequest",
			Handler:    _LeaveRequestService_WithdrawLeaveRequest_Handler,
		},
		{
			MethodName: "CancelLeaveRequest",
			Handler:    _LeaveRequestService_CancelLeaveRequest_Handler,
		},
		{
			MethodName: "GetLeaveRequest",
			Handler:    _LeaveRequestService_GetLeaveRequest_Handler,
		},
		{
			MethodName: "ListMyLeaveRequests",
			Handler:    _LeaveRequestService_ListMyLeaveRequests_Handler,
		},
		{
			MethodName: "ListLeaveRequests",
			Handler:    _LeaveRequestService_ListLeaveRequests_Handler,
		},
		{
			MethodName: "ListPendingApprovals",
			Handler:    _LeaveRequestService_ListPendingApprovals_Handler,
		},
		{
			MethodName: "ApproveLeaveRequest",
			Handler:    _LeaveRequestService_ApproveLeaveRequest_Handler,
		},
		{
			MethodName: "RejectLeaveRequest",
			Handler:    _LeaveRequestService_RejectLeaveRequest_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/hrm/v1/leave.proto",
}

// LeaveQuotaServiceClient is the client API for LeaveQuotaService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LeaveQuotaServiceClient interface {
	// 初始化员工额度
	InitEmployeeQuota(ctx context.Context, in *InitEmployeeQuotaRequest, opts ...grpc.CallOption) (*InitEmployeeQuotaResponse, error)
	// 更新额度
	UpdateQuota(ctx context.Context, in *UpdateQuotaRequest, opts ...grpc.CallOption) (*QuotaResponse, error)
	// 获取员工额度
	GetEmployeeQuotas(ctx context.Context, in *GetEmployeeQuotasRequest, opts ...grpc.CallOption) (*GetEmployeeQuotasResponse, error)
}

type leaveQuotaServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLeaveQuotaServiceClient(cc grpc.ClientConnInterface) LeaveQuotaServiceClient {
	return &leaveQuotaServiceClient{cc}
}

func (c *leaveQuotaServiceClient) InitEmployeeQuota(ctx context.Context, in *InitEmployeeQuotaRequest, opts ...grpc.CallOption) (*InitEmployeeQuotaResponse, error) {
	out := new(InitEmployeeQuotaResponse)
	err := c.cc.Invoke(ctx, "/api.hrm.v1.LeaveQuotaService/InitEmployeeQuota", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *leaveQuotaServiceClient) UpdateQuota(ctx context.Context, in *UpdateQuotaRequest, opts ...grpc.CallOption) (*QuotaResponse, error) {
	out := new(QuotaResponse)
	err := c.cc.Invoke(ctx, "/api.hrm.v1.LeaveQuotaService/UpdateQuota", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *leaveQuotaServiceClient) GetEmployeeQuotas(ctx context.Context, in *GetEmployeeQuotasRequest, opts ...grpc.CallOption) (*GetEmployeeQuotasResponse, error) {
	out := new(GetEmployeeQuotasResponse)
	err := c.cc.Invoke(ctx, "/api.hrm.v1.LeaveQuotaService/GetEmployeeQuotas", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LeaveQuotaServiceServer is the server API for LeaveQuotaService service.
// All implementations should embed UnimplementedLeaveQuotaServiceServer
// for forward compatibility
type LeaveQuotaServiceServer interface {
	// 初始化员工额度
	InitEmployeeQuota(context.Context, *InitEmployeeQuotaRequest) (*InitEmployeeQuotaResponse, error)
	// 更新额度
	UpdateQuota(context.Context, *UpdateQuotaRequest) (*QuotaResponse, error)
	// 获取员工额度
	GetEmployeeQuotas(context.Context, *GetEmployeeQuotasRequest) (*GetEmployeeQuotasResponse, error)
}

// UnimplementedLeaveQuotaServiceServer should be embedded to have forward compatible implementations.
type UnimplementedLeaveQuotaServiceServer struct {
}

func (UnimplementedLeaveQuotaServiceServer) InitEmployeeQuota(context.Context, *InitEmployeeQuotaRequest) (*InitEmployeeQuotaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InitEmployeeQuota not implemented")
}
func (UnimplementedLeaveQuotaServiceServer) UpdateQuota(context.Context, *UpdateQuotaRequest) (*QuotaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateQuota not implemented")
}
func (UnimplementedLeaveQuotaServiceServer) GetEmployeeQuotas(context.Context, *GetEmployeeQuotasRequest) (*GetEmployeeQuotasResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEmployeeQuotas not implemented")
}

// UnsafeLeaveQuotaServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LeaveQuotaServiceServer will
// result in compilation errors.
type UnsafeLeaveQuotaServiceServer interface {
	mustEmbedUnimplementedLeaveQuotaServiceServer()
}

func RegisterLeaveQuotaServiceServer(s grpc.ServiceRegistrar, srv LeaveQuotaServiceServer) {
	s.RegisterService(&LeaveQuotaService_ServiceDesc, srv)
}

func _LeaveQuotaService_InitEmployeeQuota_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InitEmployeeQuotaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LeaveQuotaServiceServer).InitEmployeeQuota(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.hrm.v1.LeaveQuotaService/InitEmployeeQuota",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LeaveQuotaServiceServer).InitEmployeeQuota(ctx, req.(*InitEmployeeQuotaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LeaveQuotaService_UpdateQuota_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateQuotaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LeaveQuotaServiceServer).UpdateQuota(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.hrm.v1.LeaveQuotaService/UpdateQuota",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LeaveQuotaServiceServer).UpdateQuota(ctx, req.(*UpdateQuotaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LeaveQuotaService_GetEmployeeQuotas_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEmployeeQuotasRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LeaveQuotaServiceServer).GetEmployeeQuotas(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.hrm.v1.LeaveQuotaService/GetEmployeeQuotas",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LeaveQuotaServiceServer).GetEmployeeQuotas(ctx, req.(*GetEmployeeQuotasRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LeaveQuotaService_ServiceDesc is the grpc.ServiceDesc for LeaveQuotaService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LeaveQuotaService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.hrm.v1.LeaveQuotaService",
	HandlerType: (*LeaveQuotaServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "InitEmployeeQuota",
			Handler:    _LeaveQuotaService_InitEmployeeQuota_Handler,
		},
		{
			MethodName: "UpdateQuota",
			Handler:    _LeaveQuotaService_UpdateQuota_Handler,
		},
		{
			MethodName: "GetEmployeeQuotas",
			Handler:    _LeaveQuotaService_GetEmployeeQuotas_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/hrm/v1/leave.proto",
}
