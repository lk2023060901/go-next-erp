// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.9.0
// - protoc             (unknown)
// source: api/hrm/v1/business_trip.proto

package hrmv1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationBusinessTripServiceApproveBusinessTrip = "/api.hrm.v1.BusinessTripService/ApproveBusinessTrip"
const OperationBusinessTripServiceCreateBusinessTrip = "/api.hrm.v1.BusinessTripService/CreateBusinessTrip"
const OperationBusinessTripServiceDeleteBusinessTrip = "/api.hrm.v1.BusinessTripService/DeleteBusinessTrip"
const OperationBusinessTripServiceGetBusinessTrip = "/api.hrm.v1.BusinessTripService/GetBusinessTrip"
const OperationBusinessTripServiceListBusinessTrips = "/api.hrm.v1.BusinessTripService/ListBusinessTrips"
const OperationBusinessTripServiceListEmployeeBusinessTrips = "/api.hrm.v1.BusinessTripService/ListEmployeeBusinessTrips"
const OperationBusinessTripServiceListPendingBusinessTrips = "/api.hrm.v1.BusinessTripService/ListPendingBusinessTrips"
const OperationBusinessTripServiceRejectBusinessTrip = "/api.hrm.v1.BusinessTripService/RejectBusinessTrip"
const OperationBusinessTripServiceSubmitBusinessTrip = "/api.hrm.v1.BusinessTripService/SubmitBusinessTrip"
const OperationBusinessTripServiceSubmitTripReport = "/api.hrm.v1.BusinessTripService/SubmitTripReport"
const OperationBusinessTripServiceUpdateBusinessTrip = "/api.hrm.v1.BusinessTripService/UpdateBusinessTrip"

type BusinessTripServiceHTTPServer interface {
	// ApproveBusinessTrip 批准出差
	ApproveBusinessTrip(context.Context, *ApproveBusinessTripRequest) (*ApproveBusinessTripResponse, error)
	// CreateBusinessTrip 创建出差申请
	CreateBusinessTrip(context.Context, *CreateBusinessTripRequest) (*BusinessTripResponse, error)
	// DeleteBusinessTrip 删除出差申请
	DeleteBusinessTrip(context.Context, *DeleteBusinessTripRequest) (*DeleteBusinessTripResponse, error)
	// GetBusinessTrip 获取出差详情
	GetBusinessTrip(context.Context, *GetBusinessTripRequest) (*BusinessTripResponse, error)
	// ListBusinessTrips 列表查询出差记录
	ListBusinessTrips(context.Context, *ListBusinessTripsRequest) (*ListBusinessTripsResponse, error)
	// ListEmployeeBusinessTrips 查询员工出差记录
	ListEmployeeBusinessTrips(context.Context, *ListEmployeeBusinessTripsRequest) (*ListBusinessTripsResponse, error)
	// ListPendingBusinessTrips 查询待审批的出差
	ListPendingBusinessTrips(context.Context, *ListPendingBusinessTripsRequest) (*ListBusinessTripsResponse, error)
	// RejectBusinessTrip 拒绝出差
	RejectBusinessTrip(context.Context, *RejectBusinessTripRequest) (*RejectBusinessTripResponse, error)
	// SubmitBusinessTrip 提交出差审批
	SubmitBusinessTrip(context.Context, *SubmitBusinessTripRequest) (*SubmitBusinessTripResponse, error)
	// SubmitTripReport 提交出差报告
	SubmitTripReport(context.Context, *SubmitTripReportRequest) (*BusinessTripResponse, error)
	// UpdateBusinessTrip 更新出差申请
	UpdateBusinessTrip(context.Context, *UpdateBusinessTripRequest) (*BusinessTripResponse, error)
}

func RegisterBusinessTripServiceHTTPServer(s *http.Server, srv BusinessTripServiceHTTPServer) {
	r := s.Route("/")
	r.POST("/api/v1/hrm/business-trips", _BusinessTripService_CreateBusinessTrip0_HTTP_Handler(srv))
	r.PUT("/api/v1/hrm/business-trips/{id}", _BusinessTripService_UpdateBusinessTrip0_HTTP_Handler(srv))
	r.DELETE("/api/v1/hrm/business-trips/{id}", _BusinessTripService_DeleteBusinessTrip0_HTTP_Handler(srv))
	r.GET("/api/v1/hrm/business-trips/{id}", _BusinessTripService_GetBusinessTrip0_HTTP_Handler(srv))
	r.GET("/api/v1/hrm/business-trips", _BusinessTripService_ListBusinessTrips0_HTTP_Handler(srv))
	r.GET("/api/v1/hrm/employees/{employee_id}/business-trips", _BusinessTripService_ListEmployeeBusinessTrips0_HTTP_Handler(srv))
	r.GET("/api/v1/hrm/business-trips/pending", _BusinessTripService_ListPendingBusinessTrips0_HTTP_Handler(srv))
	r.POST("/api/v1/hrm/business-trips/{business_trip_id}/submit", _BusinessTripService_SubmitBusinessTrip0_HTTP_Handler(srv))
	r.POST("/api/v1/hrm/business-trips/{business_trip_id}/approve", _BusinessTripService_ApproveBusinessTrip0_HTTP_Handler(srv))
	r.POST("/api/v1/hrm/business-trips/{business_trip_id}/reject", _BusinessTripService_RejectBusinessTrip0_HTTP_Handler(srv))
	r.POST("/api/v1/hrm/business-trips/{business_trip_id}/report", _BusinessTripService_SubmitTripReport0_HTTP_Handler(srv))
}

func _BusinessTripService_CreateBusinessTrip0_HTTP_Handler(srv BusinessTripServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateBusinessTripRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBusinessTripServiceCreateBusinessTrip)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateBusinessTrip(ctx, req.(*CreateBusinessTripRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*BusinessTripResponse)
		return ctx.Result(200, reply)
	}
}

func _BusinessTripService_UpdateBusinessTrip0_HTTP_Handler(srv BusinessTripServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateBusinessTripRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBusinessTripServiceUpdateBusinessTrip)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateBusinessTrip(ctx, req.(*UpdateBusinessTripRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*BusinessTripResponse)
		return ctx.Result(200, reply)
	}
}

func _BusinessTripService_DeleteBusinessTrip0_HTTP_Handler(srv BusinessTripServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteBusinessTripRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBusinessTripServiceDeleteBusinessTrip)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteBusinessTrip(ctx, req.(*DeleteBusinessTripRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteBusinessTripResponse)
		return ctx.Result(200, reply)
	}
}

func _BusinessTripService_GetBusinessTrip0_HTTP_Handler(srv BusinessTripServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetBusinessTripRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBusinessTripServiceGetBusinessTrip)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetBusinessTrip(ctx, req.(*GetBusinessTripRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*BusinessTripResponse)
		return ctx.Result(200, reply)
	}
}

func _BusinessTripService_ListBusinessTrips0_HTTP_Handler(srv BusinessTripServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListBusinessTripsRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBusinessTripServiceListBusinessTrips)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListBusinessTrips(ctx, req.(*ListBusinessTripsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListBusinessTripsResponse)
		return ctx.Result(200, reply)
	}
}

func _BusinessTripService_ListEmployeeBusinessTrips0_HTTP_Handler(srv BusinessTripServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListEmployeeBusinessTripsRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBusinessTripServiceListEmployeeBusinessTrips)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListEmployeeBusinessTrips(ctx, req.(*ListEmployeeBusinessTripsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListBusinessTripsResponse)
		return ctx.Result(200, reply)
	}
}

func _BusinessTripService_ListPendingBusinessTrips0_HTTP_Handler(srv BusinessTripServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListPendingBusinessTripsRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBusinessTripServiceListPendingBusinessTrips)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListPendingBusinessTrips(ctx, req.(*ListPendingBusinessTripsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListBusinessTripsResponse)
		return ctx.Result(200, reply)
	}
}

func _BusinessTripService_SubmitBusinessTrip0_HTTP_Handler(srv BusinessTripServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SubmitBusinessTripRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBusinessTripServiceSubmitBusinessTrip)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SubmitBusinessTrip(ctx, req.(*SubmitBusinessTripRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SubmitBusinessTripResponse)
		return ctx.Result(200, reply)
	}
}

func _BusinessTripService_ApproveBusinessTrip0_HTTP_Handler(srv BusinessTripServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ApproveBusinessTripRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBusinessTripServiceApproveBusinessTrip)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ApproveBusinessTrip(ctx, req.(*ApproveBusinessTripRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ApproveBusinessTripResponse)
		return ctx.Result(200, reply)
	}
}

func _BusinessTripService_RejectBusinessTrip0_HTTP_Handler(srv BusinessTripServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in RejectBusinessTripRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBusinessTripServiceRejectBusinessTrip)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.RejectBusinessTrip(ctx, req.(*RejectBusinessTripRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*RejectBusinessTripResponse)
		return ctx.Result(200, reply)
	}
}

func _BusinessTripService_SubmitTripReport0_HTTP_Handler(srv BusinessTripServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SubmitTripReportRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBusinessTripServiceSubmitTripReport)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SubmitTripReport(ctx, req.(*SubmitTripReportRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*BusinessTripResponse)
		return ctx.Result(200, reply)
	}
}

type BusinessTripServiceHTTPClient interface {
	// ApproveBusinessTrip 批准出差
	ApproveBusinessTrip(ctx context.Context, req *ApproveBusinessTripRequest, opts ...http.CallOption) (rsp *ApproveBusinessTripResponse, err error)
	// CreateBusinessTrip 创建出差申请
	CreateBusinessTrip(ctx context.Context, req *CreateBusinessTripRequest, opts ...http.CallOption) (rsp *BusinessTripResponse, err error)
	// DeleteBusinessTrip 删除出差申请
	DeleteBusinessTrip(ctx context.Context, req *DeleteBusinessTripRequest, opts ...http.CallOption) (rsp *DeleteBusinessTripResponse, err error)
	// GetBusinessTrip 获取出差详情
	GetBusinessTrip(ctx context.Context, req *GetBusinessTripRequest, opts ...http.CallOption) (rsp *BusinessTripResponse, err error)
	// ListBusinessTrips 列表查询出差记录
	ListBusinessTrips(ctx context.Context, req *ListBusinessTripsRequest, opts ...http.CallOption) (rsp *ListBusinessTripsResponse, err error)
	// ListEmployeeBusinessTrips 查询员工出差记录
	ListEmployeeBusinessTrips(ctx context.Context, req *ListEmployeeBusinessTripsRequest, opts ...http.CallOption) (rsp *ListBusinessTripsResponse, err error)
	// ListPendingBusinessTrips 查询待审批的出差
	ListPendingBusinessTrips(ctx context.Context, req *ListPendingBusinessTripsRequest, opts ...http.CallOption) (rsp *ListBusinessTripsResponse, err error)
	// RejectBusinessTrip 拒绝出差
	RejectBusinessTrip(ctx context.Context, req *RejectBusinessTripRequest, opts ...http.CallOption) (rsp *RejectBusinessTripResponse, err error)
	// SubmitBusinessTrip 提交出差审批
	SubmitBusinessTrip(ctx context.Context, req *SubmitBusinessTripRequest, opts ...http.CallOption) (rsp *SubmitBusinessTripResponse, err error)
	// SubmitTripReport 提交出差报告
	SubmitTripReport(ctx context.Context, req *SubmitTripReportRequest, opts ...http.CallOption) (rsp *BusinessTripResponse, err error)
	// UpdateBusinessTrip 更新出差申请
	UpdateBusinessTrip(ctx context.Context, req *UpdateBusinessTripRequest, opts ...http.CallOption) (rsp *BusinessTripResponse, err error)
}

type BusinessTripServiceHTTPClientImpl struct {
	cc *http.Client
}

func NewBusinessTripServiceHTTPClient(client *http.Client) BusinessTripServiceHTTPClient {
	return &BusinessTripServiceHTTPClientImpl{client}
}

// ApproveBusinessTrip 批准出差
func (c *BusinessTripServiceHTTPClientImpl) ApproveBusinessTrip(ctx context.Context, in *ApproveBusinessTripRequest, opts ...http.CallOption) (*ApproveBusinessTripResponse, error) {
	var out ApproveBusinessTripResponse
	pattern := "/api/v1/hrm/business-trips/{business_trip_id}/approve"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBusinessTripServiceApproveBusinessTrip))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

// CreateBusinessTrip 创建出差申请
func (c *BusinessTripServiceHTTPClientImpl) CreateBusinessTrip(ctx context.Context, in *CreateBusinessTripRequest, opts ...http.CallOption) (*BusinessTripResponse, error) {
	var out BusinessTripResponse
	pattern := "/api/v1/hrm/business-trips"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBusinessTripServiceCreateBusinessTrip))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

// DeleteBusinessTrip 删除出差申请
func (c *BusinessTripServiceHTTPClientImpl) DeleteBusinessTrip(ctx context.Context, in *DeleteBusinessTripRequest, opts ...http.CallOption) (*DeleteBusinessTripResponse, error) {
	var out DeleteBusinessTripResponse
	pattern := "/api/v1/hrm/business-trips/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationBusinessTripServiceDeleteBusinessTrip))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

// GetBusinessTrip 获取出差详情
func (c *BusinessTripServiceHTTPClientImpl) GetBusinessTrip(ctx context.Context, in *GetBusinessTripRequest, opts ...http.CallOption) (*BusinessTripResponse, error) {
	var out BusinessTripResponse
	pattern := "/api/v1/hrm/business-trips/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationBusinessTripServiceGetBusinessTrip))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

// ListBusinessTrips 列表查询出差记录
func (c *BusinessTripServiceHTTPClientImpl) ListBusinessTrips(ctx context.Context, in *ListBusinessTripsRequest, opts ...http.CallOption) (*ListBusinessTripsResponse, error) {
	var out ListBusinessTripsResponse
	pattern := "/api/v1/hrm/business-trips"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationBusinessTripServiceListBusinessTrips))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

// ListEmployeeBusinessTrips 查询员工出差记录
func (c *BusinessTripServiceHTTPClientImpl) ListEmployeeBusinessTrips(ctx context.Context, in *ListEmployeeBusinessTripsRequest, opts ...http.CallOption) (*ListBusinessTripsResponse, error) {
	var out ListBusinessTripsResponse
	pattern := "/api/v1/hrm/employees/{employee_id}/business-trips"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationBusinessTripServiceListEmployeeBusinessTrips))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

// ListPendingBusinessTrips 查询待审批的出差
func (c *BusinessTripServiceHTTPClientImpl) ListPendingBusinessTrips(ctx context.Context, in *ListPendingBusinessTripsRequest, opts ...http.CallOption) (*ListBusinessTripsResponse, error) {
	var out ListBusinessTripsResponse
	pattern := "/api/v1/hrm/business-trips/pending"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationBusinessTripServiceListPendingBusinessTrips))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

// RejectBusinessTrip 拒绝出差
func (c *BusinessTripServiceHTTPClientImpl) RejectBusinessTrip(ctx context.Context, in *RejectBusinessTripRequest, opts ...http.CallOption) (*RejectBusinessTripResponse, error) {
	var out RejectBusinessTripResponse
	pattern := "/api/v1/hrm/business-trips/{business_trip_id}/reject"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBusinessTripServiceRejectBusinessTrip))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

// SubmitBusinessTrip 提交出差审批
func (c *BusinessTripServiceHTTPClientImpl) SubmitBusinessTrip(ctx context.Context, in *SubmitBusinessTripRequest, opts ...http.CallOption) (*SubmitBusinessTripResponse, error) {
	var out SubmitBusinessTripResponse
	pattern := "/api/v1/hrm/business-trips/{business_trip_id}/submit"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBusinessTripServiceSubmitBusinessTrip))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

// SubmitTripReport 提交出差报告
func (c *BusinessTripServiceHTTPClientImpl) SubmitTripReport(ctx context.Context, in *SubmitTripReportRequest, opts ...http.CallOption) (*BusinessTripResponse, error) {
	var out BusinessTripResponse
	pattern := "/api/v1/hrm/business-trips/{business_trip_id}/report"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBusinessTripServiceSubmitTripReport))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

// UpdateBusinessTrip 更新出差申请
func (c *BusinessTripServiceHTTPClientImpl) UpdateBusinessTrip(ctx context.Context, in *UpdateBusinessTripRequest, opts ...http.CallOption) (*BusinessTripResponse, error) {
	var out BusinessTripResponse
	pattern := "/api/v1/hrm/business-trips/{id}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBusinessTripServiceUpdateBusinessTrip))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
