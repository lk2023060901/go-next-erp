// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: api/hrm/v1/punch_card_supplement.proto

package hrmv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PunchCardSupplementServiceClient is the client API for PunchCardSupplementService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PunchCardSupplementServiceClient interface {
	// CreatePunchCardSupplement 创建补卡申请
	CreatePunchCardSupplement(ctx context.Context, in *CreatePunchCardSupplementRequest, opts ...grpc.CallOption) (*PunchCardSupplementResponse, error)
	// UpdatePunchCardSupplement 更新补卡申请
	UpdatePunchCardSupplement(ctx context.Context, in *UpdatePunchCardSupplementRequest, opts ...grpc.CallOption) (*PunchCardSupplementResponse, error)
	// DeletePunchCardSupplement 删除补卡申请
	DeletePunchCardSupplement(ctx context.Context, in *DeletePunchCardSupplementRequest, opts ...grpc.CallOption) (*DeletePunchCardSupplementResponse, error)
	// GetPunchCardSupplement 获取补卡申请详情
	GetPunchCardSupplement(ctx context.Context, in *GetPunchCardSupplementRequest, opts ...grpc.CallOption) (*PunchCardSupplementResponse, error)
	// ListPunchCardSupplements 列表查询补卡申请
	ListPunchCardSupplements(ctx context.Context, in *ListPunchCardSupplementsRequest, opts ...grpc.CallOption) (*ListPunchCardSupplementsResponse, error)
	// ListEmployeePunchCardSupplements 查询员工补卡申请记录
	ListEmployeePunchCardSupplements(ctx context.Context, in *ListEmployeePunchCardSupplementsRequest, opts ...grpc.CallOption) (*ListPunchCardSupplementsResponse, error)
	// ListPendingPunchCardSupplements 查询待审批的补卡申请
	ListPendingPunchCardSupplements(ctx context.Context, in *ListPendingPunchCardSupplementsRequest, opts ...grpc.CallOption) (*ListPunchCardSupplementsResponse, error)
	// SubmitPunchCardSupplement 提交补卡申请审批
	SubmitPunchCardSupplement(ctx context.Context, in *SubmitPunchCardSupplementRequest, opts ...grpc.CallOption) (*SubmitPunchCardSupplementResponse, error)
	// ApprovePunchCardSupplement 批准补卡申请
	ApprovePunchCardSupplement(ctx context.Context, in *ApprovePunchCardSupplementRequest, opts ...grpc.CallOption) (*ApprovePunchCardSupplementResponse, error)
	// RejectPunchCardSupplement 拒绝补卡申请
	RejectPunchCardSupplement(ctx context.Context, in *RejectPunchCardSupplementRequest, opts ...grpc.CallOption) (*RejectPunchCardSupplementResponse, error)
	// ProcessPunchCardSupplement 处理补卡（生成补卡记录）
	ProcessPunchCardSupplement(ctx context.Context, in *ProcessPunchCardSupplementRequest, opts ...grpc.CallOption) (*ProcessPunchCardSupplementResponse, error)
	// CancelPunchCardSupplement 取消补卡申请
	CancelPunchCardSupplement(ctx context.Context, in *CancelPunchCardSupplementRequest, opts ...grpc.CallOption) (*CancelPunchCardSupplementResponse, error)
}

type punchCardSupplementServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPunchCardSupplementServiceClient(cc grpc.ClientConnInterface) PunchCardSupplementServiceClient {
	return &punchCardSupplementServiceClient{cc}
}

func (c *punchCardSupplementServiceClient) CreatePunchCardSupplement(ctx context.Context, in *CreatePunchCardSupplementRequest, opts ...grpc.CallOption) (*PunchCardSupplementResponse, error) {
	out := new(PunchCardSupplementResponse)
	err := c.cc.Invoke(ctx, "/hrm.v1.PunchCardSupplementService/CreatePunchCardSupplement", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *punchCardSupplementServiceClient) UpdatePunchCardSupplement(ctx context.Context, in *UpdatePunchCardSupplementRequest, opts ...grpc.CallOption) (*PunchCardSupplementResponse, error) {
	out := new(PunchCardSupplementResponse)
	err := c.cc.Invoke(ctx, "/hrm.v1.PunchCardSupplementService/UpdatePunchCardSupplement", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *punchCardSupplementServiceClient) DeletePunchCardSupplement(ctx context.Context, in *DeletePunchCardSupplementRequest, opts ...grpc.CallOption) (*DeletePunchCardSupplementResponse, error) {
	out := new(DeletePunchCardSupplementResponse)
	err := c.cc.Invoke(ctx, "/hrm.v1.PunchCardSupplementService/DeletePunchCardSupplement", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *punchCardSupplementServiceClient) GetPunchCardSupplement(ctx context.Context, in *GetPunchCardSupplementRequest, opts ...grpc.CallOption) (*PunchCardSupplementResponse, error) {
	out := new(PunchCardSupplementResponse)
	err := c.cc.Invoke(ctx, "/hrm.v1.PunchCardSupplementService/GetPunchCardSupplement", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *punchCardSupplementServiceClient) ListPunchCardSupplements(ctx context.Context, in *ListPunchCardSupplementsRequest, opts ...grpc.CallOption) (*ListPunchCardSupplementsResponse, error) {
	out := new(ListPunchCardSupplementsResponse)
	err := c.cc.Invoke(ctx, "/hrm.v1.PunchCardSupplementService/ListPunchCardSupplements", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *punchCardSupplementServiceClient) ListEmployeePunchCardSupplements(ctx context.Context, in *ListEmployeePunchCardSupplementsRequest, opts ...grpc.CallOption) (*ListPunchCardSupplementsResponse, error) {
	out := new(ListPunchCardSupplementsResponse)
	err := c.cc.Invoke(ctx, "/hrm.v1.PunchCardSupplementService/ListEmployeePunchCardSupplements", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *punchCardSupplementServiceClient) ListPendingPunchCardSupplements(ctx context.Context, in *ListPendingPunchCardSupplementsRequest, opts ...grpc.CallOption) (*ListPunchCardSupplementsResponse, error) {
	out := new(ListPunchCardSupplementsResponse)
	err := c.cc.Invoke(ctx, "/hrm.v1.PunchCardSupplementService/ListPendingPunchCardSupplements", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *punchCardSupplementServiceClient) SubmitPunchCardSupplement(ctx context.Context, in *SubmitPunchCardSupplementRequest, opts ...grpc.CallOption) (*SubmitPunchCardSupplementResponse, error) {
	out := new(SubmitPunchCardSupplementResponse)
	err := c.cc.Invoke(ctx, "/hrm.v1.PunchCardSupplementService/SubmitPunchCardSupplement", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *punchCardSupplementServiceClient) ApprovePunchCardSupplement(ctx context.Context, in *ApprovePunchCardSupplementRequest, opts ...grpc.CallOption) (*ApprovePunchCardSupplementResponse, error) {
	out := new(ApprovePunchCardSupplementResponse)
	err := c.cc.Invoke(ctx, "/hrm.v1.PunchCardSupplementService/ApprovePunchCardSupplement", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *punchCardSupplementServiceClient) RejectPunchCardSupplement(ctx context.Context, in *RejectPunchCardSupplementRequest, opts ...grpc.CallOption) (*RejectPunchCardSupplementResponse, error) {
	out := new(RejectPunchCardSupplementResponse)
	err := c.cc.Invoke(ctx, "/hrm.v1.PunchCardSupplementService/RejectPunchCardSupplement", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *punchCardSupplementServiceClient) ProcessPunchCardSupplement(ctx context.Context, in *ProcessPunchCardSupplementRequest, opts ...grpc.CallOption) (*ProcessPunchCardSupplementResponse, error) {
	out := new(ProcessPunchCardSupplementResponse)
	err := c.cc.Invoke(ctx, "/hrm.v1.PunchCardSupplementService/ProcessPunchCardSupplement", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *punchCardSupplementServiceClient) CancelPunchCardSupplement(ctx context.Context, in *CancelPunchCardSupplementRequest, opts ...grpc.CallOption) (*CancelPunchCardSupplementResponse, error) {
	out := new(CancelPunchCardSupplementResponse)
	err := c.cc.Invoke(ctx, "/hrm.v1.PunchCardSupplementService/CancelPunchCardSupplement", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PunchCardSupplementServiceServer is the server API for PunchCardSupplementService service.
// All implementations should embed UnimplementedPunchCardSupplementServiceServer
// for forward compatibility
type PunchCardSupplementServiceServer interface {
	// CreatePunchCardSupplement 创建补卡申请
	CreatePunchCardSupplement(context.Context, *CreatePunchCardSupplementRequest) (*PunchCardSupplementResponse, error)
	// UpdatePunchCardSupplement 更新补卡申请
	UpdatePunchCardSupplement(context.Context, *UpdatePunchCardSupplementRequest) (*PunchCardSupplementResponse, error)
	// DeletePunchCardSupplement 删除补卡申请
	DeletePunchCardSupplement(context.Context, *DeletePunchCardSupplementRequest) (*DeletePunchCardSupplementResponse, error)
	// GetPunchCardSupplement 获取补卡申请详情
	GetPunchCardSupplement(context.Context, *GetPunchCardSupplementRequest) (*PunchCardSupplementResponse, error)
	// ListPunchCardSupplements 列表查询补卡申请
	ListPunchCardSupplements(context.Context, *ListPunchCardSupplementsRequest) (*ListPunchCardSupplementsResponse, error)
	// ListEmployeePunchCardSupplements 查询员工补卡申请记录
	ListEmployeePunchCardSupplements(context.Context, *ListEmployeePunchCardSupplementsRequest) (*ListPunchCardSupplementsResponse, error)
	// ListPendingPunchCardSupplements 查询待审批的补卡申请
	ListPendingPunchCardSupplements(context.Context, *ListPendingPunchCardSupplementsRequest) (*ListPunchCardSupplementsResponse, error)
	// SubmitPunchCardSupplement 提交补卡申请审批
	SubmitPunchCardSupplement(context.Context, *SubmitPunchCardSupplementRequest) (*SubmitPunchCardSupplementResponse, error)
	// ApprovePunchCardSupplement 批准补卡申请
	ApprovePunchCardSupplement(context.Context, *ApprovePunchCardSupplementRequest) (*ApprovePunchCardSupplementResponse, error)
	// RejectPunchCardSupplement 拒绝补卡申请
	RejectPunchCardSupplement(context.Context, *RejectPunchCardSupplementRequest) (*RejectPunchCardSupplementResponse, error)
	// ProcessPunchCardSupplement 处理补卡（生成补卡记录）
	ProcessPunchCardSupplement(context.Context, *ProcessPunchCardSupplementRequest) (*ProcessPunchCardSupplementResponse, error)
	// CancelPunchCardSupplement 取消补卡申请
	CancelPunchCardSupplement(context.Context, *CancelPunchCardSupplementRequest) (*CancelPunchCardSupplementResponse, error)
}

// UnimplementedPunchCardSupplementServiceServer should be embedded to have forward compatible implementations.
type UnimplementedPunchCardSupplementServiceServer struct {
}

func (UnimplementedPunchCardSupplementServiceServer) CreatePunchCardSupplement(context.Context, *CreatePunchCardSupplementRequest) (*PunchCardSupplementResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePunchCardSupplement not implemented")
}
func (UnimplementedPunchCardSupplementServiceServer) UpdatePunchCardSupplement(context.Context, *UpdatePunchCardSupplementRequest) (*PunchCardSupplementResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePunchCardSupplement not implemented")
}
func (UnimplementedPunchCardSupplementServiceServer) DeletePunchCardSupplement(context.Context, *DeletePunchCardSupplementRequest) (*DeletePunchCardSupplementResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePunchCardSupplement not implemented")
}
func (UnimplementedPunchCardSupplementServiceServer) GetPunchCardSupplement(context.Context, *GetPunchCardSupplementRequest) (*PunchCardSupplementResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPunchCardSupplement not implemented")
}
func (UnimplementedPunchCardSupplementServiceServer) ListPunchCardSupplements(context.Context, *ListPunchCardSupplementsRequest) (*ListPunchCardSupplementsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPunchCardSupplements not implemented")
}
func (UnimplementedPunchCardSupplementServiceServer) ListEmployeePunchCardSupplements(context.Context, *ListEmployeePunchCardSupplementsRequest) (*ListPunchCardSupplementsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListEmployeePunchCardSupplements not implemented")
}
func (UnimplementedPunchCardSupplementServiceServer) ListPendingPunchCardSupplements(context.Context, *ListPendingPunchCardSupplementsRequest) (*ListPunchCardSupplementsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPendingPunchCardSupplements not implemented")
}
func (UnimplementedPunchCardSupplementServiceServer) SubmitPunchCardSupplement(context.Context, *SubmitPunchCardSupplementRequest) (*SubmitPunchCardSupplementResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitPunchCardSupplement not implemented")
}
func (UnimplementedPunchCardSupplementServiceServer) ApprovePunchCardSupplement(context.Context, *ApprovePunchCardSupplementRequest) (*ApprovePunchCardSupplementResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApprovePunchCardSupplement not implemented")
}
func (UnimplementedPunchCardSupplementServiceServer) RejectPunchCardSupplement(context.Context, *RejectPunchCardSupplementRequest) (*RejectPunchCardSupplementResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RejectPunchCardSupplement not implemented")
}
func (UnimplementedPunchCardSupplementServiceServer) ProcessPunchCardSupplement(context.Context, *ProcessPunchCardSupplementRequest) (*ProcessPunchCardSupplementResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProcessPunchCardSupplement not implemented")
}
func (UnimplementedPunchCardSupplementServiceServer) CancelPunchCardSupplement(context.Context, *CancelPunchCardSupplementRequest) (*CancelPunchCardSupplementResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelPunchCardSupplement not implemented")
}

// UnsafePunchCardSupplementServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PunchCardSupplementServiceServer will
// result in compilation errors.
type UnsafePunchCardSupplementServiceServer interface {
	mustEmbedUnimplementedPunchCardSupplementServiceServer()
}

func RegisterPunchCardSupplementServiceServer(s grpc.ServiceRegistrar, srv PunchCardSupplementServiceServer) {
	s.RegisterService(&PunchCardSupplementService_ServiceDesc, srv)
}

func _PunchCardSupplementService_CreatePunchCardSupplement_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePunchCardSupplementRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PunchCardSupplementServiceServer).CreatePunchCardSupplement(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hrm.v1.PunchCardSupplementService/CreatePunchCardSupplement",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PunchCardSupplementServiceServer).CreatePunchCardSupplement(ctx, req.(*CreatePunchCardSupplementRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PunchCardSupplementService_UpdatePunchCardSupplement_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePunchCardSupplementRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PunchCardSupplementServiceServer).UpdatePunchCardSupplement(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hrm.v1.PunchCardSupplementService/UpdatePunchCardSupplement",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PunchCardSupplementServiceServer).UpdatePunchCardSupplement(ctx, req.(*UpdatePunchCardSupplementRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PunchCardSupplementService_DeletePunchCardSupplement_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePunchCardSupplementRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PunchCardSupplementServiceServer).DeletePunchCardSupplement(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hrm.v1.PunchCardSupplementService/DeletePunchCardSupplement",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PunchCardSupplementServiceServer).DeletePunchCardSupplement(ctx, req.(*DeletePunchCardSupplementRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PunchCardSupplementService_GetPunchCardSupplement_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPunchCardSupplementRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PunchCardSupplementServiceServer).GetPunchCardSupplement(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hrm.v1.PunchCardSupplementService/GetPunchCardSupplement",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PunchCardSupplementServiceServer).GetPunchCardSupplement(ctx, req.(*GetPunchCardSupplementRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PunchCardSupplementService_ListPunchCardSupplements_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPunchCardSupplementsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PunchCardSupplementServiceServer).ListPunchCardSupplements(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hrm.v1.PunchCardSupplementService/ListPunchCardSupplements",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PunchCardSupplementServiceServer).ListPunchCardSupplements(ctx, req.(*ListPunchCardSupplementsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PunchCardSupplementService_ListEmployeePunchCardSupplements_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListEmployeePunchCardSupplementsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PunchCardSupplementServiceServer).ListEmployeePunchCardSupplements(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hrm.v1.PunchCardSupplementService/ListEmployeePunchCardSupplements",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PunchCardSupplementServiceServer).ListEmployeePunchCardSupplements(ctx, req.(*ListEmployeePunchCardSupplementsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PunchCardSupplementService_ListPendingPunchCardSupplements_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPendingPunchCardSupplementsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PunchCardSupplementServiceServer).ListPendingPunchCardSupplements(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hrm.v1.PunchCardSupplementService/ListPendingPunchCardSupplements",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PunchCardSupplementServiceServer).ListPendingPunchCardSupplements(ctx, req.(*ListPendingPunchCardSupplementsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PunchCardSupplementService_SubmitPunchCardSupplement_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubmitPunchCardSupplementRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PunchCardSupplementServiceServer).SubmitPunchCardSupplement(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hrm.v1.PunchCardSupplementService/SubmitPunchCardSupplement",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PunchCardSupplementServiceServer).SubmitPunchCardSupplement(ctx, req.(*SubmitPunchCardSupplementRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PunchCardSupplementService_ApprovePunchCardSupplement_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApprovePunchCardSupplementRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PunchCardSupplementServiceServer).ApprovePunchCardSupplement(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hrm.v1.PunchCardSupplementService/ApprovePunchCardSupplement",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PunchCardSupplementServiceServer).ApprovePunchCardSupplement(ctx, req.(*ApprovePunchCardSupplementRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PunchCardSupplementService_RejectPunchCardSupplement_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RejectPunchCardSupplementRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PunchCardSupplementServiceServer).RejectPunchCardSupplement(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hrm.v1.PunchCardSupplementService/RejectPunchCardSupplement",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PunchCardSupplementServiceServer).RejectPunchCardSupplement(ctx, req.(*RejectPunchCardSupplementRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PunchCardSupplementService_ProcessPunchCardSupplement_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProcessPunchCardSupplementRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PunchCardSupplementServiceServer).ProcessPunchCardSupplement(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hrm.v1.PunchCardSupplementService/ProcessPunchCardSupplement",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PunchCardSupplementServiceServer).ProcessPunchCardSupplement(ctx, req.(*ProcessPunchCardSupplementRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PunchCardSupplementService_CancelPunchCardSupplement_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelPunchCardSupplementRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PunchCardSupplementServiceServer).CancelPunchCardSupplement(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hrm.v1.PunchCardSupplementService/CancelPunchCardSupplement",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PunchCardSupplementServiceServer).CancelPunchCardSupplement(ctx, req.(*CancelPunchCardSupplementRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PunchCardSupplementService_ServiceDesc is the grpc.ServiceDesc for PunchCardSupplementService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PunchCardSupplementService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "hrm.v1.PunchCardSupplementService",
	HandlerType: (*PunchCardSupplementServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreatePunchCardSupplement",
			Handler:    _PunchCardSupplementService_CreatePunchCardSupplement_Handler,
		},
		{
			MethodName: "UpdatePunchCardSupplement",
			Handler:    _PunchCardSupplementService_UpdatePunchCardSupplement_Handler,
		},
		{
			MethodName: "DeletePunchCardSupplement",
			Handler:    _PunchCardSupplementService_DeletePunchCardSupplement_Handler,
		},
		{
			MethodName: "GetPunchCardSupplement",
			Handler:    _PunchCardSupplementService_GetPunchCardSupplement_Handler,
		},
		{
			MethodName: "ListPunchCardSupplements",
			Handler:    _PunchCardSupplementService_ListPunchCardSupplements_Handler,
		},
		{
			MethodName: "ListEmployeePunchCardSupplements",
			Handler:    _PunchCardSupplementService_ListEmployeePunchCardSupplements_Handler,
		},
		{
			MethodName: "ListPendingPunchCardSupplements",
			Handler:    _PunchCardSupplementService_ListPendingPunchCardSupplements_Handler,
		},
		{
			MethodName: "SubmitPunchCardSupplement",
			Handler:    _PunchCardSupplementService_SubmitPunchCardSupplement_Handler,
		},
		{
			MethodName: "ApprovePunchCardSupplement",
			Handler:    _PunchCardSupplementService_ApprovePunchCardSupplement_Handler,
		},
		{
			MethodName: "RejectPunchCardSupplement",
			Handler:    _PunchCardSupplementService_RejectPunchCardSupplement_Handler,
		},
		{
			MethodName: "ProcessPunchCardSupplement",
			Handler:    _PunchCardSupplementService_ProcessPunchCardSupplement_Handler,
		},
		{
			MethodName: "CancelPunchCardSupplement",
			Handler:    _PunchCardSupplementService_CancelPunchCardSupplement_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/hrm/v1/punch_card_supplement.proto",
}
