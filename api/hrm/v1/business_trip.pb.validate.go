// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/hrm/v1/business_trip.proto

package hrmv1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on BusinessTripResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *BusinessTripResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BusinessTripResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BusinessTripResponseMultiError, or nil if none found.
func (m *BusinessTripResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *BusinessTripResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for TenantId

	// no validation rules for EmployeeId

	// no validation rules for EmployeeName

	// no validation rules for DepartmentId

	if all {
		switch v := interface{}(m.GetStartTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BusinessTripResponseValidationError{
					field:  "StartTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BusinessTripResponseValidationError{
					field:  "StartTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStartTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BusinessTripResponseValidationError{
				field:  "StartTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetEndTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BusinessTripResponseValidationError{
					field:  "EndTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BusinessTripResponseValidationError{
					field:  "EndTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEndTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BusinessTripResponseValidationError{
				field:  "EndTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Duration

	// no validation rules for Destination

	// no validation rules for Transportation

	// no validation rules for Accommodation

	// no validation rules for Purpose

	// no validation rules for Tasks

	// no validation rules for EstimatedCost

	// no validation rules for ActualCost

	// no validation rules for ApprovalStatus

	// no validation rules for ApprovedBy

	if all {
		switch v := interface{}(m.GetApprovedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BusinessTripResponseValidationError{
					field:  "ApprovedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BusinessTripResponseValidationError{
					field:  "ApprovedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetApprovedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BusinessTripResponseValidationError{
				field:  "ApprovedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for RejectReason

	// no validation rules for Report

	if all {
		switch v := interface{}(m.GetReportAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BusinessTripResponseValidationError{
					field:  "ReportAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BusinessTripResponseValidationError{
					field:  "ReportAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetReportAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BusinessTripResponseValidationError{
				field:  "ReportAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Remark

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BusinessTripResponseValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BusinessTripResponseValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BusinessTripResponseValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BusinessTripResponseValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BusinessTripResponseValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BusinessTripResponseValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return BusinessTripResponseMultiError(errors)
	}

	return nil
}

// BusinessTripResponseMultiError is an error wrapping multiple validation
// errors returned by BusinessTripResponse.ValidateAll() if the designated
// constraints aren't met.
type BusinessTripResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BusinessTripResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BusinessTripResponseMultiError) AllErrors() []error { return m }

// BusinessTripResponseValidationError is the validation error returned by
// BusinessTripResponse.Validate if the designated constraints aren't met.
type BusinessTripResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BusinessTripResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BusinessTripResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BusinessTripResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BusinessTripResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BusinessTripResponseValidationError) ErrorName() string {
	return "BusinessTripResponseValidationError"
}

// Error satisfies the builtin error interface
func (e BusinessTripResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBusinessTripResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BusinessTripResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BusinessTripResponseValidationError{}

// Validate checks the field values on CreateBusinessTripRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateBusinessTripRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateBusinessTripRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateBusinessTripRequestMultiError, or nil if none found.
func (m *CreateBusinessTripRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateBusinessTripRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TenantId

	// no validation rules for EmployeeId

	// no validation rules for EmployeeName

	// no validation rules for DepartmentId

	if all {
		switch v := interface{}(m.GetStartTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateBusinessTripRequestValidationError{
					field:  "StartTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateBusinessTripRequestValidationError{
					field:  "StartTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStartTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateBusinessTripRequestValidationError{
				field:  "StartTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetEndTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateBusinessTripRequestValidationError{
					field:  "EndTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateBusinessTripRequestValidationError{
					field:  "EndTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEndTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateBusinessTripRequestValidationError{
				field:  "EndTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Destination

	// no validation rules for Transportation

	// no validation rules for Accommodation

	// no validation rules for Purpose

	// no validation rules for Tasks

	// no validation rules for EstimatedCost

	// no validation rules for Remark

	if len(errors) > 0 {
		return CreateBusinessTripRequestMultiError(errors)
	}

	return nil
}

// CreateBusinessTripRequestMultiError is an error wrapping multiple validation
// errors returned by CreateBusinessTripRequest.ValidateAll() if the
// designated constraints aren't met.
type CreateBusinessTripRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateBusinessTripRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateBusinessTripRequestMultiError) AllErrors() []error { return m }

// CreateBusinessTripRequestValidationError is the validation error returned by
// CreateBusinessTripRequest.Validate if the designated constraints aren't met.
type CreateBusinessTripRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateBusinessTripRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateBusinessTripRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateBusinessTripRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateBusinessTripRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateBusinessTripRequestValidationError) ErrorName() string {
	return "CreateBusinessTripRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateBusinessTripRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateBusinessTripRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateBusinessTripRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateBusinessTripRequestValidationError{}

// Validate checks the field values on UpdateBusinessTripRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateBusinessTripRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateBusinessTripRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateBusinessTripRequestMultiError, or nil if none found.
func (m *UpdateBusinessTripRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateBusinessTripRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if all {
		switch v := interface{}(m.GetStartTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateBusinessTripRequestValidationError{
					field:  "StartTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateBusinessTripRequestValidationError{
					field:  "StartTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStartTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateBusinessTripRequestValidationError{
				field:  "StartTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetEndTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateBusinessTripRequestValidationError{
					field:  "EndTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateBusinessTripRequestValidationError{
					field:  "EndTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEndTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateBusinessTripRequestValidationError{
				field:  "EndTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Destination

	// no validation rules for Transportation

	// no validation rules for Accommodation

	// no validation rules for Purpose

	// no validation rules for Tasks

	// no validation rules for EstimatedCost

	// no validation rules for Remark

	if len(errors) > 0 {
		return UpdateBusinessTripRequestMultiError(errors)
	}

	return nil
}

// UpdateBusinessTripRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateBusinessTripRequest.ValidateAll() if the
// designated constraints aren't met.
type UpdateBusinessTripRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateBusinessTripRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateBusinessTripRequestMultiError) AllErrors() []error { return m }

// UpdateBusinessTripRequestValidationError is the validation error returned by
// UpdateBusinessTripRequest.Validate if the designated constraints aren't met.
type UpdateBusinessTripRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateBusinessTripRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateBusinessTripRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateBusinessTripRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateBusinessTripRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateBusinessTripRequestValidationError) ErrorName() string {
	return "UpdateBusinessTripRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateBusinessTripRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateBusinessTripRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateBusinessTripRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateBusinessTripRequestValidationError{}

// Validate checks the field values on DeleteBusinessTripRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteBusinessTripRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteBusinessTripRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteBusinessTripRequestMultiError, or nil if none found.
func (m *DeleteBusinessTripRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteBusinessTripRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DeleteBusinessTripRequestMultiError(errors)
	}

	return nil
}

// DeleteBusinessTripRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteBusinessTripRequest.ValidateAll() if the
// designated constraints aren't met.
type DeleteBusinessTripRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteBusinessTripRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteBusinessTripRequestMultiError) AllErrors() []error { return m }

// DeleteBusinessTripRequestValidationError is the validation error returned by
// DeleteBusinessTripRequest.Validate if the designated constraints aren't met.
type DeleteBusinessTripRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteBusinessTripRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteBusinessTripRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteBusinessTripRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteBusinessTripRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteBusinessTripRequestValidationError) ErrorName() string {
	return "DeleteBusinessTripRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteBusinessTripRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteBusinessTripRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteBusinessTripRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteBusinessTripRequestValidationError{}

// Validate checks the field values on DeleteBusinessTripResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteBusinessTripResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteBusinessTripResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteBusinessTripResponseMultiError, or nil if none found.
func (m *DeleteBusinessTripResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteBusinessTripResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	// no validation rules for Message

	if len(errors) > 0 {
		return DeleteBusinessTripResponseMultiError(errors)
	}

	return nil
}

// DeleteBusinessTripResponseMultiError is an error wrapping multiple
// validation errors returned by DeleteBusinessTripResponse.ValidateAll() if
// the designated constraints aren't met.
type DeleteBusinessTripResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteBusinessTripResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteBusinessTripResponseMultiError) AllErrors() []error { return m }

// DeleteBusinessTripResponseValidationError is the validation error returned
// by DeleteBusinessTripResponse.Validate if the designated constraints aren't met.
type DeleteBusinessTripResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteBusinessTripResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteBusinessTripResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteBusinessTripResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteBusinessTripResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteBusinessTripResponseValidationError) ErrorName() string {
	return "DeleteBusinessTripResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteBusinessTripResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteBusinessTripResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteBusinessTripResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteBusinessTripResponseValidationError{}

// Validate checks the field values on GetBusinessTripRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetBusinessTripRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetBusinessTripRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetBusinessTripRequestMultiError, or nil if none found.
func (m *GetBusinessTripRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetBusinessTripRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetBusinessTripRequestMultiError(errors)
	}

	return nil
}

// GetBusinessTripRequestMultiError is an error wrapping multiple validation
// errors returned by GetBusinessTripRequest.ValidateAll() if the designated
// constraints aren't met.
type GetBusinessTripRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetBusinessTripRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetBusinessTripRequestMultiError) AllErrors() []error { return m }

// GetBusinessTripRequestValidationError is the validation error returned by
// GetBusinessTripRequest.Validate if the designated constraints aren't met.
type GetBusinessTripRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetBusinessTripRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetBusinessTripRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetBusinessTripRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetBusinessTripRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetBusinessTripRequestValidationError) ErrorName() string {
	return "GetBusinessTripRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetBusinessTripRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetBusinessTripRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetBusinessTripRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetBusinessTripRequestValidationError{}

// Validate checks the field values on ListBusinessTripsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListBusinessTripsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListBusinessTripsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListBusinessTripsRequestMultiError, or nil if none found.
func (m *ListBusinessTripsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListBusinessTripsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TenantId

	// no validation rules for EmployeeId

	// no validation rules for DepartmentId

	// no validation rules for ApprovalStatus

	if all {
		switch v := interface{}(m.GetStartDate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListBusinessTripsRequestValidationError{
					field:  "StartDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListBusinessTripsRequestValidationError{
					field:  "StartDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStartDate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListBusinessTripsRequestValidationError{
				field:  "StartDate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetEndDate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListBusinessTripsRequestValidationError{
					field:  "EndDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListBusinessTripsRequestValidationError{
					field:  "EndDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEndDate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListBusinessTripsRequestValidationError{
				field:  "EndDate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Keyword

	// no validation rules for Page

	// no validation rules for PageSize

	if len(errors) > 0 {
		return ListBusinessTripsRequestMultiError(errors)
	}

	return nil
}

// ListBusinessTripsRequestMultiError is an error wrapping multiple validation
// errors returned by ListBusinessTripsRequest.ValidateAll() if the designated
// constraints aren't met.
type ListBusinessTripsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListBusinessTripsRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListBusinessTripsRequestMultiError) AllErrors() []error { return m }

// ListBusinessTripsRequestValidationError is the validation error returned by
// ListBusinessTripsRequest.Validate if the designated constraints aren't met.
type ListBusinessTripsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListBusinessTripsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListBusinessTripsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListBusinessTripsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListBusinessTripsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListBusinessTripsRequestValidationError) ErrorName() string {
	return "ListBusinessTripsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListBusinessTripsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListBusinessTripsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListBusinessTripsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListBusinessTripsRequestValidationError{}

// Validate checks the field values on ListBusinessTripsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListBusinessTripsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListBusinessTripsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListBusinessTripsResponseMultiError, or nil if none found.
func (m *ListBusinessTripsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListBusinessTripsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListBusinessTripsResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListBusinessTripsResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListBusinessTripsResponseValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Total

	// no validation rules for Page

	// no validation rules for PageSize

	if len(errors) > 0 {
		return ListBusinessTripsResponseMultiError(errors)
	}

	return nil
}

// ListBusinessTripsResponseMultiError is an error wrapping multiple validation
// errors returned by ListBusinessTripsResponse.ValidateAll() if the
// designated constraints aren't met.
type ListBusinessTripsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListBusinessTripsResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListBusinessTripsResponseMultiError) AllErrors() []error { return m }

// ListBusinessTripsResponseValidationError is the validation error returned by
// ListBusinessTripsResponse.Validate if the designated constraints aren't met.
type ListBusinessTripsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListBusinessTripsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListBusinessTripsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListBusinessTripsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListBusinessTripsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListBusinessTripsResponseValidationError) ErrorName() string {
	return "ListBusinessTripsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListBusinessTripsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListBusinessTripsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListBusinessTripsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListBusinessTripsResponseValidationError{}

// Validate checks the field values on ListEmployeeBusinessTripsRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ListEmployeeBusinessTripsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListEmployeeBusinessTripsRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListEmployeeBusinessTripsRequestMultiError, or nil if none found.
func (m *ListEmployeeBusinessTripsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListEmployeeBusinessTripsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for EmployeeId

	if all {
		switch v := interface{}(m.GetStartDate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListEmployeeBusinessTripsRequestValidationError{
					field:  "StartDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListEmployeeBusinessTripsRequestValidationError{
					field:  "StartDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStartDate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListEmployeeBusinessTripsRequestValidationError{
				field:  "StartDate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetEndDate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListEmployeeBusinessTripsRequestValidationError{
					field:  "EndDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListEmployeeBusinessTripsRequestValidationError{
					field:  "EndDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEndDate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListEmployeeBusinessTripsRequestValidationError{
				field:  "EndDate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for ApprovalStatus

	// no validation rules for Page

	// no validation rules for PageSize

	if len(errors) > 0 {
		return ListEmployeeBusinessTripsRequestMultiError(errors)
	}

	return nil
}

// ListEmployeeBusinessTripsRequestMultiError is an error wrapping multiple
// validation errors returned by
// ListEmployeeBusinessTripsRequest.ValidateAll() if the designated
// constraints aren't met.
type ListEmployeeBusinessTripsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListEmployeeBusinessTripsRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListEmployeeBusinessTripsRequestMultiError) AllErrors() []error { return m }

// ListEmployeeBusinessTripsRequestValidationError is the validation error
// returned by ListEmployeeBusinessTripsRequest.Validate if the designated
// constraints aren't met.
type ListEmployeeBusinessTripsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListEmployeeBusinessTripsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListEmployeeBusinessTripsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListEmployeeBusinessTripsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListEmployeeBusinessTripsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListEmployeeBusinessTripsRequestValidationError) ErrorName() string {
	return "ListEmployeeBusinessTripsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListEmployeeBusinessTripsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListEmployeeBusinessTripsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListEmployeeBusinessTripsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListEmployeeBusinessTripsRequestValidationError{}

// Validate checks the field values on ListPendingBusinessTripsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListPendingBusinessTripsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListPendingBusinessTripsRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListPendingBusinessTripsRequestMultiError, or nil if none found.
func (m *ListPendingBusinessTripsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListPendingBusinessTripsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TenantId

	// no validation rules for ApproverId

	// no validation rules for Page

	// no validation rules for PageSize

	if len(errors) > 0 {
		return ListPendingBusinessTripsRequestMultiError(errors)
	}

	return nil
}

// ListPendingBusinessTripsRequestMultiError is an error wrapping multiple
// validation errors returned by ListPendingBusinessTripsRequest.ValidateAll()
// if the designated constraints aren't met.
type ListPendingBusinessTripsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListPendingBusinessTripsRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListPendingBusinessTripsRequestMultiError) AllErrors() []error { return m }

// ListPendingBusinessTripsRequestValidationError is the validation error
// returned by ListPendingBusinessTripsRequest.Validate if the designated
// constraints aren't met.
type ListPendingBusinessTripsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListPendingBusinessTripsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListPendingBusinessTripsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListPendingBusinessTripsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListPendingBusinessTripsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListPendingBusinessTripsRequestValidationError) ErrorName() string {
	return "ListPendingBusinessTripsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListPendingBusinessTripsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListPendingBusinessTripsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListPendingBusinessTripsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListPendingBusinessTripsRequestValidationError{}

// Validate checks the field values on SubmitBusinessTripRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SubmitBusinessTripRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SubmitBusinessTripRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SubmitBusinessTripRequestMultiError, or nil if none found.
func (m *SubmitBusinessTripRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SubmitBusinessTripRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for BusinessTripId

	// no validation rules for SubmitterId

	if len(errors) > 0 {
		return SubmitBusinessTripRequestMultiError(errors)
	}

	return nil
}

// SubmitBusinessTripRequestMultiError is an error wrapping multiple validation
// errors returned by SubmitBusinessTripRequest.ValidateAll() if the
// designated constraints aren't met.
type SubmitBusinessTripRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SubmitBusinessTripRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SubmitBusinessTripRequestMultiError) AllErrors() []error { return m }

// SubmitBusinessTripRequestValidationError is the validation error returned by
// SubmitBusinessTripRequest.Validate if the designated constraints aren't met.
type SubmitBusinessTripRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SubmitBusinessTripRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SubmitBusinessTripRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SubmitBusinessTripRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SubmitBusinessTripRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SubmitBusinessTripRequestValidationError) ErrorName() string {
	return "SubmitBusinessTripRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SubmitBusinessTripRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSubmitBusinessTripRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SubmitBusinessTripRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SubmitBusinessTripRequestValidationError{}

// Validate checks the field values on SubmitBusinessTripResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SubmitBusinessTripResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SubmitBusinessTripResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SubmitBusinessTripResponseMultiError, or nil if none found.
func (m *SubmitBusinessTripResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SubmitBusinessTripResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	// no validation rules for Message

	// no validation rules for WorkflowId

	if len(errors) > 0 {
		return SubmitBusinessTripResponseMultiError(errors)
	}

	return nil
}

// SubmitBusinessTripResponseMultiError is an error wrapping multiple
// validation errors returned by SubmitBusinessTripResponse.ValidateAll() if
// the designated constraints aren't met.
type SubmitBusinessTripResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SubmitBusinessTripResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SubmitBusinessTripResponseMultiError) AllErrors() []error { return m }

// SubmitBusinessTripResponseValidationError is the validation error returned
// by SubmitBusinessTripResponse.Validate if the designated constraints aren't met.
type SubmitBusinessTripResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SubmitBusinessTripResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SubmitBusinessTripResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SubmitBusinessTripResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SubmitBusinessTripResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SubmitBusinessTripResponseValidationError) ErrorName() string {
	return "SubmitBusinessTripResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SubmitBusinessTripResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSubmitBusinessTripResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SubmitBusinessTripResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SubmitBusinessTripResponseValidationError{}

// Validate checks the field values on ApproveBusinessTripRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ApproveBusinessTripRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ApproveBusinessTripRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ApproveBusinessTripRequestMultiError, or nil if none found.
func (m *ApproveBusinessTripRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ApproveBusinessTripRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for BusinessTripId

	// no validation rules for ApproverId

	// no validation rules for Comment

	if len(errors) > 0 {
		return ApproveBusinessTripRequestMultiError(errors)
	}

	return nil
}

// ApproveBusinessTripRequestMultiError is an error wrapping multiple
// validation errors returned by ApproveBusinessTripRequest.ValidateAll() if
// the designated constraints aren't met.
type ApproveBusinessTripRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ApproveBusinessTripRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ApproveBusinessTripRequestMultiError) AllErrors() []error { return m }

// ApproveBusinessTripRequestValidationError is the validation error returned
// by ApproveBusinessTripRequest.Validate if the designated constraints aren't met.
type ApproveBusinessTripRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ApproveBusinessTripRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ApproveBusinessTripRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ApproveBusinessTripRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ApproveBusinessTripRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ApproveBusinessTripRequestValidationError) ErrorName() string {
	return "ApproveBusinessTripRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ApproveBusinessTripRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sApproveBusinessTripRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ApproveBusinessTripRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ApproveBusinessTripRequestValidationError{}

// Validate checks the field values on ApproveBusinessTripResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ApproveBusinessTripResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ApproveBusinessTripResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ApproveBusinessTripResponseMultiError, or nil if none found.
func (m *ApproveBusinessTripResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ApproveBusinessTripResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	// no validation rules for Message

	if len(errors) > 0 {
		return ApproveBusinessTripResponseMultiError(errors)
	}

	return nil
}

// ApproveBusinessTripResponseMultiError is an error wrapping multiple
// validation errors returned by ApproveBusinessTripResponse.ValidateAll() if
// the designated constraints aren't met.
type ApproveBusinessTripResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ApproveBusinessTripResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ApproveBusinessTripResponseMultiError) AllErrors() []error { return m }

// ApproveBusinessTripResponseValidationError is the validation error returned
// by ApproveBusinessTripResponse.Validate if the designated constraints
// aren't met.
type ApproveBusinessTripResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ApproveBusinessTripResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ApproveBusinessTripResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ApproveBusinessTripResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ApproveBusinessTripResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ApproveBusinessTripResponseValidationError) ErrorName() string {
	return "ApproveBusinessTripResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ApproveBusinessTripResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sApproveBusinessTripResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ApproveBusinessTripResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ApproveBusinessTripResponseValidationError{}

// Validate checks the field values on RejectBusinessTripRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RejectBusinessTripRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RejectBusinessTripRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RejectBusinessTripRequestMultiError, or nil if none found.
func (m *RejectBusinessTripRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RejectBusinessTripRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for BusinessTripId

	// no validation rules for ApproverId

	// no validation rules for Reason

	if len(errors) > 0 {
		return RejectBusinessTripRequestMultiError(errors)
	}

	return nil
}

// RejectBusinessTripRequestMultiError is an error wrapping multiple validation
// errors returned by RejectBusinessTripRequest.ValidateAll() if the
// designated constraints aren't met.
type RejectBusinessTripRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RejectBusinessTripRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RejectBusinessTripRequestMultiError) AllErrors() []error { return m }

// RejectBusinessTripRequestValidationError is the validation error returned by
// RejectBusinessTripRequest.Validate if the designated constraints aren't met.
type RejectBusinessTripRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RejectBusinessTripRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RejectBusinessTripRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RejectBusinessTripRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RejectBusinessTripRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RejectBusinessTripRequestValidationError) ErrorName() string {
	return "RejectBusinessTripRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RejectBusinessTripRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRejectBusinessTripRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RejectBusinessTripRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RejectBusinessTripRequestValidationError{}

// Validate checks the field values on RejectBusinessTripResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RejectBusinessTripResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RejectBusinessTripResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RejectBusinessTripResponseMultiError, or nil if none found.
func (m *RejectBusinessTripResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RejectBusinessTripResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	// no validation rules for Message

	if len(errors) > 0 {
		return RejectBusinessTripResponseMultiError(errors)
	}

	return nil
}

// RejectBusinessTripResponseMultiError is an error wrapping multiple
// validation errors returned by RejectBusinessTripResponse.ValidateAll() if
// the designated constraints aren't met.
type RejectBusinessTripResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RejectBusinessTripResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RejectBusinessTripResponseMultiError) AllErrors() []error { return m }

// RejectBusinessTripResponseValidationError is the validation error returned
// by RejectBusinessTripResponse.Validate if the designated constraints aren't met.
type RejectBusinessTripResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RejectBusinessTripResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RejectBusinessTripResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RejectBusinessTripResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RejectBusinessTripResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RejectBusinessTripResponseValidationError) ErrorName() string {
	return "RejectBusinessTripResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RejectBusinessTripResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRejectBusinessTripResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RejectBusinessTripResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RejectBusinessTripResponseValidationError{}

// Validate checks the field values on SubmitTripReportRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SubmitTripReportRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SubmitTripReportRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SubmitTripReportRequestMultiError, or nil if none found.
func (m *SubmitTripReportRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SubmitTripReportRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for BusinessTripId

	// no validation rules for Report

	// no validation rules for ActualCost

	if len(errors) > 0 {
		return SubmitTripReportRequestMultiError(errors)
	}

	return nil
}

// SubmitTripReportRequestMultiError is an error wrapping multiple validation
// errors returned by SubmitTripReportRequest.ValidateAll() if the designated
// constraints aren't met.
type SubmitTripReportRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SubmitTripReportRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SubmitTripReportRequestMultiError) AllErrors() []error { return m }

// SubmitTripReportRequestValidationError is the validation error returned by
// SubmitTripReportRequest.Validate if the designated constraints aren't met.
type SubmitTripReportRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SubmitTripReportRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SubmitTripReportRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SubmitTripReportRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SubmitTripReportRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SubmitTripReportRequestValidationError) ErrorName() string {
	return "SubmitTripReportRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SubmitTripReportRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSubmitTripReportRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SubmitTripReportRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SubmitTripReportRequestValidationError{}
