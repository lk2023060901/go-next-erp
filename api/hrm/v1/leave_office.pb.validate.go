// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/hrm/v1/leave_office.proto

package hrmv1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on LeaveOfficeResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *LeaveOfficeResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LeaveOfficeResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// LeaveOfficeResponseMultiError, or nil if none found.
func (m *LeaveOfficeResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *LeaveOfficeResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for TenantId

	// no validation rules for EmployeeId

	// no validation rules for EmployeeName

	// no validation rules for DepartmentId

	if all {
		switch v := interface{}(m.GetStartTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, LeaveOfficeResponseValidationError{
					field:  "StartTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, LeaveOfficeResponseValidationError{
					field:  "StartTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStartTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return LeaveOfficeResponseValidationError{
				field:  "StartTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetEndTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, LeaveOfficeResponseValidationError{
					field:  "EndTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, LeaveOfficeResponseValidationError{
					field:  "EndTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEndTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return LeaveOfficeResponseValidationError{
				field:  "EndTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Duration

	// no validation rules for Destination

	// no validation rules for Purpose

	// no validation rules for Contact

	// no validation rules for ApprovalStatus

	// no validation rules for ApprovedBy

	if all {
		switch v := interface{}(m.GetApprovedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, LeaveOfficeResponseValidationError{
					field:  "ApprovedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, LeaveOfficeResponseValidationError{
					field:  "ApprovedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetApprovedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return LeaveOfficeResponseValidationError{
				field:  "ApprovedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for RejectReason

	// no validation rules for Remark

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, LeaveOfficeResponseValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, LeaveOfficeResponseValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return LeaveOfficeResponseValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, LeaveOfficeResponseValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, LeaveOfficeResponseValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return LeaveOfficeResponseValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return LeaveOfficeResponseMultiError(errors)
	}

	return nil
}

// LeaveOfficeResponseMultiError is an error wrapping multiple validation
// errors returned by LeaveOfficeResponse.ValidateAll() if the designated
// constraints aren't met.
type LeaveOfficeResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LeaveOfficeResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LeaveOfficeResponseMultiError) AllErrors() []error { return m }

// LeaveOfficeResponseValidationError is the validation error returned by
// LeaveOfficeResponse.Validate if the designated constraints aren't met.
type LeaveOfficeResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LeaveOfficeResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LeaveOfficeResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LeaveOfficeResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LeaveOfficeResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LeaveOfficeResponseValidationError) ErrorName() string {
	return "LeaveOfficeResponseValidationError"
}

// Error satisfies the builtin error interface
func (e LeaveOfficeResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLeaveOfficeResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LeaveOfficeResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LeaveOfficeResponseValidationError{}

// Validate checks the field values on CreateLeaveOfficeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateLeaveOfficeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateLeaveOfficeRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateLeaveOfficeRequestMultiError, or nil if none found.
func (m *CreateLeaveOfficeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateLeaveOfficeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TenantId

	// no validation rules for EmployeeId

	// no validation rules for EmployeeName

	// no validation rules for DepartmentId

	if all {
		switch v := interface{}(m.GetStartTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateLeaveOfficeRequestValidationError{
					field:  "StartTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateLeaveOfficeRequestValidationError{
					field:  "StartTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStartTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateLeaveOfficeRequestValidationError{
				field:  "StartTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetEndTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateLeaveOfficeRequestValidationError{
					field:  "EndTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateLeaveOfficeRequestValidationError{
					field:  "EndTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEndTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateLeaveOfficeRequestValidationError{
				field:  "EndTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Destination

	// no validation rules for Purpose

	// no validation rules for Contact

	// no validation rules for Remark

	if len(errors) > 0 {
		return CreateLeaveOfficeRequestMultiError(errors)
	}

	return nil
}

// CreateLeaveOfficeRequestMultiError is an error wrapping multiple validation
// errors returned by CreateLeaveOfficeRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateLeaveOfficeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateLeaveOfficeRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateLeaveOfficeRequestMultiError) AllErrors() []error { return m }

// CreateLeaveOfficeRequestValidationError is the validation error returned by
// CreateLeaveOfficeRequest.Validate if the designated constraints aren't met.
type CreateLeaveOfficeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateLeaveOfficeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateLeaveOfficeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateLeaveOfficeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateLeaveOfficeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateLeaveOfficeRequestValidationError) ErrorName() string {
	return "CreateLeaveOfficeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateLeaveOfficeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateLeaveOfficeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateLeaveOfficeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateLeaveOfficeRequestValidationError{}

// Validate checks the field values on UpdateLeaveOfficeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateLeaveOfficeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateLeaveOfficeRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateLeaveOfficeRequestMultiError, or nil if none found.
func (m *UpdateLeaveOfficeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateLeaveOfficeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if all {
		switch v := interface{}(m.GetStartTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateLeaveOfficeRequestValidationError{
					field:  "StartTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateLeaveOfficeRequestValidationError{
					field:  "StartTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStartTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateLeaveOfficeRequestValidationError{
				field:  "StartTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetEndTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateLeaveOfficeRequestValidationError{
					field:  "EndTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateLeaveOfficeRequestValidationError{
					field:  "EndTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEndTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateLeaveOfficeRequestValidationError{
				field:  "EndTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Destination

	// no validation rules for Purpose

	// no validation rules for Contact

	// no validation rules for Remark

	if len(errors) > 0 {
		return UpdateLeaveOfficeRequestMultiError(errors)
	}

	return nil
}

// UpdateLeaveOfficeRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateLeaveOfficeRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateLeaveOfficeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateLeaveOfficeRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateLeaveOfficeRequestMultiError) AllErrors() []error { return m }

// UpdateLeaveOfficeRequestValidationError is the validation error returned by
// UpdateLeaveOfficeRequest.Validate if the designated constraints aren't met.
type UpdateLeaveOfficeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateLeaveOfficeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateLeaveOfficeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateLeaveOfficeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateLeaveOfficeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateLeaveOfficeRequestValidationError) ErrorName() string {
	return "UpdateLeaveOfficeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateLeaveOfficeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateLeaveOfficeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateLeaveOfficeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateLeaveOfficeRequestValidationError{}

// Validate checks the field values on DeleteLeaveOfficeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteLeaveOfficeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteLeaveOfficeRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteLeaveOfficeRequestMultiError, or nil if none found.
func (m *DeleteLeaveOfficeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteLeaveOfficeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DeleteLeaveOfficeRequestMultiError(errors)
	}

	return nil
}

// DeleteLeaveOfficeRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteLeaveOfficeRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteLeaveOfficeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteLeaveOfficeRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteLeaveOfficeRequestMultiError) AllErrors() []error { return m }

// DeleteLeaveOfficeRequestValidationError is the validation error returned by
// DeleteLeaveOfficeRequest.Validate if the designated constraints aren't met.
type DeleteLeaveOfficeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteLeaveOfficeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteLeaveOfficeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteLeaveOfficeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteLeaveOfficeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteLeaveOfficeRequestValidationError) ErrorName() string {
	return "DeleteLeaveOfficeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteLeaveOfficeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteLeaveOfficeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteLeaveOfficeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteLeaveOfficeRequestValidationError{}

// Validate checks the field values on DeleteLeaveOfficeResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteLeaveOfficeResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteLeaveOfficeResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteLeaveOfficeResponseMultiError, or nil if none found.
func (m *DeleteLeaveOfficeResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteLeaveOfficeResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	// no validation rules for Message

	if len(errors) > 0 {
		return DeleteLeaveOfficeResponseMultiError(errors)
	}

	return nil
}

// DeleteLeaveOfficeResponseMultiError is an error wrapping multiple validation
// errors returned by DeleteLeaveOfficeResponse.ValidateAll() if the
// designated constraints aren't met.
type DeleteLeaveOfficeResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteLeaveOfficeResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteLeaveOfficeResponseMultiError) AllErrors() []error { return m }

// DeleteLeaveOfficeResponseValidationError is the validation error returned by
// DeleteLeaveOfficeResponse.Validate if the designated constraints aren't met.
type DeleteLeaveOfficeResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteLeaveOfficeResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteLeaveOfficeResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteLeaveOfficeResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteLeaveOfficeResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteLeaveOfficeResponseValidationError) ErrorName() string {
	return "DeleteLeaveOfficeResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteLeaveOfficeResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteLeaveOfficeResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteLeaveOfficeResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteLeaveOfficeResponseValidationError{}

// Validate checks the field values on GetLeaveOfficeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetLeaveOfficeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetLeaveOfficeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetLeaveOfficeRequestMultiError, or nil if none found.
func (m *GetLeaveOfficeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetLeaveOfficeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetLeaveOfficeRequestMultiError(errors)
	}

	return nil
}

// GetLeaveOfficeRequestMultiError is an error wrapping multiple validation
// errors returned by GetLeaveOfficeRequest.ValidateAll() if the designated
// constraints aren't met.
type GetLeaveOfficeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetLeaveOfficeRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetLeaveOfficeRequestMultiError) AllErrors() []error { return m }

// GetLeaveOfficeRequestValidationError is the validation error returned by
// GetLeaveOfficeRequest.Validate if the designated constraints aren't met.
type GetLeaveOfficeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetLeaveOfficeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetLeaveOfficeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetLeaveOfficeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetLeaveOfficeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetLeaveOfficeRequestValidationError) ErrorName() string {
	return "GetLeaveOfficeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetLeaveOfficeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetLeaveOfficeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetLeaveOfficeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetLeaveOfficeRequestValidationError{}

// Validate checks the field values on ListLeaveOfficesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListLeaveOfficesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListLeaveOfficesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListLeaveOfficesRequestMultiError, or nil if none found.
func (m *ListLeaveOfficesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListLeaveOfficesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TenantId

	// no validation rules for EmployeeId

	// no validation rules for DepartmentId

	// no validation rules for ApprovalStatus

	if all {
		switch v := interface{}(m.GetStartDate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListLeaveOfficesRequestValidationError{
					field:  "StartDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListLeaveOfficesRequestValidationError{
					field:  "StartDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStartDate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListLeaveOfficesRequestValidationError{
				field:  "StartDate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetEndDate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListLeaveOfficesRequestValidationError{
					field:  "EndDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListLeaveOfficesRequestValidationError{
					field:  "EndDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEndDate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListLeaveOfficesRequestValidationError{
				field:  "EndDate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Keyword

	// no validation rules for Page

	// no validation rules for PageSize

	if len(errors) > 0 {
		return ListLeaveOfficesRequestMultiError(errors)
	}

	return nil
}

// ListLeaveOfficesRequestMultiError is an error wrapping multiple validation
// errors returned by ListLeaveOfficesRequest.ValidateAll() if the designated
// constraints aren't met.
type ListLeaveOfficesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListLeaveOfficesRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListLeaveOfficesRequestMultiError) AllErrors() []error { return m }

// ListLeaveOfficesRequestValidationError is the validation error returned by
// ListLeaveOfficesRequest.Validate if the designated constraints aren't met.
type ListLeaveOfficesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListLeaveOfficesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListLeaveOfficesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListLeaveOfficesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListLeaveOfficesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListLeaveOfficesRequestValidationError) ErrorName() string {
	return "ListLeaveOfficesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListLeaveOfficesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListLeaveOfficesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListLeaveOfficesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListLeaveOfficesRequestValidationError{}

// Validate checks the field values on ListLeaveOfficesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListLeaveOfficesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListLeaveOfficesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListLeaveOfficesResponseMultiError, or nil if none found.
func (m *ListLeaveOfficesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListLeaveOfficesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListLeaveOfficesResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListLeaveOfficesResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListLeaveOfficesResponseValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Total

	// no validation rules for Page

	// no validation rules for PageSize

	if len(errors) > 0 {
		return ListLeaveOfficesResponseMultiError(errors)
	}

	return nil
}

// ListLeaveOfficesResponseMultiError is an error wrapping multiple validation
// errors returned by ListLeaveOfficesResponse.ValidateAll() if the designated
// constraints aren't met.
type ListLeaveOfficesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListLeaveOfficesResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListLeaveOfficesResponseMultiError) AllErrors() []error { return m }

// ListLeaveOfficesResponseValidationError is the validation error returned by
// ListLeaveOfficesResponse.Validate if the designated constraints aren't met.
type ListLeaveOfficesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListLeaveOfficesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListLeaveOfficesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListLeaveOfficesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListLeaveOfficesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListLeaveOfficesResponseValidationError) ErrorName() string {
	return "ListLeaveOfficesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListLeaveOfficesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListLeaveOfficesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListLeaveOfficesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListLeaveOfficesResponseValidationError{}

// Validate checks the field values on ListEmployeeLeaveOfficesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListEmployeeLeaveOfficesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListEmployeeLeaveOfficesRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListEmployeeLeaveOfficesRequestMultiError, or nil if none found.
func (m *ListEmployeeLeaveOfficesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListEmployeeLeaveOfficesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for EmployeeId

	if all {
		switch v := interface{}(m.GetStartDate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListEmployeeLeaveOfficesRequestValidationError{
					field:  "StartDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListEmployeeLeaveOfficesRequestValidationError{
					field:  "StartDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStartDate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListEmployeeLeaveOfficesRequestValidationError{
				field:  "StartDate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetEndDate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListEmployeeLeaveOfficesRequestValidationError{
					field:  "EndDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListEmployeeLeaveOfficesRequestValidationError{
					field:  "EndDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEndDate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListEmployeeLeaveOfficesRequestValidationError{
				field:  "EndDate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for ApprovalStatus

	// no validation rules for Page

	// no validation rules for PageSize

	if len(errors) > 0 {
		return ListEmployeeLeaveOfficesRequestMultiError(errors)
	}

	return nil
}

// ListEmployeeLeaveOfficesRequestMultiError is an error wrapping multiple
// validation errors returned by ListEmployeeLeaveOfficesRequest.ValidateAll()
// if the designated constraints aren't met.
type ListEmployeeLeaveOfficesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListEmployeeLeaveOfficesRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListEmployeeLeaveOfficesRequestMultiError) AllErrors() []error { return m }

// ListEmployeeLeaveOfficesRequestValidationError is the validation error
// returned by ListEmployeeLeaveOfficesRequest.Validate if the designated
// constraints aren't met.
type ListEmployeeLeaveOfficesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListEmployeeLeaveOfficesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListEmployeeLeaveOfficesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListEmployeeLeaveOfficesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListEmployeeLeaveOfficesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListEmployeeLeaveOfficesRequestValidationError) ErrorName() string {
	return "ListEmployeeLeaveOfficesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListEmployeeLeaveOfficesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListEmployeeLeaveOfficesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListEmployeeLeaveOfficesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListEmployeeLeaveOfficesRequestValidationError{}

// Validate checks the field values on ListPendingLeaveOfficesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListPendingLeaveOfficesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListPendingLeaveOfficesRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListPendingLeaveOfficesRequestMultiError, or nil if none found.
func (m *ListPendingLeaveOfficesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListPendingLeaveOfficesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TenantId

	// no validation rules for ApproverId

	// no validation rules for Page

	// no validation rules for PageSize

	if len(errors) > 0 {
		return ListPendingLeaveOfficesRequestMultiError(errors)
	}

	return nil
}

// ListPendingLeaveOfficesRequestMultiError is an error wrapping multiple
// validation errors returned by ListPendingLeaveOfficesRequest.ValidateAll()
// if the designated constraints aren't met.
type ListPendingLeaveOfficesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListPendingLeaveOfficesRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListPendingLeaveOfficesRequestMultiError) AllErrors() []error { return m }

// ListPendingLeaveOfficesRequestValidationError is the validation error
// returned by ListPendingLeaveOfficesRequest.Validate if the designated
// constraints aren't met.
type ListPendingLeaveOfficesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListPendingLeaveOfficesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListPendingLeaveOfficesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListPendingLeaveOfficesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListPendingLeaveOfficesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListPendingLeaveOfficesRequestValidationError) ErrorName() string {
	return "ListPendingLeaveOfficesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListPendingLeaveOfficesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListPendingLeaveOfficesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListPendingLeaveOfficesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListPendingLeaveOfficesRequestValidationError{}

// Validate checks the field values on SubmitLeaveOfficeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SubmitLeaveOfficeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SubmitLeaveOfficeRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SubmitLeaveOfficeRequestMultiError, or nil if none found.
func (m *SubmitLeaveOfficeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SubmitLeaveOfficeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for LeaveOfficeId

	// no validation rules for SubmitterId

	if len(errors) > 0 {
		return SubmitLeaveOfficeRequestMultiError(errors)
	}

	return nil
}

// SubmitLeaveOfficeRequestMultiError is an error wrapping multiple validation
// errors returned by SubmitLeaveOfficeRequest.ValidateAll() if the designated
// constraints aren't met.
type SubmitLeaveOfficeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SubmitLeaveOfficeRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SubmitLeaveOfficeRequestMultiError) AllErrors() []error { return m }

// SubmitLeaveOfficeRequestValidationError is the validation error returned by
// SubmitLeaveOfficeRequest.Validate if the designated constraints aren't met.
type SubmitLeaveOfficeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SubmitLeaveOfficeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SubmitLeaveOfficeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SubmitLeaveOfficeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SubmitLeaveOfficeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SubmitLeaveOfficeRequestValidationError) ErrorName() string {
	return "SubmitLeaveOfficeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SubmitLeaveOfficeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSubmitLeaveOfficeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SubmitLeaveOfficeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SubmitLeaveOfficeRequestValidationError{}

// Validate checks the field values on SubmitLeaveOfficeResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SubmitLeaveOfficeResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SubmitLeaveOfficeResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SubmitLeaveOfficeResponseMultiError, or nil if none found.
func (m *SubmitLeaveOfficeResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SubmitLeaveOfficeResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	// no validation rules for Message

	// no validation rules for WorkflowId

	if len(errors) > 0 {
		return SubmitLeaveOfficeResponseMultiError(errors)
	}

	return nil
}

// SubmitLeaveOfficeResponseMultiError is an error wrapping multiple validation
// errors returned by SubmitLeaveOfficeResponse.ValidateAll() if the
// designated constraints aren't met.
type SubmitLeaveOfficeResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SubmitLeaveOfficeResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SubmitLeaveOfficeResponseMultiError) AllErrors() []error { return m }

// SubmitLeaveOfficeResponseValidationError is the validation error returned by
// SubmitLeaveOfficeResponse.Validate if the designated constraints aren't met.
type SubmitLeaveOfficeResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SubmitLeaveOfficeResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SubmitLeaveOfficeResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SubmitLeaveOfficeResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SubmitLeaveOfficeResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SubmitLeaveOfficeResponseValidationError) ErrorName() string {
	return "SubmitLeaveOfficeResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SubmitLeaveOfficeResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSubmitLeaveOfficeResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SubmitLeaveOfficeResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SubmitLeaveOfficeResponseValidationError{}

// Validate checks the field values on ApproveLeaveOfficeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ApproveLeaveOfficeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ApproveLeaveOfficeRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ApproveLeaveOfficeRequestMultiError, or nil if none found.
func (m *ApproveLeaveOfficeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ApproveLeaveOfficeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for LeaveOfficeId

	// no validation rules for ApproverId

	// no validation rules for Comment

	if len(errors) > 0 {
		return ApproveLeaveOfficeRequestMultiError(errors)
	}

	return nil
}

// ApproveLeaveOfficeRequestMultiError is an error wrapping multiple validation
// errors returned by ApproveLeaveOfficeRequest.ValidateAll() if the
// designated constraints aren't met.
type ApproveLeaveOfficeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ApproveLeaveOfficeRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ApproveLeaveOfficeRequestMultiError) AllErrors() []error { return m }

// ApproveLeaveOfficeRequestValidationError is the validation error returned by
// ApproveLeaveOfficeRequest.Validate if the designated constraints aren't met.
type ApproveLeaveOfficeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ApproveLeaveOfficeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ApproveLeaveOfficeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ApproveLeaveOfficeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ApproveLeaveOfficeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ApproveLeaveOfficeRequestValidationError) ErrorName() string {
	return "ApproveLeaveOfficeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ApproveLeaveOfficeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sApproveLeaveOfficeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ApproveLeaveOfficeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ApproveLeaveOfficeRequestValidationError{}

// Validate checks the field values on ApproveLeaveOfficeResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ApproveLeaveOfficeResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ApproveLeaveOfficeResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ApproveLeaveOfficeResponseMultiError, or nil if none found.
func (m *ApproveLeaveOfficeResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ApproveLeaveOfficeResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	// no validation rules for Message

	if len(errors) > 0 {
		return ApproveLeaveOfficeResponseMultiError(errors)
	}

	return nil
}

// ApproveLeaveOfficeResponseMultiError is an error wrapping multiple
// validation errors returned by ApproveLeaveOfficeResponse.ValidateAll() if
// the designated constraints aren't met.
type ApproveLeaveOfficeResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ApproveLeaveOfficeResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ApproveLeaveOfficeResponseMultiError) AllErrors() []error { return m }

// ApproveLeaveOfficeResponseValidationError is the validation error returned
// by ApproveLeaveOfficeResponse.Validate if the designated constraints aren't met.
type ApproveLeaveOfficeResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ApproveLeaveOfficeResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ApproveLeaveOfficeResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ApproveLeaveOfficeResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ApproveLeaveOfficeResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ApproveLeaveOfficeResponseValidationError) ErrorName() string {
	return "ApproveLeaveOfficeResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ApproveLeaveOfficeResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sApproveLeaveOfficeResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ApproveLeaveOfficeResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ApproveLeaveOfficeResponseValidationError{}

// Validate checks the field values on RejectLeaveOfficeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RejectLeaveOfficeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RejectLeaveOfficeRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RejectLeaveOfficeRequestMultiError, or nil if none found.
func (m *RejectLeaveOfficeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RejectLeaveOfficeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for LeaveOfficeId

	// no validation rules for ApproverId

	// no validation rules for Reason

	if len(errors) > 0 {
		return RejectLeaveOfficeRequestMultiError(errors)
	}

	return nil
}

// RejectLeaveOfficeRequestMultiError is an error wrapping multiple validation
// errors returned by RejectLeaveOfficeRequest.ValidateAll() if the designated
// constraints aren't met.
type RejectLeaveOfficeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RejectLeaveOfficeRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RejectLeaveOfficeRequestMultiError) AllErrors() []error { return m }

// RejectLeaveOfficeRequestValidationError is the validation error returned by
// RejectLeaveOfficeRequest.Validate if the designated constraints aren't met.
type RejectLeaveOfficeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RejectLeaveOfficeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RejectLeaveOfficeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RejectLeaveOfficeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RejectLeaveOfficeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RejectLeaveOfficeRequestValidationError) ErrorName() string {
	return "RejectLeaveOfficeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RejectLeaveOfficeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRejectLeaveOfficeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RejectLeaveOfficeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RejectLeaveOfficeRequestValidationError{}

// Validate checks the field values on RejectLeaveOfficeResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RejectLeaveOfficeResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RejectLeaveOfficeResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RejectLeaveOfficeResponseMultiError, or nil if none found.
func (m *RejectLeaveOfficeResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RejectLeaveOfficeResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	// no validation rules for Message

	if len(errors) > 0 {
		return RejectLeaveOfficeResponseMultiError(errors)
	}

	return nil
}

// RejectLeaveOfficeResponseMultiError is an error wrapping multiple validation
// errors returned by RejectLeaveOfficeResponse.ValidateAll() if the
// designated constraints aren't met.
type RejectLeaveOfficeResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RejectLeaveOfficeResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RejectLeaveOfficeResponseMultiError) AllErrors() []error { return m }

// RejectLeaveOfficeResponseValidationError is the validation error returned by
// RejectLeaveOfficeResponse.Validate if the designated constraints aren't met.
type RejectLeaveOfficeResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RejectLeaveOfficeResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RejectLeaveOfficeResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RejectLeaveOfficeResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RejectLeaveOfficeResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RejectLeaveOfficeResponseValidationError) ErrorName() string {
	return "RejectLeaveOfficeResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RejectLeaveOfficeResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRejectLeaveOfficeResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RejectLeaveOfficeResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RejectLeaveOfficeResponseValidationError{}
