// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: api/hrm/v1/leave_office.proto

package hrmv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// LeaveOfficeServiceClient is the client API for LeaveOfficeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LeaveOfficeServiceClient interface {
	// 创建外出申请
	CreateLeaveOffice(ctx context.Context, in *CreateLeaveOfficeRequest, opts ...grpc.CallOption) (*LeaveOfficeResponse, error)
	// 更新外出申请
	UpdateLeaveOffice(ctx context.Context, in *UpdateLeaveOfficeRequest, opts ...grpc.CallOption) (*LeaveOfficeResponse, error)
	// 删除外出申请
	DeleteLeaveOffice(ctx context.Context, in *DeleteLeaveOfficeRequest, opts ...grpc.CallOption) (*DeleteLeaveOfficeResponse, error)
	// 获取外出详情
	GetLeaveOffice(ctx context.Context, in *GetLeaveOfficeRequest, opts ...grpc.CallOption) (*LeaveOfficeResponse, error)
	// 列表查询外出记录
	ListLeaveOffices(ctx context.Context, in *ListLeaveOfficesRequest, opts ...grpc.CallOption) (*ListLeaveOfficesResponse, error)
	// 查询员工外出记录
	ListEmployeeLeaveOffices(ctx context.Context, in *ListEmployeeLeaveOfficesRequest, opts ...grpc.CallOption) (*ListLeaveOfficesResponse, error)
	// 查询待审批的外出
	ListPendingLeaveOffices(ctx context.Context, in *ListPendingLeaveOfficesRequest, opts ...grpc.CallOption) (*ListLeaveOfficesResponse, error)
	// 提交外出审批
	SubmitLeaveOffice(ctx context.Context, in *SubmitLeaveOfficeRequest, opts ...grpc.CallOption) (*SubmitLeaveOfficeResponse, error)
	// 批准外出
	ApproveLeaveOffice(ctx context.Context, in *ApproveLeaveOfficeRequest, opts ...grpc.CallOption) (*ApproveLeaveOfficeResponse, error)
	// 拒绝外出
	RejectLeaveOffice(ctx context.Context, in *RejectLeaveOfficeRequest, opts ...grpc.CallOption) (*RejectLeaveOfficeResponse, error)
}

type leaveOfficeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLeaveOfficeServiceClient(cc grpc.ClientConnInterface) LeaveOfficeServiceClient {
	return &leaveOfficeServiceClient{cc}
}

func (c *leaveOfficeServiceClient) CreateLeaveOffice(ctx context.Context, in *CreateLeaveOfficeRequest, opts ...grpc.CallOption) (*LeaveOfficeResponse, error) {
	out := new(LeaveOfficeResponse)
	err := c.cc.Invoke(ctx, "/api.hrm.v1.LeaveOfficeService/CreateLeaveOffice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *leaveOfficeServiceClient) UpdateLeaveOffice(ctx context.Context, in *UpdateLeaveOfficeRequest, opts ...grpc.CallOption) (*LeaveOfficeResponse, error) {
	out := new(LeaveOfficeResponse)
	err := c.cc.Invoke(ctx, "/api.hrm.v1.LeaveOfficeService/UpdateLeaveOffice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *leaveOfficeServiceClient) DeleteLeaveOffice(ctx context.Context, in *DeleteLeaveOfficeRequest, opts ...grpc.CallOption) (*DeleteLeaveOfficeResponse, error) {
	out := new(DeleteLeaveOfficeResponse)
	err := c.cc.Invoke(ctx, "/api.hrm.v1.LeaveOfficeService/DeleteLeaveOffice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *leaveOfficeServiceClient) GetLeaveOffice(ctx context.Context, in *GetLeaveOfficeRequest, opts ...grpc.CallOption) (*LeaveOfficeResponse, error) {
	out := new(LeaveOfficeResponse)
	err := c.cc.Invoke(ctx, "/api.hrm.v1.LeaveOfficeService/GetLeaveOffice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *leaveOfficeServiceClient) ListLeaveOffices(ctx context.Context, in *ListLeaveOfficesRequest, opts ...grpc.CallOption) (*ListLeaveOfficesResponse, error) {
	out := new(ListLeaveOfficesResponse)
	err := c.cc.Invoke(ctx, "/api.hrm.v1.LeaveOfficeService/ListLeaveOffices", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *leaveOfficeServiceClient) ListEmployeeLeaveOffices(ctx context.Context, in *ListEmployeeLeaveOfficesRequest, opts ...grpc.CallOption) (*ListLeaveOfficesResponse, error) {
	out := new(ListLeaveOfficesResponse)
	err := c.cc.Invoke(ctx, "/api.hrm.v1.LeaveOfficeService/ListEmployeeLeaveOffices", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *leaveOfficeServiceClient) ListPendingLeaveOffices(ctx context.Context, in *ListPendingLeaveOfficesRequest, opts ...grpc.CallOption) (*ListLeaveOfficesResponse, error) {
	out := new(ListLeaveOfficesResponse)
	err := c.cc.Invoke(ctx, "/api.hrm.v1.LeaveOfficeService/ListPendingLeaveOffices", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *leaveOfficeServiceClient) SubmitLeaveOffice(ctx context.Context, in *SubmitLeaveOfficeRequest, opts ...grpc.CallOption) (*SubmitLeaveOfficeResponse, error) {
	out := new(SubmitLeaveOfficeResponse)
	err := c.cc.Invoke(ctx, "/api.hrm.v1.LeaveOfficeService/SubmitLeaveOffice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *leaveOfficeServiceClient) ApproveLeaveOffice(ctx context.Context, in *ApproveLeaveOfficeRequest, opts ...grpc.CallOption) (*ApproveLeaveOfficeResponse, error) {
	out := new(ApproveLeaveOfficeResponse)
	err := c.cc.Invoke(ctx, "/api.hrm.v1.LeaveOfficeService/ApproveLeaveOffice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *leaveOfficeServiceClient) RejectLeaveOffice(ctx context.Context, in *RejectLeaveOfficeRequest, opts ...grpc.CallOption) (*RejectLeaveOfficeResponse, error) {
	out := new(RejectLeaveOfficeResponse)
	err := c.cc.Invoke(ctx, "/api.hrm.v1.LeaveOfficeService/RejectLeaveOffice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LeaveOfficeServiceServer is the server API for LeaveOfficeService service.
// All implementations should embed UnimplementedLeaveOfficeServiceServer
// for forward compatibility
type LeaveOfficeServiceServer interface {
	// 创建外出申请
	CreateLeaveOffice(context.Context, *CreateLeaveOfficeRequest) (*LeaveOfficeResponse, error)
	// 更新外出申请
	UpdateLeaveOffice(context.Context, *UpdateLeaveOfficeRequest) (*LeaveOfficeResponse, error)
	// 删除外出申请
	DeleteLeaveOffice(context.Context, *DeleteLeaveOfficeRequest) (*DeleteLeaveOfficeResponse, error)
	// 获取外出详情
	GetLeaveOffice(context.Context, *GetLeaveOfficeRequest) (*LeaveOfficeResponse, error)
	// 列表查询外出记录
	ListLeaveOffices(context.Context, *ListLeaveOfficesRequest) (*ListLeaveOfficesResponse, error)
	// 查询员工外出记录
	ListEmployeeLeaveOffices(context.Context, *ListEmployeeLeaveOfficesRequest) (*ListLeaveOfficesResponse, error)
	// 查询待审批的外出
	ListPendingLeaveOffices(context.Context, *ListPendingLeaveOfficesRequest) (*ListLeaveOfficesResponse, error)
	// 提交外出审批
	SubmitLeaveOffice(context.Context, *SubmitLeaveOfficeRequest) (*SubmitLeaveOfficeResponse, error)
	// 批准外出
	ApproveLeaveOffice(context.Context, *ApproveLeaveOfficeRequest) (*ApproveLeaveOfficeResponse, error)
	// 拒绝外出
	RejectLeaveOffice(context.Context, *RejectLeaveOfficeRequest) (*RejectLeaveOfficeResponse, error)
}

// UnimplementedLeaveOfficeServiceServer should be embedded to have forward compatible implementations.
type UnimplementedLeaveOfficeServiceServer struct {
}

func (UnimplementedLeaveOfficeServiceServer) CreateLeaveOffice(context.Context, *CreateLeaveOfficeRequest) (*LeaveOfficeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateLeaveOffice not implemented")
}
func (UnimplementedLeaveOfficeServiceServer) UpdateLeaveOffice(context.Context, *UpdateLeaveOfficeRequest) (*LeaveOfficeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateLeaveOffice not implemented")
}
func (UnimplementedLeaveOfficeServiceServer) DeleteLeaveOffice(context.Context, *DeleteLeaveOfficeRequest) (*DeleteLeaveOfficeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteLeaveOffice not implemented")
}
func (UnimplementedLeaveOfficeServiceServer) GetLeaveOffice(context.Context, *GetLeaveOfficeRequest) (*LeaveOfficeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLeaveOffice not implemented")
}
func (UnimplementedLeaveOfficeServiceServer) ListLeaveOffices(context.Context, *ListLeaveOfficesRequest) (*ListLeaveOfficesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListLeaveOffices not implemented")
}
func (UnimplementedLeaveOfficeServiceServer) ListEmployeeLeaveOffices(context.Context, *ListEmployeeLeaveOfficesRequest) (*ListLeaveOfficesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListEmployeeLeaveOffices not implemented")
}
func (UnimplementedLeaveOfficeServiceServer) ListPendingLeaveOffices(context.Context, *ListPendingLeaveOfficesRequest) (*ListLeaveOfficesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPendingLeaveOffices not implemented")
}
func (UnimplementedLeaveOfficeServiceServer) SubmitLeaveOffice(context.Context, *SubmitLeaveOfficeRequest) (*SubmitLeaveOfficeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitLeaveOffice not implemented")
}
func (UnimplementedLeaveOfficeServiceServer) ApproveLeaveOffice(context.Context, *ApproveLeaveOfficeRequest) (*ApproveLeaveOfficeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApproveLeaveOffice not implemented")
}
func (UnimplementedLeaveOfficeServiceServer) RejectLeaveOffice(context.Context, *RejectLeaveOfficeRequest) (*RejectLeaveOfficeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RejectLeaveOffice not implemented")
}

// UnsafeLeaveOfficeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LeaveOfficeServiceServer will
// result in compilation errors.
type UnsafeLeaveOfficeServiceServer interface {
	mustEmbedUnimplementedLeaveOfficeServiceServer()
}

func RegisterLeaveOfficeServiceServer(s grpc.ServiceRegistrar, srv LeaveOfficeServiceServer) {
	s.RegisterService(&LeaveOfficeService_ServiceDesc, srv)
}

func _LeaveOfficeService_CreateLeaveOffice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateLeaveOfficeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LeaveOfficeServiceServer).CreateLeaveOffice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.hrm.v1.LeaveOfficeService/CreateLeaveOffice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LeaveOfficeServiceServer).CreateLeaveOffice(ctx, req.(*CreateLeaveOfficeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LeaveOfficeService_UpdateLeaveOffice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateLeaveOfficeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LeaveOfficeServiceServer).UpdateLeaveOffice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.hrm.v1.LeaveOfficeService/UpdateLeaveOffice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LeaveOfficeServiceServer).UpdateLeaveOffice(ctx, req.(*UpdateLeaveOfficeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LeaveOfficeService_DeleteLeaveOffice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteLeaveOfficeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LeaveOfficeServiceServer).DeleteLeaveOffice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.hrm.v1.LeaveOfficeService/DeleteLeaveOffice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LeaveOfficeServiceServer).DeleteLeaveOffice(ctx, req.(*DeleteLeaveOfficeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LeaveOfficeService_GetLeaveOffice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLeaveOfficeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LeaveOfficeServiceServer).GetLeaveOffice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.hrm.v1.LeaveOfficeService/GetLeaveOffice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LeaveOfficeServiceServer).GetLeaveOffice(ctx, req.(*GetLeaveOfficeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LeaveOfficeService_ListLeaveOffices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListLeaveOfficesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LeaveOfficeServiceServer).ListLeaveOffices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.hrm.v1.LeaveOfficeService/ListLeaveOffices",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LeaveOfficeServiceServer).ListLeaveOffices(ctx, req.(*ListLeaveOfficesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LeaveOfficeService_ListEmployeeLeaveOffices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListEmployeeLeaveOfficesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LeaveOfficeServiceServer).ListEmployeeLeaveOffices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.hrm.v1.LeaveOfficeService/ListEmployeeLeaveOffices",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LeaveOfficeServiceServer).ListEmployeeLeaveOffices(ctx, req.(*ListEmployeeLeaveOfficesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LeaveOfficeService_ListPendingLeaveOffices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPendingLeaveOfficesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LeaveOfficeServiceServer).ListPendingLeaveOffices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.hrm.v1.LeaveOfficeService/ListPendingLeaveOffices",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LeaveOfficeServiceServer).ListPendingLeaveOffices(ctx, req.(*ListPendingLeaveOfficesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LeaveOfficeService_SubmitLeaveOffice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubmitLeaveOfficeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LeaveOfficeServiceServer).SubmitLeaveOffice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.hrm.v1.LeaveOfficeService/SubmitLeaveOffice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LeaveOfficeServiceServer).SubmitLeaveOffice(ctx, req.(*SubmitLeaveOfficeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LeaveOfficeService_ApproveLeaveOffice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApproveLeaveOfficeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LeaveOfficeServiceServer).ApproveLeaveOffice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.hrm.v1.LeaveOfficeService/ApproveLeaveOffice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LeaveOfficeServiceServer).ApproveLeaveOffice(ctx, req.(*ApproveLeaveOfficeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LeaveOfficeService_RejectLeaveOffice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RejectLeaveOfficeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LeaveOfficeServiceServer).RejectLeaveOffice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.hrm.v1.LeaveOfficeService/RejectLeaveOffice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LeaveOfficeServiceServer).RejectLeaveOffice(ctx, req.(*RejectLeaveOfficeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LeaveOfficeService_ServiceDesc is the grpc.ServiceDesc for LeaveOfficeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LeaveOfficeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.hrm.v1.LeaveOfficeService",
	HandlerType: (*LeaveOfficeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateLeaveOffice",
			Handler:    _LeaveOfficeService_CreateLeaveOffice_Handler,
		},
		{
			MethodName: "UpdateLeaveOffice",
			Handler:    _LeaveOfficeService_UpdateLeaveOffice_Handler,
		},
		{
			MethodName: "DeleteLeaveOffice",
			Handler:    _LeaveOfficeService_DeleteLeaveOffice_Handler,
		},
		{
			MethodName: "GetLeaveOffice",
			Handler:    _LeaveOfficeService_GetLeaveOffice_Handler,
		},
		{
			MethodName: "ListLeaveOffices",
			Handler:    _LeaveOfficeService_ListLeaveOffices_Handler,
		},
		{
			MethodName: "ListEmployeeLeaveOffices",
			Handler:    _LeaveOfficeService_ListEmployeeLeaveOffices_Handler,
		},
		{
			MethodName: "ListPendingLeaveOffices",
			Handler:    _LeaveOfficeService_ListPendingLeaveOffices_Handler,
		},
		{
			MethodName: "SubmitLeaveOffice",
			Handler:    _LeaveOfficeService_SubmitLeaveOffice_Handler,
		},
		{
			MethodName: "ApproveLeaveOffice",
			Handler:    _LeaveOfficeService_ApproveLeaveOffice_Handler,
		},
		{
			MethodName: "RejectLeaveOffice",
			Handler:    _LeaveOfficeService_RejectLeaveOffice_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/hrm/v1/leave_office.proto",
}
