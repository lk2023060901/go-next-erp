// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/hrm/v1/attendance.proto

package hrmv1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on ClockInRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ClockInRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ClockInRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ClockInRequestMultiError,
// or nil if none found.
func (m *ClockInRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ClockInRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TenantId

	// no validation rules for EmployeeId

	// no validation rules for ClockType

	// no validation rules for CheckInMethod

	if all {
		switch v := interface{}(m.GetLocation()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ClockInRequestValidationError{
					field:  "Location",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ClockInRequestValidationError{
					field:  "Location",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetLocation()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ClockInRequestValidationError{
				field:  "Location",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for WifiSsid

	// no validation rules for WifiMac

	// no validation rules for PhotoUrl

	// no validation rules for FaceScore

	// no validation rules for DeviceId

	// no validation rules for Remark

	if len(errors) > 0 {
		return ClockInRequestMultiError(errors)
	}

	return nil
}

// ClockInRequestMultiError is an error wrapping multiple validation errors
// returned by ClockInRequest.ValidateAll() if the designated constraints
// aren't met.
type ClockInRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ClockInRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ClockInRequestMultiError) AllErrors() []error { return m }

// ClockInRequestValidationError is the validation error returned by
// ClockInRequest.Validate if the designated constraints aren't met.
type ClockInRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ClockInRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ClockInRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ClockInRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ClockInRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ClockInRequestValidationError) ErrorName() string { return "ClockInRequestValidationError" }

// Error satisfies the builtin error interface
func (e ClockInRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sClockInRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ClockInRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ClockInRequestValidationError{}

// Validate checks the field values on LocationInfo with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *LocationInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LocationInfo with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in LocationInfoMultiError, or
// nil if none found.
func (m *LocationInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *LocationInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Latitude

	// no validation rules for Longitude

	// no validation rules for Accuracy

	// no validation rules for Address

	if len(errors) > 0 {
		return LocationInfoMultiError(errors)
	}

	return nil
}

// LocationInfoMultiError is an error wrapping multiple validation errors
// returned by LocationInfo.ValidateAll() if the designated constraints aren't met.
type LocationInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LocationInfoMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LocationInfoMultiError) AllErrors() []error { return m }

// LocationInfoValidationError is the validation error returned by
// LocationInfo.Validate if the designated constraints aren't met.
type LocationInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LocationInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LocationInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LocationInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LocationInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LocationInfoValidationError) ErrorName() string { return "LocationInfoValidationError" }

// Error satisfies the builtin error interface
func (e LocationInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLocationInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LocationInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LocationInfoValidationError{}

// Validate checks the field values on ClockInResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ClockInResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ClockInResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ClockInResponseMultiError, or nil if none found.
func (m *ClockInResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ClockInResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for EmployeeId

	// no validation rules for EmployeeName

	// no validation rules for ClockTime

	// no validation rules for ClockType

	// no validation rules for Status

	// no validation rules for ShiftName

	// no validation rules for IsException

	// no validation rules for ExceptionReason

	// no validation rules for Message

	if len(errors) > 0 {
		return ClockInResponseMultiError(errors)
	}

	return nil
}

// ClockInResponseMultiError is an error wrapping multiple validation errors
// returned by ClockInResponse.ValidateAll() if the designated constraints
// aren't met.
type ClockInResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ClockInResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ClockInResponseMultiError) AllErrors() []error { return m }

// ClockInResponseValidationError is the validation error returned by
// ClockInResponse.Validate if the designated constraints aren't met.
type ClockInResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ClockInResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ClockInResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ClockInResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ClockInResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ClockInResponseValidationError) ErrorName() string { return "ClockInResponseValidationError" }

// Error satisfies the builtin error interface
func (e ClockInResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sClockInResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ClockInResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ClockInResponseValidationError{}

// Validate checks the field values on GetAttendanceRecordRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAttendanceRecordRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAttendanceRecordRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAttendanceRecordRequestMultiError, or nil if none found.
func (m *GetAttendanceRecordRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAttendanceRecordRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetAttendanceRecordRequestMultiError(errors)
	}

	return nil
}

// GetAttendanceRecordRequestMultiError is an error wrapping multiple
// validation errors returned by GetAttendanceRecordRequest.ValidateAll() if
// the designated constraints aren't met.
type GetAttendanceRecordRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAttendanceRecordRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAttendanceRecordRequestMultiError) AllErrors() []error { return m }

// GetAttendanceRecordRequestValidationError is the validation error returned
// by GetAttendanceRecordRequest.Validate if the designated constraints aren't met.
type GetAttendanceRecordRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAttendanceRecordRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAttendanceRecordRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAttendanceRecordRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAttendanceRecordRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAttendanceRecordRequestValidationError) ErrorName() string {
	return "GetAttendanceRecordRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetAttendanceRecordRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAttendanceRecordRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAttendanceRecordRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAttendanceRecordRequestValidationError{}

// Validate checks the field values on ListEmployeeAttendanceRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListEmployeeAttendanceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListEmployeeAttendanceRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListEmployeeAttendanceRequestMultiError, or nil if none found.
func (m *ListEmployeeAttendanceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListEmployeeAttendanceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TenantId

	// no validation rules for EmployeeId

	// no validation rules for StartDate

	// no validation rules for EndDate

	// no validation rules for Page

	// no validation rules for PageSize

	// no validation rules for Cursor

	// no validation rules for UseCursor

	if len(errors) > 0 {
		return ListEmployeeAttendanceRequestMultiError(errors)
	}

	return nil
}

// ListEmployeeAttendanceRequestMultiError is an error wrapping multiple
// validation errors returned by ListEmployeeAttendanceRequest.ValidateAll()
// if the designated constraints aren't met.
type ListEmployeeAttendanceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListEmployeeAttendanceRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListEmployeeAttendanceRequestMultiError) AllErrors() []error { return m }

// ListEmployeeAttendanceRequestValidationError is the validation error
// returned by ListEmployeeAttendanceRequest.Validate if the designated
// constraints aren't met.
type ListEmployeeAttendanceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListEmployeeAttendanceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListEmployeeAttendanceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListEmployeeAttendanceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListEmployeeAttendanceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListEmployeeAttendanceRequestValidationError) ErrorName() string {
	return "ListEmployeeAttendanceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListEmployeeAttendanceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListEmployeeAttendanceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListEmployeeAttendanceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListEmployeeAttendanceRequestValidationError{}

// Validate checks the field values on ListDepartmentAttendanceRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListDepartmentAttendanceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListDepartmentAttendanceRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListDepartmentAttendanceRequestMultiError, or nil if none found.
func (m *ListDepartmentAttendanceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListDepartmentAttendanceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TenantId

	// no validation rules for DepartmentId

	// no validation rules for StartDate

	// no validation rules for EndDate

	// no validation rules for Page

	// no validation rules for PageSize

	// no validation rules for Cursor

	// no validation rules for UseCursor

	if len(errors) > 0 {
		return ListDepartmentAttendanceRequestMultiError(errors)
	}

	return nil
}

// ListDepartmentAttendanceRequestMultiError is an error wrapping multiple
// validation errors returned by ListDepartmentAttendanceRequest.ValidateAll()
// if the designated constraints aren't met.
type ListDepartmentAttendanceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListDepartmentAttendanceRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListDepartmentAttendanceRequestMultiError) AllErrors() []error { return m }

// ListDepartmentAttendanceRequestValidationError is the validation error
// returned by ListDepartmentAttendanceRequest.Validate if the designated
// constraints aren't met.
type ListDepartmentAttendanceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListDepartmentAttendanceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListDepartmentAttendanceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListDepartmentAttendanceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListDepartmentAttendanceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListDepartmentAttendanceRequestValidationError) ErrorName() string {
	return "ListDepartmentAttendanceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListDepartmentAttendanceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListDepartmentAttendanceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListDepartmentAttendanceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListDepartmentAttendanceRequestValidationError{}

// Validate checks the field values on ListExceptionAttendanceRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListExceptionAttendanceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListExceptionAttendanceRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListExceptionAttendanceRequestMultiError, or nil if none found.
func (m *ListExceptionAttendanceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListExceptionAttendanceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TenantId

	// no validation rules for StartDate

	// no validation rules for EndDate

	// no validation rules for Page

	// no validation rules for PageSize

	// no validation rules for Cursor

	// no validation rules for UseCursor

	if len(errors) > 0 {
		return ListExceptionAttendanceRequestMultiError(errors)
	}

	return nil
}

// ListExceptionAttendanceRequestMultiError is an error wrapping multiple
// validation errors returned by ListExceptionAttendanceRequest.ValidateAll()
// if the designated constraints aren't met.
type ListExceptionAttendanceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListExceptionAttendanceRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListExceptionAttendanceRequestMultiError) AllErrors() []error { return m }

// ListExceptionAttendanceRequestValidationError is the validation error
// returned by ListExceptionAttendanceRequest.Validate if the designated
// constraints aren't met.
type ListExceptionAttendanceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListExceptionAttendanceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListExceptionAttendanceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListExceptionAttendanceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListExceptionAttendanceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListExceptionAttendanceRequestValidationError) ErrorName() string {
	return "ListExceptionAttendanceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListExceptionAttendanceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListExceptionAttendanceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListExceptionAttendanceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListExceptionAttendanceRequestValidationError{}

// Validate checks the field values on AttendanceRecordResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AttendanceRecordResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AttendanceRecordResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AttendanceRecordResponseMultiError, or nil if none found.
func (m *AttendanceRecordResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AttendanceRecordResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for TenantId

	// no validation rules for EmployeeId

	// no validation rules for EmployeeName

	// no validation rules for DepartmentId

	// no validation rules for ShiftId

	// no validation rules for ShiftName

	// no validation rules for ClockTime

	// no validation rules for ClockType

	// no validation rules for Status

	// no validation rules for CheckInMethod

	// no validation rules for SourceType

	if all {
		switch v := interface{}(m.GetLocation()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AttendanceRecordResponseValidationError{
					field:  "Location",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AttendanceRecordResponseValidationError{
					field:  "Location",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetLocation()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AttendanceRecordResponseValidationError{
				field:  "Location",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Address

	// no validation rules for WifiSsid

	// no validation rules for PhotoUrl

	// no validation rules for FaceScore

	// no validation rules for IsException

	// no validation rules for ExceptionReason

	// no validation rules for ExceptionType

	// no validation rules for Remark

	// no validation rules for CreatedAt

	if len(errors) > 0 {
		return AttendanceRecordResponseMultiError(errors)
	}

	return nil
}

// AttendanceRecordResponseMultiError is an error wrapping multiple validation
// errors returned by AttendanceRecordResponse.ValidateAll() if the designated
// constraints aren't met.
type AttendanceRecordResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AttendanceRecordResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AttendanceRecordResponseMultiError) AllErrors() []error { return m }

// AttendanceRecordResponseValidationError is the validation error returned by
// AttendanceRecordResponse.Validate if the designated constraints aren't met.
type AttendanceRecordResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AttendanceRecordResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AttendanceRecordResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AttendanceRecordResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AttendanceRecordResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AttendanceRecordResponseValidationError) ErrorName() string {
	return "AttendanceRecordResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AttendanceRecordResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAttendanceRecordResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AttendanceRecordResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AttendanceRecordResponseValidationError{}

// Validate checks the field values on ListAttendanceRecordResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListAttendanceRecordResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListAttendanceRecordResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListAttendanceRecordResponseMultiError, or nil if none found.
func (m *ListAttendanceRecordResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListAttendanceRecordResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListAttendanceRecordResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListAttendanceRecordResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListAttendanceRecordResponseValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Total

	// no validation rules for HasNext

	// no validation rules for HasPrev

	// no validation rules for NextCursor

	// no validation rules for PrevCursor

	// no validation rules for Page

	// no validation rules for PageSize

	if len(errors) > 0 {
		return ListAttendanceRecordResponseMultiError(errors)
	}

	return nil
}

// ListAttendanceRecordResponseMultiError is an error wrapping multiple
// validation errors returned by ListAttendanceRecordResponse.ValidateAll() if
// the designated constraints aren't met.
type ListAttendanceRecordResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListAttendanceRecordResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListAttendanceRecordResponseMultiError) AllErrors() []error { return m }

// ListAttendanceRecordResponseValidationError is the validation error returned
// by ListAttendanceRecordResponse.Validate if the designated constraints
// aren't met.
type ListAttendanceRecordResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAttendanceRecordResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAttendanceRecordResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAttendanceRecordResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAttendanceRecordResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAttendanceRecordResponseValidationError) ErrorName() string {
	return "ListAttendanceRecordResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListAttendanceRecordResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAttendanceRecordResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAttendanceRecordResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAttendanceRecordResponseValidationError{}

// Validate checks the field values on GetAttendanceStatisticsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAttendanceStatisticsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAttendanceStatisticsRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetAttendanceStatisticsRequestMultiError, or nil if none found.
func (m *GetAttendanceStatisticsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAttendanceStatisticsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TenantId

	// no validation rules for EmployeeId

	// no validation rules for DepartmentId

	// no validation rules for StartDate

	// no validation rules for EndDate

	if len(errors) > 0 {
		return GetAttendanceStatisticsRequestMultiError(errors)
	}

	return nil
}

// GetAttendanceStatisticsRequestMultiError is an error wrapping multiple
// validation errors returned by GetAttendanceStatisticsRequest.ValidateAll()
// if the designated constraints aren't met.
type GetAttendanceStatisticsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAttendanceStatisticsRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAttendanceStatisticsRequestMultiError) AllErrors() []error { return m }

// GetAttendanceStatisticsRequestValidationError is the validation error
// returned by GetAttendanceStatisticsRequest.Validate if the designated
// constraints aren't met.
type GetAttendanceStatisticsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAttendanceStatisticsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAttendanceStatisticsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAttendanceStatisticsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAttendanceStatisticsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAttendanceStatisticsRequestValidationError) ErrorName() string {
	return "GetAttendanceStatisticsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetAttendanceStatisticsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAttendanceStatisticsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAttendanceStatisticsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAttendanceStatisticsRequestValidationError{}

// Validate checks the field values on AttendanceStatisticsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AttendanceStatisticsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AttendanceStatisticsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AttendanceStatisticsResponseMultiError, or nil if none found.
func (m *AttendanceStatisticsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AttendanceStatisticsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TotalDays

	// no validation rules for NormalDays

	// no validation rules for LateDays

	// no validation rules for EarlyDays

	// no validation rules for AbsentDays

	// no validation rules for LeaveDays

	// no validation rules for OvertimeHours

	// no validation rules for StatusCount

	if len(errors) > 0 {
		return AttendanceStatisticsResponseMultiError(errors)
	}

	return nil
}

// AttendanceStatisticsResponseMultiError is an error wrapping multiple
// validation errors returned by AttendanceStatisticsResponse.ValidateAll() if
// the designated constraints aren't met.
type AttendanceStatisticsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AttendanceStatisticsResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AttendanceStatisticsResponseMultiError) AllErrors() []error { return m }

// AttendanceStatisticsResponseValidationError is the validation error returned
// by AttendanceStatisticsResponse.Validate if the designated constraints
// aren't met.
type AttendanceStatisticsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AttendanceStatisticsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AttendanceStatisticsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AttendanceStatisticsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AttendanceStatisticsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AttendanceStatisticsResponseValidationError) ErrorName() string {
	return "AttendanceStatisticsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AttendanceStatisticsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAttendanceStatisticsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AttendanceStatisticsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AttendanceStatisticsResponseValidationError{}

// Validate checks the field values on CreateShiftRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateShiftRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateShiftRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateShiftRequestMultiError, or nil if none found.
func (m *CreateShiftRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateShiftRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TenantId

	// no validation rules for Code

	// no validation rules for Name

	// no validation rules for Type

	// no validation rules for Description

	// no validation rules for WorkStart

	// no validation rules for WorkEnd

	// no validation rules for FlexibleStart

	// no validation rules for FlexibleEnd

	// no validation rules for WorkDuration

	// no validation rules for CheckInRequired

	// no validation rules for CheckOutRequired

	// no validation rules for LateGracePeriod

	// no validation rules for EarlyGracePeriod

	// no validation rules for IsCrossDays

	// no validation rules for AllowOvertime

	// no validation rules for Sort

	if len(errors) > 0 {
		return CreateShiftRequestMultiError(errors)
	}

	return nil
}

// CreateShiftRequestMultiError is an error wrapping multiple validation errors
// returned by CreateShiftRequest.ValidateAll() if the designated constraints
// aren't met.
type CreateShiftRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateShiftRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateShiftRequestMultiError) AllErrors() []error { return m }

// CreateShiftRequestValidationError is the validation error returned by
// CreateShiftRequest.Validate if the designated constraints aren't met.
type CreateShiftRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateShiftRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateShiftRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateShiftRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateShiftRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateShiftRequestValidationError) ErrorName() string {
	return "CreateShiftRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateShiftRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateShiftRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateShiftRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateShiftRequestValidationError{}

// Validate checks the field values on GetShiftRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetShiftRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetShiftRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetShiftRequestMultiError, or nil if none found.
func (m *GetShiftRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetShiftRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetShiftRequestMultiError(errors)
	}

	return nil
}

// GetShiftRequestMultiError is an error wrapping multiple validation errors
// returned by GetShiftRequest.ValidateAll() if the designated constraints
// aren't met.
type GetShiftRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetShiftRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetShiftRequestMultiError) AllErrors() []error { return m }

// GetShiftRequestValidationError is the validation error returned by
// GetShiftRequest.Validate if the designated constraints aren't met.
type GetShiftRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetShiftRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetShiftRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetShiftRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetShiftRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetShiftRequestValidationError) ErrorName() string { return "GetShiftRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetShiftRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetShiftRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetShiftRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetShiftRequestValidationError{}

// Validate checks the field values on UpdateShiftRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateShiftRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateShiftRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateShiftRequestMultiError, or nil if none found.
func (m *UpdateShiftRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateShiftRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Description

	// no validation rules for WorkStart

	// no validation rules for WorkEnd

	// no validation rules for LateGracePeriod

	// no validation rules for EarlyGracePeriod

	// no validation rules for IsActive

	// no validation rules for Sort

	if len(errors) > 0 {
		return UpdateShiftRequestMultiError(errors)
	}

	return nil
}

// UpdateShiftRequestMultiError is an error wrapping multiple validation errors
// returned by UpdateShiftRequest.ValidateAll() if the designated constraints
// aren't met.
type UpdateShiftRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateShiftRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateShiftRequestMultiError) AllErrors() []error { return m }

// UpdateShiftRequestValidationError is the validation error returned by
// UpdateShiftRequest.Validate if the designated constraints aren't met.
type UpdateShiftRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateShiftRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateShiftRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateShiftRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateShiftRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateShiftRequestValidationError) ErrorName() string {
	return "UpdateShiftRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateShiftRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateShiftRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateShiftRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateShiftRequestValidationError{}

// Validate checks the field values on DeleteShiftRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteShiftRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteShiftRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteShiftRequestMultiError, or nil if none found.
func (m *DeleteShiftRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteShiftRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DeleteShiftRequestMultiError(errors)
	}

	return nil
}

// DeleteShiftRequestMultiError is an error wrapping multiple validation errors
// returned by DeleteShiftRequest.ValidateAll() if the designated constraints
// aren't met.
type DeleteShiftRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteShiftRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteShiftRequestMultiError) AllErrors() []error { return m }

// DeleteShiftRequestValidationError is the validation error returned by
// DeleteShiftRequest.Validate if the designated constraints aren't met.
type DeleteShiftRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteShiftRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteShiftRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteShiftRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteShiftRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteShiftRequestValidationError) ErrorName() string {
	return "DeleteShiftRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteShiftRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteShiftRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteShiftRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteShiftRequestValidationError{}

// Validate checks the field values on ListShiftsRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListShiftsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListShiftsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListShiftsRequestMultiError, or nil if none found.
func (m *ListShiftsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListShiftsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TenantId

	// no validation rules for Type

	// no validation rules for IsActive

	// no validation rules for Page

	// no validation rules for PageSize

	if len(errors) > 0 {
		return ListShiftsRequestMultiError(errors)
	}

	return nil
}

// ListShiftsRequestMultiError is an error wrapping multiple validation errors
// returned by ListShiftsRequest.ValidateAll() if the designated constraints
// aren't met.
type ListShiftsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListShiftsRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListShiftsRequestMultiError) AllErrors() []error { return m }

// ListShiftsRequestValidationError is the validation error returned by
// ListShiftsRequest.Validate if the designated constraints aren't met.
type ListShiftsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListShiftsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListShiftsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListShiftsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListShiftsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListShiftsRequestValidationError) ErrorName() string {
	return "ListShiftsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListShiftsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListShiftsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListShiftsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListShiftsRequestValidationError{}

// Validate checks the field values on ListActiveShiftsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListActiveShiftsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListActiveShiftsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListActiveShiftsRequestMultiError, or nil if none found.
func (m *ListActiveShiftsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListActiveShiftsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TenantId

	if len(errors) > 0 {
		return ListActiveShiftsRequestMultiError(errors)
	}

	return nil
}

// ListActiveShiftsRequestMultiError is an error wrapping multiple validation
// errors returned by ListActiveShiftsRequest.ValidateAll() if the designated
// constraints aren't met.
type ListActiveShiftsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListActiveShiftsRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListActiveShiftsRequestMultiError) AllErrors() []error { return m }

// ListActiveShiftsRequestValidationError is the validation error returned by
// ListActiveShiftsRequest.Validate if the designated constraints aren't met.
type ListActiveShiftsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListActiveShiftsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListActiveShiftsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListActiveShiftsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListActiveShiftsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListActiveShiftsRequestValidationError) ErrorName() string {
	return "ListActiveShiftsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListActiveShiftsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListActiveShiftsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListActiveShiftsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListActiveShiftsRequestValidationError{}

// Validate checks the field values on ShiftResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ShiftResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ShiftResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ShiftResponseMultiError, or
// nil if none found.
func (m *ShiftResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ShiftResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for TenantId

	// no validation rules for Code

	// no validation rules for Name

	// no validation rules for Type

	// no validation rules for Description

	// no validation rules for WorkStart

	// no validation rules for WorkEnd

	// no validation rules for FlexibleStart

	// no validation rules for FlexibleEnd

	// no validation rules for WorkDuration

	// no validation rules for CheckInRequired

	// no validation rules for CheckOutRequired

	// no validation rules for LateGracePeriod

	// no validation rules for EarlyGracePeriod

	// no validation rules for IsCrossDays

	// no validation rules for AllowOvertime

	// no validation rules for IsActive

	// no validation rules for Sort

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	if len(errors) > 0 {
		return ShiftResponseMultiError(errors)
	}

	return nil
}

// ShiftResponseMultiError is an error wrapping multiple validation errors
// returned by ShiftResponse.ValidateAll() if the designated constraints
// aren't met.
type ShiftResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ShiftResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ShiftResponseMultiError) AllErrors() []error { return m }

// ShiftResponseValidationError is the validation error returned by
// ShiftResponse.Validate if the designated constraints aren't met.
type ShiftResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ShiftResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ShiftResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ShiftResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ShiftResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ShiftResponseValidationError) ErrorName() string { return "ShiftResponseValidationError" }

// Error satisfies the builtin error interface
func (e ShiftResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sShiftResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ShiftResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ShiftResponseValidationError{}

// Validate checks the field values on DeleteShiftResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteShiftResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteShiftResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteShiftResponseMultiError, or nil if none found.
func (m *DeleteShiftResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteShiftResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	if len(errors) > 0 {
		return DeleteShiftResponseMultiError(errors)
	}

	return nil
}

// DeleteShiftResponseMultiError is an error wrapping multiple validation
// errors returned by DeleteShiftResponse.ValidateAll() if the designated
// constraints aren't met.
type DeleteShiftResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteShiftResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteShiftResponseMultiError) AllErrors() []error { return m }

// DeleteShiftResponseValidationError is the validation error returned by
// DeleteShiftResponse.Validate if the designated constraints aren't met.
type DeleteShiftResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteShiftResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteShiftResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteShiftResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteShiftResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteShiftResponseValidationError) ErrorName() string {
	return "DeleteShiftResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteShiftResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteShiftResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteShiftResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteShiftResponseValidationError{}

// Validate checks the field values on ListShiftsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListShiftsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListShiftsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListShiftsResponseMultiError, or nil if none found.
func (m *ListShiftsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListShiftsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListShiftsResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListShiftsResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListShiftsResponseValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Total

	if len(errors) > 0 {
		return ListShiftsResponseMultiError(errors)
	}

	return nil
}

// ListShiftsResponseMultiError is an error wrapping multiple validation errors
// returned by ListShiftsResponse.ValidateAll() if the designated constraints
// aren't met.
type ListShiftsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListShiftsResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListShiftsResponseMultiError) AllErrors() []error { return m }

// ListShiftsResponseValidationError is the validation error returned by
// ListShiftsResponse.Validate if the designated constraints aren't met.
type ListShiftsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListShiftsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListShiftsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListShiftsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListShiftsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListShiftsResponseValidationError) ErrorName() string {
	return "ListShiftsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListShiftsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListShiftsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListShiftsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListShiftsResponseValidationError{}

// Validate checks the field values on CreateScheduleRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateScheduleRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateScheduleRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateScheduleRequestMultiError, or nil if none found.
func (m *CreateScheduleRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateScheduleRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TenantId

	// no validation rules for EmployeeId

	// no validation rules for ShiftId

	// no validation rules for ScheduleDate

	// no validation rules for WorkdayType

	// no validation rules for Remark

	if len(errors) > 0 {
		return CreateScheduleRequestMultiError(errors)
	}

	return nil
}

// CreateScheduleRequestMultiError is an error wrapping multiple validation
// errors returned by CreateScheduleRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateScheduleRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateScheduleRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateScheduleRequestMultiError) AllErrors() []error { return m }

// CreateScheduleRequestValidationError is the validation error returned by
// CreateScheduleRequest.Validate if the designated constraints aren't met.
type CreateScheduleRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateScheduleRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateScheduleRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateScheduleRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateScheduleRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateScheduleRequestValidationError) ErrorName() string {
	return "CreateScheduleRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateScheduleRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateScheduleRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateScheduleRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateScheduleRequestValidationError{}

// Validate checks the field values on BatchCreateSchedulesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *BatchCreateSchedulesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BatchCreateSchedulesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BatchCreateSchedulesRequestMultiError, or nil if none found.
func (m *BatchCreateSchedulesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *BatchCreateSchedulesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TenantId

	for idx, item := range m.GetSchedules() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, BatchCreateSchedulesRequestValidationError{
						field:  fmt.Sprintf("Schedules[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, BatchCreateSchedulesRequestValidationError{
						field:  fmt.Sprintf("Schedules[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return BatchCreateSchedulesRequestValidationError{
					field:  fmt.Sprintf("Schedules[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return BatchCreateSchedulesRequestMultiError(errors)
	}

	return nil
}

// BatchCreateSchedulesRequestMultiError is an error wrapping multiple
// validation errors returned by BatchCreateSchedulesRequest.ValidateAll() if
// the designated constraints aren't met.
type BatchCreateSchedulesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BatchCreateSchedulesRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BatchCreateSchedulesRequestMultiError) AllErrors() []error { return m }

// BatchCreateSchedulesRequestValidationError is the validation error returned
// by BatchCreateSchedulesRequest.Validate if the designated constraints
// aren't met.
type BatchCreateSchedulesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BatchCreateSchedulesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BatchCreateSchedulesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BatchCreateSchedulesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BatchCreateSchedulesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BatchCreateSchedulesRequestValidationError) ErrorName() string {
	return "BatchCreateSchedulesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e BatchCreateSchedulesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBatchCreateSchedulesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BatchCreateSchedulesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BatchCreateSchedulesRequestValidationError{}

// Validate checks the field values on BatchCreateSchedulesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *BatchCreateSchedulesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BatchCreateSchedulesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BatchCreateSchedulesResponseMultiError, or nil if none found.
func (m *BatchCreateSchedulesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *BatchCreateSchedulesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for SuccessCount

	// no validation rules for FailedCount

	if len(errors) > 0 {
		return BatchCreateSchedulesResponseMultiError(errors)
	}

	return nil
}

// BatchCreateSchedulesResponseMultiError is an error wrapping multiple
// validation errors returned by BatchCreateSchedulesResponse.ValidateAll() if
// the designated constraints aren't met.
type BatchCreateSchedulesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BatchCreateSchedulesResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BatchCreateSchedulesResponseMultiError) AllErrors() []error { return m }

// BatchCreateSchedulesResponseValidationError is the validation error returned
// by BatchCreateSchedulesResponse.Validate if the designated constraints
// aren't met.
type BatchCreateSchedulesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BatchCreateSchedulesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BatchCreateSchedulesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BatchCreateSchedulesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BatchCreateSchedulesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BatchCreateSchedulesResponseValidationError) ErrorName() string {
	return "BatchCreateSchedulesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e BatchCreateSchedulesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBatchCreateSchedulesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BatchCreateSchedulesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BatchCreateSchedulesResponseValidationError{}

// Validate checks the field values on GetScheduleRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetScheduleRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetScheduleRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetScheduleRequestMultiError, or nil if none found.
func (m *GetScheduleRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetScheduleRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetScheduleRequestMultiError(errors)
	}

	return nil
}

// GetScheduleRequestMultiError is an error wrapping multiple validation errors
// returned by GetScheduleRequest.ValidateAll() if the designated constraints
// aren't met.
type GetScheduleRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetScheduleRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetScheduleRequestMultiError) AllErrors() []error { return m }

// GetScheduleRequestValidationError is the validation error returned by
// GetScheduleRequest.Validate if the designated constraints aren't met.
type GetScheduleRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetScheduleRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetScheduleRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetScheduleRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetScheduleRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetScheduleRequestValidationError) ErrorName() string {
	return "GetScheduleRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetScheduleRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetScheduleRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetScheduleRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetScheduleRequestValidationError{}

// Validate checks the field values on UpdateScheduleRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateScheduleRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateScheduleRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateScheduleRequestMultiError, or nil if none found.
func (m *UpdateScheduleRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateScheduleRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for ShiftId

	// no validation rules for WorkdayType

	// no validation rules for Status

	// no validation rules for Remark

	if len(errors) > 0 {
		return UpdateScheduleRequestMultiError(errors)
	}

	return nil
}

// UpdateScheduleRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateScheduleRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateScheduleRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateScheduleRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateScheduleRequestMultiError) AllErrors() []error { return m }

// UpdateScheduleRequestValidationError is the validation error returned by
// UpdateScheduleRequest.Validate if the designated constraints aren't met.
type UpdateScheduleRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateScheduleRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateScheduleRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateScheduleRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateScheduleRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateScheduleRequestValidationError) ErrorName() string {
	return "UpdateScheduleRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateScheduleRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateScheduleRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateScheduleRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateScheduleRequestValidationError{}

// Validate checks the field values on DeleteScheduleRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteScheduleRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteScheduleRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteScheduleRequestMultiError, or nil if none found.
func (m *DeleteScheduleRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteScheduleRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DeleteScheduleRequestMultiError(errors)
	}

	return nil
}

// DeleteScheduleRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteScheduleRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteScheduleRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteScheduleRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteScheduleRequestMultiError) AllErrors() []error { return m }

// DeleteScheduleRequestValidationError is the validation error returned by
// DeleteScheduleRequest.Validate if the designated constraints aren't met.
type DeleteScheduleRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteScheduleRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteScheduleRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteScheduleRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteScheduleRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteScheduleRequestValidationError) ErrorName() string {
	return "DeleteScheduleRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteScheduleRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteScheduleRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteScheduleRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteScheduleRequestValidationError{}

// Validate checks the field values on ListEmployeeSchedulesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListEmployeeSchedulesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListEmployeeSchedulesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListEmployeeSchedulesRequestMultiError, or nil if none found.
func (m *ListEmployeeSchedulesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListEmployeeSchedulesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TenantId

	// no validation rules for EmployeeId

	// no validation rules for Month

	if len(errors) > 0 {
		return ListEmployeeSchedulesRequestMultiError(errors)
	}

	return nil
}

// ListEmployeeSchedulesRequestMultiError is an error wrapping multiple
// validation errors returned by ListEmployeeSchedulesRequest.ValidateAll() if
// the designated constraints aren't met.
type ListEmployeeSchedulesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListEmployeeSchedulesRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListEmployeeSchedulesRequestMultiError) AllErrors() []error { return m }

// ListEmployeeSchedulesRequestValidationError is the validation error returned
// by ListEmployeeSchedulesRequest.Validate if the designated constraints
// aren't met.
type ListEmployeeSchedulesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListEmployeeSchedulesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListEmployeeSchedulesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListEmployeeSchedulesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListEmployeeSchedulesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListEmployeeSchedulesRequestValidationError) ErrorName() string {
	return "ListEmployeeSchedulesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListEmployeeSchedulesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListEmployeeSchedulesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListEmployeeSchedulesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListEmployeeSchedulesRequestValidationError{}

// Validate checks the field values on ListDepartmentSchedulesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListDepartmentSchedulesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListDepartmentSchedulesRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListDepartmentSchedulesRequestMultiError, or nil if none found.
func (m *ListDepartmentSchedulesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListDepartmentSchedulesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TenantId

	// no validation rules for DepartmentId

	// no validation rules for Month

	if len(errors) > 0 {
		return ListDepartmentSchedulesRequestMultiError(errors)
	}

	return nil
}

// ListDepartmentSchedulesRequestMultiError is an error wrapping multiple
// validation errors returned by ListDepartmentSchedulesRequest.ValidateAll()
// if the designated constraints aren't met.
type ListDepartmentSchedulesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListDepartmentSchedulesRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListDepartmentSchedulesRequestMultiError) AllErrors() []error { return m }

// ListDepartmentSchedulesRequestValidationError is the validation error
// returned by ListDepartmentSchedulesRequest.Validate if the designated
// constraints aren't met.
type ListDepartmentSchedulesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListDepartmentSchedulesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListDepartmentSchedulesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListDepartmentSchedulesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListDepartmentSchedulesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListDepartmentSchedulesRequestValidationError) ErrorName() string {
	return "ListDepartmentSchedulesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListDepartmentSchedulesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListDepartmentSchedulesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListDepartmentSchedulesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListDepartmentSchedulesRequestValidationError{}

// Validate checks the field values on ScheduleResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ScheduleResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ScheduleResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ScheduleResponseMultiError, or nil if none found.
func (m *ScheduleResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ScheduleResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for TenantId

	// no validation rules for EmployeeId

	// no validation rules for EmployeeName

	// no validation rules for DepartmentId

	// no validation rules for ShiftId

	// no validation rules for ShiftName

	// no validation rules for ScheduleDate

	// no validation rules for WorkdayType

	// no validation rules for Status

	// no validation rules for Remark

	// no validation rules for CreatedAt

	if len(errors) > 0 {
		return ScheduleResponseMultiError(errors)
	}

	return nil
}

// ScheduleResponseMultiError is an error wrapping multiple validation errors
// returned by ScheduleResponse.ValidateAll() if the designated constraints
// aren't met.
type ScheduleResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ScheduleResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ScheduleResponseMultiError) AllErrors() []error { return m }

// ScheduleResponseValidationError is the validation error returned by
// ScheduleResponse.Validate if the designated constraints aren't met.
type ScheduleResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ScheduleResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ScheduleResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ScheduleResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ScheduleResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ScheduleResponseValidationError) ErrorName() string { return "ScheduleResponseValidationError" }

// Error satisfies the builtin error interface
func (e ScheduleResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sScheduleResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ScheduleResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ScheduleResponseValidationError{}

// Validate checks the field values on DeleteScheduleResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteScheduleResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteScheduleResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteScheduleResponseMultiError, or nil if none found.
func (m *DeleteScheduleResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteScheduleResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	if len(errors) > 0 {
		return DeleteScheduleResponseMultiError(errors)
	}

	return nil
}

// DeleteScheduleResponseMultiError is an error wrapping multiple validation
// errors returned by DeleteScheduleResponse.ValidateAll() if the designated
// constraints aren't met.
type DeleteScheduleResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteScheduleResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteScheduleResponseMultiError) AllErrors() []error { return m }

// DeleteScheduleResponseValidationError is the validation error returned by
// DeleteScheduleResponse.Validate if the designated constraints aren't met.
type DeleteScheduleResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteScheduleResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteScheduleResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteScheduleResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteScheduleResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteScheduleResponseValidationError) ErrorName() string {
	return "DeleteScheduleResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteScheduleResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteScheduleResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteScheduleResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteScheduleResponseValidationError{}

// Validate checks the field values on ListSchedulesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListSchedulesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListSchedulesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListSchedulesResponseMultiError, or nil if none found.
func (m *ListSchedulesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListSchedulesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListSchedulesResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListSchedulesResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListSchedulesResponseValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Total

	if len(errors) > 0 {
		return ListSchedulesResponseMultiError(errors)
	}

	return nil
}

// ListSchedulesResponseMultiError is an error wrapping multiple validation
// errors returned by ListSchedulesResponse.ValidateAll() if the designated
// constraints aren't met.
type ListSchedulesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListSchedulesResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListSchedulesResponseMultiError) AllErrors() []error { return m }

// ListSchedulesResponseValidationError is the validation error returned by
// ListSchedulesResponse.Validate if the designated constraints aren't met.
type ListSchedulesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListSchedulesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListSchedulesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListSchedulesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListSchedulesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListSchedulesResponseValidationError) ErrorName() string {
	return "ListSchedulesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListSchedulesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListSchedulesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListSchedulesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListSchedulesResponseValidationError{}

// Validate checks the field values on CreateAttendanceRuleRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateAttendanceRuleRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateAttendanceRuleRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateAttendanceRuleRequestMultiError, or nil if none found.
func (m *CreateAttendanceRuleRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateAttendanceRuleRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TenantId

	// no validation rules for Code

	// no validation rules for Name

	// no validation rules for Description

	// no validation rules for ApplyType

	// no validation rules for WorkdayType

	// no validation rules for DefaultShiftId

	// no validation rules for LocationRequired

	for idx, item := range m.GetAllowedLocations() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CreateAttendanceRuleRequestValidationError{
						field:  fmt.Sprintf("AllowedLocations[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CreateAttendanceRuleRequestValidationError{
						field:  fmt.Sprintf("AllowedLocations[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateAttendanceRuleRequestValidationError{
					field:  fmt.Sprintf("AllowedLocations[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for WifiRequired

	// no validation rules for FaceRequired

	// no validation rules for FaceThreshold

	// no validation rules for AllowFieldWork

	// no validation rules for Priority

	if len(errors) > 0 {
		return CreateAttendanceRuleRequestMultiError(errors)
	}

	return nil
}

// CreateAttendanceRuleRequestMultiError is an error wrapping multiple
// validation errors returned by CreateAttendanceRuleRequest.ValidateAll() if
// the designated constraints aren't met.
type CreateAttendanceRuleRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateAttendanceRuleRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateAttendanceRuleRequestMultiError) AllErrors() []error { return m }

// CreateAttendanceRuleRequestValidationError is the validation error returned
// by CreateAttendanceRuleRequest.Validate if the designated constraints
// aren't met.
type CreateAttendanceRuleRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateAttendanceRuleRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateAttendanceRuleRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateAttendanceRuleRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateAttendanceRuleRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateAttendanceRuleRequestValidationError) ErrorName() string {
	return "CreateAttendanceRuleRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateAttendanceRuleRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateAttendanceRuleRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateAttendanceRuleRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateAttendanceRuleRequestValidationError{}

// Validate checks the field values on AllowedLocationInfo with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AllowedLocationInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AllowedLocationInfo with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AllowedLocationInfoMultiError, or nil if none found.
func (m *AllowedLocationInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *AllowedLocationInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Latitude

	// no validation rules for Longitude

	// no validation rules for Radius

	// no validation rules for Address

	if len(errors) > 0 {
		return AllowedLocationInfoMultiError(errors)
	}

	return nil
}

// AllowedLocationInfoMultiError is an error wrapping multiple validation
// errors returned by AllowedLocationInfo.ValidateAll() if the designated
// constraints aren't met.
type AllowedLocationInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AllowedLocationInfoMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AllowedLocationInfoMultiError) AllErrors() []error { return m }

// AllowedLocationInfoValidationError is the validation error returned by
// AllowedLocationInfo.Validate if the designated constraints aren't met.
type AllowedLocationInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AllowedLocationInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AllowedLocationInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AllowedLocationInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AllowedLocationInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AllowedLocationInfoValidationError) ErrorName() string {
	return "AllowedLocationInfoValidationError"
}

// Error satisfies the builtin error interface
func (e AllowedLocationInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAllowedLocationInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AllowedLocationInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AllowedLocationInfoValidationError{}

// Validate checks the field values on GetAttendanceRuleRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAttendanceRuleRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAttendanceRuleRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAttendanceRuleRequestMultiError, or nil if none found.
func (m *GetAttendanceRuleRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAttendanceRuleRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetAttendanceRuleRequestMultiError(errors)
	}

	return nil
}

// GetAttendanceRuleRequestMultiError is an error wrapping multiple validation
// errors returned by GetAttendanceRuleRequest.ValidateAll() if the designated
// constraints aren't met.
type GetAttendanceRuleRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAttendanceRuleRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAttendanceRuleRequestMultiError) AllErrors() []error { return m }

// GetAttendanceRuleRequestValidationError is the validation error returned by
// GetAttendanceRuleRequest.Validate if the designated constraints aren't met.
type GetAttendanceRuleRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAttendanceRuleRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAttendanceRuleRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAttendanceRuleRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAttendanceRuleRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAttendanceRuleRequestValidationError) ErrorName() string {
	return "GetAttendanceRuleRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetAttendanceRuleRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAttendanceRuleRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAttendanceRuleRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAttendanceRuleRequestValidationError{}

// Validate checks the field values on UpdateAttendanceRuleRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateAttendanceRuleRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateAttendanceRuleRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateAttendanceRuleRequestMultiError, or nil if none found.
func (m *UpdateAttendanceRuleRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateAttendanceRuleRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Description

	// no validation rules for ApplyType

	// no validation rules for LocationRequired

	// no validation rules for WifiRequired

	// no validation rules for FaceRequired

	// no validation rules for AllowFieldWork

	// no validation rules for IsActive

	// no validation rules for Priority

	if len(errors) > 0 {
		return UpdateAttendanceRuleRequestMultiError(errors)
	}

	return nil
}

// UpdateAttendanceRuleRequestMultiError is an error wrapping multiple
// validation errors returned by UpdateAttendanceRuleRequest.ValidateAll() if
// the designated constraints aren't met.
type UpdateAttendanceRuleRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateAttendanceRuleRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateAttendanceRuleRequestMultiError) AllErrors() []error { return m }

// UpdateAttendanceRuleRequestValidationError is the validation error returned
// by UpdateAttendanceRuleRequest.Validate if the designated constraints
// aren't met.
type UpdateAttendanceRuleRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateAttendanceRuleRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateAttendanceRuleRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateAttendanceRuleRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateAttendanceRuleRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateAttendanceRuleRequestValidationError) ErrorName() string {
	return "UpdateAttendanceRuleRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateAttendanceRuleRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateAttendanceRuleRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateAttendanceRuleRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateAttendanceRuleRequestValidationError{}

// Validate checks the field values on DeleteAttendanceRuleRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteAttendanceRuleRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteAttendanceRuleRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteAttendanceRuleRequestMultiError, or nil if none found.
func (m *DeleteAttendanceRuleRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteAttendanceRuleRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DeleteAttendanceRuleRequestMultiError(errors)
	}

	return nil
}

// DeleteAttendanceRuleRequestMultiError is an error wrapping multiple
// validation errors returned by DeleteAttendanceRuleRequest.ValidateAll() if
// the designated constraints aren't met.
type DeleteAttendanceRuleRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteAttendanceRuleRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteAttendanceRuleRequestMultiError) AllErrors() []error { return m }

// DeleteAttendanceRuleRequestValidationError is the validation error returned
// by DeleteAttendanceRuleRequest.Validate if the designated constraints
// aren't met.
type DeleteAttendanceRuleRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteAttendanceRuleRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteAttendanceRuleRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteAttendanceRuleRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteAttendanceRuleRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteAttendanceRuleRequestValidationError) ErrorName() string {
	return "DeleteAttendanceRuleRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteAttendanceRuleRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteAttendanceRuleRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteAttendanceRuleRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteAttendanceRuleRequestValidationError{}

// Validate checks the field values on ListAttendanceRulesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListAttendanceRulesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListAttendanceRulesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListAttendanceRulesRequestMultiError, or nil if none found.
func (m *ListAttendanceRulesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListAttendanceRulesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TenantId

	// no validation rules for ApplyType

	// no validation rules for IsActive

	// no validation rules for Page

	// no validation rules for PageSize

	if len(errors) > 0 {
		return ListAttendanceRulesRequestMultiError(errors)
	}

	return nil
}

// ListAttendanceRulesRequestMultiError is an error wrapping multiple
// validation errors returned by ListAttendanceRulesRequest.ValidateAll() if
// the designated constraints aren't met.
type ListAttendanceRulesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListAttendanceRulesRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListAttendanceRulesRequestMultiError) AllErrors() []error { return m }

// ListAttendanceRulesRequestValidationError is the validation error returned
// by ListAttendanceRulesRequest.Validate if the designated constraints aren't met.
type ListAttendanceRulesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAttendanceRulesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAttendanceRulesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAttendanceRulesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAttendanceRulesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAttendanceRulesRequestValidationError) ErrorName() string {
	return "ListAttendanceRulesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListAttendanceRulesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAttendanceRulesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAttendanceRulesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAttendanceRulesRequestValidationError{}

// Validate checks the field values on AttendanceRuleResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AttendanceRuleResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AttendanceRuleResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AttendanceRuleResponseMultiError, or nil if none found.
func (m *AttendanceRuleResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AttendanceRuleResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for TenantId

	// no validation rules for Code

	// no validation rules for Name

	// no validation rules for Description

	// no validation rules for ApplyType

	// no validation rules for WorkdayType

	// no validation rules for DefaultShiftId

	// no validation rules for LocationRequired

	for idx, item := range m.GetAllowedLocations() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AttendanceRuleResponseValidationError{
						field:  fmt.Sprintf("AllowedLocations[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AttendanceRuleResponseValidationError{
						field:  fmt.Sprintf("AllowedLocations[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AttendanceRuleResponseValidationError{
					field:  fmt.Sprintf("AllowedLocations[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for WifiRequired

	// no validation rules for FaceRequired

	// no validation rules for FaceThreshold

	// no validation rules for AllowFieldWork

	// no validation rules for IsActive

	// no validation rules for Priority

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	if len(errors) > 0 {
		return AttendanceRuleResponseMultiError(errors)
	}

	return nil
}

// AttendanceRuleResponseMultiError is an error wrapping multiple validation
// errors returned by AttendanceRuleResponse.ValidateAll() if the designated
// constraints aren't met.
type AttendanceRuleResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AttendanceRuleResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AttendanceRuleResponseMultiError) AllErrors() []error { return m }

// AttendanceRuleResponseValidationError is the validation error returned by
// AttendanceRuleResponse.Validate if the designated constraints aren't met.
type AttendanceRuleResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AttendanceRuleResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AttendanceRuleResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AttendanceRuleResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AttendanceRuleResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AttendanceRuleResponseValidationError) ErrorName() string {
	return "AttendanceRuleResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AttendanceRuleResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAttendanceRuleResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AttendanceRuleResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AttendanceRuleResponseValidationError{}

// Validate checks the field values on DeleteAttendanceRuleResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteAttendanceRuleResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteAttendanceRuleResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteAttendanceRuleResponseMultiError, or nil if none found.
func (m *DeleteAttendanceRuleResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteAttendanceRuleResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	if len(errors) > 0 {
		return DeleteAttendanceRuleResponseMultiError(errors)
	}

	return nil
}

// DeleteAttendanceRuleResponseMultiError is an error wrapping multiple
// validation errors returned by DeleteAttendanceRuleResponse.ValidateAll() if
// the designated constraints aren't met.
type DeleteAttendanceRuleResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteAttendanceRuleResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteAttendanceRuleResponseMultiError) AllErrors() []error { return m }

// DeleteAttendanceRuleResponseValidationError is the validation error returned
// by DeleteAttendanceRuleResponse.Validate if the designated constraints
// aren't met.
type DeleteAttendanceRuleResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteAttendanceRuleResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteAttendanceRuleResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteAttendanceRuleResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteAttendanceRuleResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteAttendanceRuleResponseValidationError) ErrorName() string {
	return "DeleteAttendanceRuleResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteAttendanceRuleResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteAttendanceRuleResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteAttendanceRuleResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteAttendanceRuleResponseValidationError{}

// Validate checks the field values on ListAttendanceRulesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListAttendanceRulesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListAttendanceRulesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListAttendanceRulesResponseMultiError, or nil if none found.
func (m *ListAttendanceRulesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListAttendanceRulesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListAttendanceRulesResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListAttendanceRulesResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListAttendanceRulesResponseValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Total

	if len(errors) > 0 {
		return ListAttendanceRulesResponseMultiError(errors)
	}

	return nil
}

// ListAttendanceRulesResponseMultiError is an error wrapping multiple
// validation errors returned by ListAttendanceRulesResponse.ValidateAll() if
// the designated constraints aren't met.
type ListAttendanceRulesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListAttendanceRulesResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListAttendanceRulesResponseMultiError) AllErrors() []error { return m }

// ListAttendanceRulesResponseValidationError is the validation error returned
// by ListAttendanceRulesResponse.Validate if the designated constraints
// aren't met.
type ListAttendanceRulesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAttendanceRulesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAttendanceRulesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAttendanceRulesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAttendanceRulesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAttendanceRulesResponseValidationError) ErrorName() string {
	return "ListAttendanceRulesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListAttendanceRulesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAttendanceRulesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAttendanceRulesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAttendanceRulesResponseValidationError{}
