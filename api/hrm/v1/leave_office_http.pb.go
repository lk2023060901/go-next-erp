// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.9.0
// - protoc             (unknown)
// source: api/hrm/v1/leave_office.proto

package hrmv1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationLeaveOfficeServiceApproveLeaveOffice = "/api.hrm.v1.LeaveOfficeService/ApproveLeaveOffice"
const OperationLeaveOfficeServiceCreateLeaveOffice = "/api.hrm.v1.LeaveOfficeService/CreateLeaveOffice"
const OperationLeaveOfficeServiceDeleteLeaveOffice = "/api.hrm.v1.LeaveOfficeService/DeleteLeaveOffice"
const OperationLeaveOfficeServiceGetLeaveOffice = "/api.hrm.v1.LeaveOfficeService/GetLeaveOffice"
const OperationLeaveOfficeServiceListEmployeeLeaveOffices = "/api.hrm.v1.LeaveOfficeService/ListEmployeeLeaveOffices"
const OperationLeaveOfficeServiceListLeaveOffices = "/api.hrm.v1.LeaveOfficeService/ListLeaveOffices"
const OperationLeaveOfficeServiceListPendingLeaveOffices = "/api.hrm.v1.LeaveOfficeService/ListPendingLeaveOffices"
const OperationLeaveOfficeServiceRejectLeaveOffice = "/api.hrm.v1.LeaveOfficeService/RejectLeaveOffice"
const OperationLeaveOfficeServiceSubmitLeaveOffice = "/api.hrm.v1.LeaveOfficeService/SubmitLeaveOffice"
const OperationLeaveOfficeServiceUpdateLeaveOffice = "/api.hrm.v1.LeaveOfficeService/UpdateLeaveOffice"

type LeaveOfficeServiceHTTPServer interface {
	// ApproveLeaveOffice 批准外出
	ApproveLeaveOffice(context.Context, *ApproveLeaveOfficeRequest) (*ApproveLeaveOfficeResponse, error)
	// CreateLeaveOffice 创建外出申请
	CreateLeaveOffice(context.Context, *CreateLeaveOfficeRequest) (*LeaveOfficeResponse, error)
	// DeleteLeaveOffice 删除外出申请
	DeleteLeaveOffice(context.Context, *DeleteLeaveOfficeRequest) (*DeleteLeaveOfficeResponse, error)
	// GetLeaveOffice 获取外出详情
	GetLeaveOffice(context.Context, *GetLeaveOfficeRequest) (*LeaveOfficeResponse, error)
	// ListEmployeeLeaveOffices 查询员工外出记录
	ListEmployeeLeaveOffices(context.Context, *ListEmployeeLeaveOfficesRequest) (*ListLeaveOfficesResponse, error)
	// ListLeaveOffices 列表查询外出记录
	ListLeaveOffices(context.Context, *ListLeaveOfficesRequest) (*ListLeaveOfficesResponse, error)
	// ListPendingLeaveOffices 查询待审批的外出
	ListPendingLeaveOffices(context.Context, *ListPendingLeaveOfficesRequest) (*ListLeaveOfficesResponse, error)
	// RejectLeaveOffice 拒绝外出
	RejectLeaveOffice(context.Context, *RejectLeaveOfficeRequest) (*RejectLeaveOfficeResponse, error)
	// SubmitLeaveOffice 提交外出审批
	SubmitLeaveOffice(context.Context, *SubmitLeaveOfficeRequest) (*SubmitLeaveOfficeResponse, error)
	// UpdateLeaveOffice 更新外出申请
	UpdateLeaveOffice(context.Context, *UpdateLeaveOfficeRequest) (*LeaveOfficeResponse, error)
}

func RegisterLeaveOfficeServiceHTTPServer(s *http.Server, srv LeaveOfficeServiceHTTPServer) {
	r := s.Route("/")
	r.POST("/api/v1/hrm/leave-offices", _LeaveOfficeService_CreateLeaveOffice0_HTTP_Handler(srv))
	r.PUT("/api/v1/hrm/leave-offices/{id}", _LeaveOfficeService_UpdateLeaveOffice0_HTTP_Handler(srv))
	r.DELETE("/api/v1/hrm/leave-offices/{id}", _LeaveOfficeService_DeleteLeaveOffice0_HTTP_Handler(srv))
	r.GET("/api/v1/hrm/leave-offices/{id}", _LeaveOfficeService_GetLeaveOffice0_HTTP_Handler(srv))
	r.GET("/api/v1/hrm/leave-offices", _LeaveOfficeService_ListLeaveOffices0_HTTP_Handler(srv))
	r.GET("/api/v1/hrm/employees/{employee_id}/leave-offices", _LeaveOfficeService_ListEmployeeLeaveOffices0_HTTP_Handler(srv))
	r.GET("/api/v1/hrm/leave-offices/pending", _LeaveOfficeService_ListPendingLeaveOffices0_HTTP_Handler(srv))
	r.POST("/api/v1/hrm/leave-offices/{leave_office_id}/submit", _LeaveOfficeService_SubmitLeaveOffice0_HTTP_Handler(srv))
	r.POST("/api/v1/hrm/leave-offices/{leave_office_id}/approve", _LeaveOfficeService_ApproveLeaveOffice0_HTTP_Handler(srv))
	r.POST("/api/v1/hrm/leave-offices/{leave_office_id}/reject", _LeaveOfficeService_RejectLeaveOffice0_HTTP_Handler(srv))
}

func _LeaveOfficeService_CreateLeaveOffice0_HTTP_Handler(srv LeaveOfficeServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateLeaveOfficeRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationLeaveOfficeServiceCreateLeaveOffice)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateLeaveOffice(ctx, req.(*CreateLeaveOfficeRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*LeaveOfficeResponse)
		return ctx.Result(200, reply)
	}
}

func _LeaveOfficeService_UpdateLeaveOffice0_HTTP_Handler(srv LeaveOfficeServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateLeaveOfficeRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationLeaveOfficeServiceUpdateLeaveOffice)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateLeaveOffice(ctx, req.(*UpdateLeaveOfficeRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*LeaveOfficeResponse)
		return ctx.Result(200, reply)
	}
}

func _LeaveOfficeService_DeleteLeaveOffice0_HTTP_Handler(srv LeaveOfficeServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteLeaveOfficeRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationLeaveOfficeServiceDeleteLeaveOffice)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteLeaveOffice(ctx, req.(*DeleteLeaveOfficeRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteLeaveOfficeResponse)
		return ctx.Result(200, reply)
	}
}

func _LeaveOfficeService_GetLeaveOffice0_HTTP_Handler(srv LeaveOfficeServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetLeaveOfficeRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationLeaveOfficeServiceGetLeaveOffice)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetLeaveOffice(ctx, req.(*GetLeaveOfficeRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*LeaveOfficeResponse)
		return ctx.Result(200, reply)
	}
}

func _LeaveOfficeService_ListLeaveOffices0_HTTP_Handler(srv LeaveOfficeServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListLeaveOfficesRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationLeaveOfficeServiceListLeaveOffices)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListLeaveOffices(ctx, req.(*ListLeaveOfficesRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListLeaveOfficesResponse)
		return ctx.Result(200, reply)
	}
}

func _LeaveOfficeService_ListEmployeeLeaveOffices0_HTTP_Handler(srv LeaveOfficeServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListEmployeeLeaveOfficesRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationLeaveOfficeServiceListEmployeeLeaveOffices)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListEmployeeLeaveOffices(ctx, req.(*ListEmployeeLeaveOfficesRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListLeaveOfficesResponse)
		return ctx.Result(200, reply)
	}
}

func _LeaveOfficeService_ListPendingLeaveOffices0_HTTP_Handler(srv LeaveOfficeServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListPendingLeaveOfficesRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationLeaveOfficeServiceListPendingLeaveOffices)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListPendingLeaveOffices(ctx, req.(*ListPendingLeaveOfficesRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListLeaveOfficesResponse)
		return ctx.Result(200, reply)
	}
}

func _LeaveOfficeService_SubmitLeaveOffice0_HTTP_Handler(srv LeaveOfficeServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SubmitLeaveOfficeRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationLeaveOfficeServiceSubmitLeaveOffice)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SubmitLeaveOffice(ctx, req.(*SubmitLeaveOfficeRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SubmitLeaveOfficeResponse)
		return ctx.Result(200, reply)
	}
}

func _LeaveOfficeService_ApproveLeaveOffice0_HTTP_Handler(srv LeaveOfficeServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ApproveLeaveOfficeRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationLeaveOfficeServiceApproveLeaveOffice)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ApproveLeaveOffice(ctx, req.(*ApproveLeaveOfficeRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ApproveLeaveOfficeResponse)
		return ctx.Result(200, reply)
	}
}

func _LeaveOfficeService_RejectLeaveOffice0_HTTP_Handler(srv LeaveOfficeServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in RejectLeaveOfficeRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationLeaveOfficeServiceRejectLeaveOffice)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.RejectLeaveOffice(ctx, req.(*RejectLeaveOfficeRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*RejectLeaveOfficeResponse)
		return ctx.Result(200, reply)
	}
}

type LeaveOfficeServiceHTTPClient interface {
	// ApproveLeaveOffice 批准外出
	ApproveLeaveOffice(ctx context.Context, req *ApproveLeaveOfficeRequest, opts ...http.CallOption) (rsp *ApproveLeaveOfficeResponse, err error)
	// CreateLeaveOffice 创建外出申请
	CreateLeaveOffice(ctx context.Context, req *CreateLeaveOfficeRequest, opts ...http.CallOption) (rsp *LeaveOfficeResponse, err error)
	// DeleteLeaveOffice 删除外出申请
	DeleteLeaveOffice(ctx context.Context, req *DeleteLeaveOfficeRequest, opts ...http.CallOption) (rsp *DeleteLeaveOfficeResponse, err error)
	// GetLeaveOffice 获取外出详情
	GetLeaveOffice(ctx context.Context, req *GetLeaveOfficeRequest, opts ...http.CallOption) (rsp *LeaveOfficeResponse, err error)
	// ListEmployeeLeaveOffices 查询员工外出记录
	ListEmployeeLeaveOffices(ctx context.Context, req *ListEmployeeLeaveOfficesRequest, opts ...http.CallOption) (rsp *ListLeaveOfficesResponse, err error)
	// ListLeaveOffices 列表查询外出记录
	ListLeaveOffices(ctx context.Context, req *ListLeaveOfficesRequest, opts ...http.CallOption) (rsp *ListLeaveOfficesResponse, err error)
	// ListPendingLeaveOffices 查询待审批的外出
	ListPendingLeaveOffices(ctx context.Context, req *ListPendingLeaveOfficesRequest, opts ...http.CallOption) (rsp *ListLeaveOfficesResponse, err error)
	// RejectLeaveOffice 拒绝外出
	RejectLeaveOffice(ctx context.Context, req *RejectLeaveOfficeRequest, opts ...http.CallOption) (rsp *RejectLeaveOfficeResponse, err error)
	// SubmitLeaveOffice 提交外出审批
	SubmitLeaveOffice(ctx context.Context, req *SubmitLeaveOfficeRequest, opts ...http.CallOption) (rsp *SubmitLeaveOfficeResponse, err error)
	// UpdateLeaveOffice 更新外出申请
	UpdateLeaveOffice(ctx context.Context, req *UpdateLeaveOfficeRequest, opts ...http.CallOption) (rsp *LeaveOfficeResponse, err error)
}

type LeaveOfficeServiceHTTPClientImpl struct {
	cc *http.Client
}

func NewLeaveOfficeServiceHTTPClient(client *http.Client) LeaveOfficeServiceHTTPClient {
	return &LeaveOfficeServiceHTTPClientImpl{client}
}

// ApproveLeaveOffice 批准外出
func (c *LeaveOfficeServiceHTTPClientImpl) ApproveLeaveOffice(ctx context.Context, in *ApproveLeaveOfficeRequest, opts ...http.CallOption) (*ApproveLeaveOfficeResponse, error) {
	var out ApproveLeaveOfficeResponse
	pattern := "/api/v1/hrm/leave-offices/{leave_office_id}/approve"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationLeaveOfficeServiceApproveLeaveOffice))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

// CreateLeaveOffice 创建外出申请
func (c *LeaveOfficeServiceHTTPClientImpl) CreateLeaveOffice(ctx context.Context, in *CreateLeaveOfficeRequest, opts ...http.CallOption) (*LeaveOfficeResponse, error) {
	var out LeaveOfficeResponse
	pattern := "/api/v1/hrm/leave-offices"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationLeaveOfficeServiceCreateLeaveOffice))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

// DeleteLeaveOffice 删除外出申请
func (c *LeaveOfficeServiceHTTPClientImpl) DeleteLeaveOffice(ctx context.Context, in *DeleteLeaveOfficeRequest, opts ...http.CallOption) (*DeleteLeaveOfficeResponse, error) {
	var out DeleteLeaveOfficeResponse
	pattern := "/api/v1/hrm/leave-offices/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationLeaveOfficeServiceDeleteLeaveOffice))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

// GetLeaveOffice 获取外出详情
func (c *LeaveOfficeServiceHTTPClientImpl) GetLeaveOffice(ctx context.Context, in *GetLeaveOfficeRequest, opts ...http.CallOption) (*LeaveOfficeResponse, error) {
	var out LeaveOfficeResponse
	pattern := "/api/v1/hrm/leave-offices/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationLeaveOfficeServiceGetLeaveOffice))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

// ListEmployeeLeaveOffices 查询员工外出记录
func (c *LeaveOfficeServiceHTTPClientImpl) ListEmployeeLeaveOffices(ctx context.Context, in *ListEmployeeLeaveOfficesRequest, opts ...http.CallOption) (*ListLeaveOfficesResponse, error) {
	var out ListLeaveOfficesResponse
	pattern := "/api/v1/hrm/employees/{employee_id}/leave-offices"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationLeaveOfficeServiceListEmployeeLeaveOffices))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

// ListLeaveOffices 列表查询外出记录
func (c *LeaveOfficeServiceHTTPClientImpl) ListLeaveOffices(ctx context.Context, in *ListLeaveOfficesRequest, opts ...http.CallOption) (*ListLeaveOfficesResponse, error) {
	var out ListLeaveOfficesResponse
	pattern := "/api/v1/hrm/leave-offices"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationLeaveOfficeServiceListLeaveOffices))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

// ListPendingLeaveOffices 查询待审批的外出
func (c *LeaveOfficeServiceHTTPClientImpl) ListPendingLeaveOffices(ctx context.Context, in *ListPendingLeaveOfficesRequest, opts ...http.CallOption) (*ListLeaveOfficesResponse, error) {
	var out ListLeaveOfficesResponse
	pattern := "/api/v1/hrm/leave-offices/pending"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationLeaveOfficeServiceListPendingLeaveOffices))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

// RejectLeaveOffice 拒绝外出
func (c *LeaveOfficeServiceHTTPClientImpl) RejectLeaveOffice(ctx context.Context, in *RejectLeaveOfficeRequest, opts ...http.CallOption) (*RejectLeaveOfficeResponse, error) {
	var out RejectLeaveOfficeResponse
	pattern := "/api/v1/hrm/leave-offices/{leave_office_id}/reject"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationLeaveOfficeServiceRejectLeaveOffice))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

// SubmitLeaveOffice 提交外出审批
func (c *LeaveOfficeServiceHTTPClientImpl) SubmitLeaveOffice(ctx context.Context, in *SubmitLeaveOfficeRequest, opts ...http.CallOption) (*SubmitLeaveOfficeResponse, error) {
	var out SubmitLeaveOfficeResponse
	pattern := "/api/v1/hrm/leave-offices/{leave_office_id}/submit"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationLeaveOfficeServiceSubmitLeaveOffice))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

// UpdateLeaveOffice 更新外出申请
func (c *LeaveOfficeServiceHTTPClientImpl) UpdateLeaveOffice(ctx context.Context, in *UpdateLeaveOfficeRequest, opts ...http.CallOption) (*LeaveOfficeResponse, error) {
	var out LeaveOfficeResponse
	pattern := "/api/v1/hrm/leave-offices/{id}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationLeaveOfficeServiceUpdateLeaveOffice))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
