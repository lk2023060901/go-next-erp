// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: api/hrm/v1/attendance.proto

package hrmv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AttendanceServiceClient is the client API for AttendanceService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AttendanceServiceClient interface {
	// 打卡
	ClockIn(ctx context.Context, in *ClockInRequest, opts ...grpc.CallOption) (*ClockInResponse, error)
	// 获取考勤记录
	GetAttendanceRecord(ctx context.Context, in *GetAttendanceRecordRequest, opts ...grpc.CallOption) (*AttendanceRecordResponse, error)
	// 查询员工考勤记录
	ListEmployeeAttendance(ctx context.Context, in *ListEmployeeAttendanceRequest, opts ...grpc.CallOption) (*ListAttendanceRecordResponse, error)
	// 查询部门考勤记录
	ListDepartmentAttendance(ctx context.Context, in *ListDepartmentAttendanceRequest, opts ...grpc.CallOption) (*ListAttendanceRecordResponse, error)
	// 查询异常考勤
	ListExceptionAttendance(ctx context.Context, in *ListExceptionAttendanceRequest, opts ...grpc.CallOption) (*ListAttendanceRecordResponse, error)
	// 考勤统计
	GetAttendanceStatistics(ctx context.Context, in *GetAttendanceStatisticsRequest, opts ...grpc.CallOption) (*AttendanceStatisticsResponse, error)
}

type attendanceServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAttendanceServiceClient(cc grpc.ClientConnInterface) AttendanceServiceClient {
	return &attendanceServiceClient{cc}
}

func (c *attendanceServiceClient) ClockIn(ctx context.Context, in *ClockInRequest, opts ...grpc.CallOption) (*ClockInResponse, error) {
	out := new(ClockInResponse)
	err := c.cc.Invoke(ctx, "/api.hrm.v1.AttendanceService/ClockIn", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *attendanceServiceClient) GetAttendanceRecord(ctx context.Context, in *GetAttendanceRecordRequest, opts ...grpc.CallOption) (*AttendanceRecordResponse, error) {
	out := new(AttendanceRecordResponse)
	err := c.cc.Invoke(ctx, "/api.hrm.v1.AttendanceService/GetAttendanceRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *attendanceServiceClient) ListEmployeeAttendance(ctx context.Context, in *ListEmployeeAttendanceRequest, opts ...grpc.CallOption) (*ListAttendanceRecordResponse, error) {
	out := new(ListAttendanceRecordResponse)
	err := c.cc.Invoke(ctx, "/api.hrm.v1.AttendanceService/ListEmployeeAttendance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *attendanceServiceClient) ListDepartmentAttendance(ctx context.Context, in *ListDepartmentAttendanceRequest, opts ...grpc.CallOption) (*ListAttendanceRecordResponse, error) {
	out := new(ListAttendanceRecordResponse)
	err := c.cc.Invoke(ctx, "/api.hrm.v1.AttendanceService/ListDepartmentAttendance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *attendanceServiceClient) ListExceptionAttendance(ctx context.Context, in *ListExceptionAttendanceRequest, opts ...grpc.CallOption) (*ListAttendanceRecordResponse, error) {
	out := new(ListAttendanceRecordResponse)
	err := c.cc.Invoke(ctx, "/api.hrm.v1.AttendanceService/ListExceptionAttendance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *attendanceServiceClient) GetAttendanceStatistics(ctx context.Context, in *GetAttendanceStatisticsRequest, opts ...grpc.CallOption) (*AttendanceStatisticsResponse, error) {
	out := new(AttendanceStatisticsResponse)
	err := c.cc.Invoke(ctx, "/api.hrm.v1.AttendanceService/GetAttendanceStatistics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AttendanceServiceServer is the server API for AttendanceService service.
// All implementations should embed UnimplementedAttendanceServiceServer
// for forward compatibility
type AttendanceServiceServer interface {
	// 打卡
	ClockIn(context.Context, *ClockInRequest) (*ClockInResponse, error)
	// 获取考勤记录
	GetAttendanceRecord(context.Context, *GetAttendanceRecordRequest) (*AttendanceRecordResponse, error)
	// 查询员工考勤记录
	ListEmployeeAttendance(context.Context, *ListEmployeeAttendanceRequest) (*ListAttendanceRecordResponse, error)
	// 查询部门考勤记录
	ListDepartmentAttendance(context.Context, *ListDepartmentAttendanceRequest) (*ListAttendanceRecordResponse, error)
	// 查询异常考勤
	ListExceptionAttendance(context.Context, *ListExceptionAttendanceRequest) (*ListAttendanceRecordResponse, error)
	// 考勤统计
	GetAttendanceStatistics(context.Context, *GetAttendanceStatisticsRequest) (*AttendanceStatisticsResponse, error)
}

// UnimplementedAttendanceServiceServer should be embedded to have forward compatible implementations.
type UnimplementedAttendanceServiceServer struct {
}

func (UnimplementedAttendanceServiceServer) ClockIn(context.Context, *ClockInRequest) (*ClockInResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClockIn not implemented")
}
func (UnimplementedAttendanceServiceServer) GetAttendanceRecord(context.Context, *GetAttendanceRecordRequest) (*AttendanceRecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAttendanceRecord not implemented")
}
func (UnimplementedAttendanceServiceServer) ListEmployeeAttendance(context.Context, *ListEmployeeAttendanceRequest) (*ListAttendanceRecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListEmployeeAttendance not implemented")
}
func (UnimplementedAttendanceServiceServer) ListDepartmentAttendance(context.Context, *ListDepartmentAttendanceRequest) (*ListAttendanceRecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDepartmentAttendance not implemented")
}
func (UnimplementedAttendanceServiceServer) ListExceptionAttendance(context.Context, *ListExceptionAttendanceRequest) (*ListAttendanceRecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListExceptionAttendance not implemented")
}
func (UnimplementedAttendanceServiceServer) GetAttendanceStatistics(context.Context, *GetAttendanceStatisticsRequest) (*AttendanceStatisticsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAttendanceStatistics not implemented")
}

// UnsafeAttendanceServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AttendanceServiceServer will
// result in compilation errors.
type UnsafeAttendanceServiceServer interface {
	mustEmbedUnimplementedAttendanceServiceServer()
}

func RegisterAttendanceServiceServer(s grpc.ServiceRegistrar, srv AttendanceServiceServer) {
	s.RegisterService(&AttendanceService_ServiceDesc, srv)
}

func _AttendanceService_ClockIn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClockInRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AttendanceServiceServer).ClockIn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.hrm.v1.AttendanceService/ClockIn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AttendanceServiceServer).ClockIn(ctx, req.(*ClockInRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AttendanceService_GetAttendanceRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAttendanceRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AttendanceServiceServer).GetAttendanceRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.hrm.v1.AttendanceService/GetAttendanceRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AttendanceServiceServer).GetAttendanceRecord(ctx, req.(*GetAttendanceRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AttendanceService_ListEmployeeAttendance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListEmployeeAttendanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AttendanceServiceServer).ListEmployeeAttendance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.hrm.v1.AttendanceService/ListEmployeeAttendance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AttendanceServiceServer).ListEmployeeAttendance(ctx, req.(*ListEmployeeAttendanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AttendanceService_ListDepartmentAttendance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDepartmentAttendanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AttendanceServiceServer).ListDepartmentAttendance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.hrm.v1.AttendanceService/ListDepartmentAttendance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AttendanceServiceServer).ListDepartmentAttendance(ctx, req.(*ListDepartmentAttendanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AttendanceService_ListExceptionAttendance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListExceptionAttendanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AttendanceServiceServer).ListExceptionAttendance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.hrm.v1.AttendanceService/ListExceptionAttendance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AttendanceServiceServer).ListExceptionAttendance(ctx, req.(*ListExceptionAttendanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AttendanceService_GetAttendanceStatistics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAttendanceStatisticsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AttendanceServiceServer).GetAttendanceStatistics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.hrm.v1.AttendanceService/GetAttendanceStatistics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AttendanceServiceServer).GetAttendanceStatistics(ctx, req.(*GetAttendanceStatisticsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AttendanceService_ServiceDesc is the grpc.ServiceDesc for AttendanceService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AttendanceService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.hrm.v1.AttendanceService",
	HandlerType: (*AttendanceServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ClockIn",
			Handler:    _AttendanceService_ClockIn_Handler,
		},
		{
			MethodName: "GetAttendanceRecord",
			Handler:    _AttendanceService_GetAttendanceRecord_Handler,
		},
		{
			MethodName: "ListEmployeeAttendance",
			Handler:    _AttendanceService_ListEmployeeAttendance_Handler,
		},
		{
			MethodName: "ListDepartmentAttendance",
			Handler:    _AttendanceService_ListDepartmentAttendance_Handler,
		},
		{
			MethodName: "ListExceptionAttendance",
			Handler:    _AttendanceService_ListExceptionAttendance_Handler,
		},
		{
			MethodName: "GetAttendanceStatistics",
			Handler:    _AttendanceService_GetAttendanceStatistics_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/hrm/v1/attendance.proto",
}

// ShiftServiceClient is the client API for ShiftService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ShiftServiceClient interface {
	// 创建班次
	CreateShift(ctx context.Context, in *CreateShiftRequest, opts ...grpc.CallOption) (*ShiftResponse, error)
	// 列出启用的班次（必须在 GetShift 之前，避免路由冲突）
	ListActiveShifts(ctx context.Context, in *ListActiveShiftsRequest, opts ...grpc.CallOption) (*ListShiftsResponse, error)
	// 获取班次
	GetShift(ctx context.Context, in *GetShiftRequest, opts ...grpc.CallOption) (*ShiftResponse, error)
	// 更新班次
	UpdateShift(ctx context.Context, in *UpdateShiftRequest, opts ...grpc.CallOption) (*ShiftResponse, error)
	// 删除班次
	DeleteShift(ctx context.Context, in *DeleteShiftRequest, opts ...grpc.CallOption) (*DeleteShiftResponse, error)
	// 列出班次
	ListShifts(ctx context.Context, in *ListShiftsRequest, opts ...grpc.CallOption) (*ListShiftsResponse, error)
}

type shiftServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewShiftServiceClient(cc grpc.ClientConnInterface) ShiftServiceClient {
	return &shiftServiceClient{cc}
}

func (c *shiftServiceClient) CreateShift(ctx context.Context, in *CreateShiftRequest, opts ...grpc.CallOption) (*ShiftResponse, error) {
	out := new(ShiftResponse)
	err := c.cc.Invoke(ctx, "/api.hrm.v1.ShiftService/CreateShift", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shiftServiceClient) ListActiveShifts(ctx context.Context, in *ListActiveShiftsRequest, opts ...grpc.CallOption) (*ListShiftsResponse, error) {
	out := new(ListShiftsResponse)
	err := c.cc.Invoke(ctx, "/api.hrm.v1.ShiftService/ListActiveShifts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shiftServiceClient) GetShift(ctx context.Context, in *GetShiftRequest, opts ...grpc.CallOption) (*ShiftResponse, error) {
	out := new(ShiftResponse)
	err := c.cc.Invoke(ctx, "/api.hrm.v1.ShiftService/GetShift", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shiftServiceClient) UpdateShift(ctx context.Context, in *UpdateShiftRequest, opts ...grpc.CallOption) (*ShiftResponse, error) {
	out := new(ShiftResponse)
	err := c.cc.Invoke(ctx, "/api.hrm.v1.ShiftService/UpdateShift", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shiftServiceClient) DeleteShift(ctx context.Context, in *DeleteShiftRequest, opts ...grpc.CallOption) (*DeleteShiftResponse, error) {
	out := new(DeleteShiftResponse)
	err := c.cc.Invoke(ctx, "/api.hrm.v1.ShiftService/DeleteShift", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shiftServiceClient) ListShifts(ctx context.Context, in *ListShiftsRequest, opts ...grpc.CallOption) (*ListShiftsResponse, error) {
	out := new(ListShiftsResponse)
	err := c.cc.Invoke(ctx, "/api.hrm.v1.ShiftService/ListShifts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ShiftServiceServer is the server API for ShiftService service.
// All implementations should embed UnimplementedShiftServiceServer
// for forward compatibility
type ShiftServiceServer interface {
	// 创建班次
	CreateShift(context.Context, *CreateShiftRequest) (*ShiftResponse, error)
	// 列出启用的班次（必须在 GetShift 之前，避免路由冲突）
	ListActiveShifts(context.Context, *ListActiveShiftsRequest) (*ListShiftsResponse, error)
	// 获取班次
	GetShift(context.Context, *GetShiftRequest) (*ShiftResponse, error)
	// 更新班次
	UpdateShift(context.Context, *UpdateShiftRequest) (*ShiftResponse, error)
	// 删除班次
	DeleteShift(context.Context, *DeleteShiftRequest) (*DeleteShiftResponse, error)
	// 列出班次
	ListShifts(context.Context, *ListShiftsRequest) (*ListShiftsResponse, error)
}

// UnimplementedShiftServiceServer should be embedded to have forward compatible implementations.
type UnimplementedShiftServiceServer struct {
}

func (UnimplementedShiftServiceServer) CreateShift(context.Context, *CreateShiftRequest) (*ShiftResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateShift not implemented")
}
func (UnimplementedShiftServiceServer) ListActiveShifts(context.Context, *ListActiveShiftsRequest) (*ListShiftsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListActiveShifts not implemented")
}
func (UnimplementedShiftServiceServer) GetShift(context.Context, *GetShiftRequest) (*ShiftResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetShift not implemented")
}
func (UnimplementedShiftServiceServer) UpdateShift(context.Context, *UpdateShiftRequest) (*ShiftResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateShift not implemented")
}
func (UnimplementedShiftServiceServer) DeleteShift(context.Context, *DeleteShiftRequest) (*DeleteShiftResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteShift not implemented")
}
func (UnimplementedShiftServiceServer) ListShifts(context.Context, *ListShiftsRequest) (*ListShiftsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListShifts not implemented")
}

// UnsafeShiftServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ShiftServiceServer will
// result in compilation errors.
type UnsafeShiftServiceServer interface {
	mustEmbedUnimplementedShiftServiceServer()
}

func RegisterShiftServiceServer(s grpc.ServiceRegistrar, srv ShiftServiceServer) {
	s.RegisterService(&ShiftService_ServiceDesc, srv)
}

func _ShiftService_CreateShift_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateShiftRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShiftServiceServer).CreateShift(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.hrm.v1.ShiftService/CreateShift",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShiftServiceServer).CreateShift(ctx, req.(*CreateShiftRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShiftService_ListActiveShifts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListActiveShiftsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShiftServiceServer).ListActiveShifts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.hrm.v1.ShiftService/ListActiveShifts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShiftServiceServer).ListActiveShifts(ctx, req.(*ListActiveShiftsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShiftService_GetShift_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetShiftRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShiftServiceServer).GetShift(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.hrm.v1.ShiftService/GetShift",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShiftServiceServer).GetShift(ctx, req.(*GetShiftRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShiftService_UpdateShift_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateShiftRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShiftServiceServer).UpdateShift(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.hrm.v1.ShiftService/UpdateShift",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShiftServiceServer).UpdateShift(ctx, req.(*UpdateShiftRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShiftService_DeleteShift_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteShiftRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShiftServiceServer).DeleteShift(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.hrm.v1.ShiftService/DeleteShift",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShiftServiceServer).DeleteShift(ctx, req.(*DeleteShiftRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShiftService_ListShifts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListShiftsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShiftServiceServer).ListShifts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.hrm.v1.ShiftService/ListShifts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShiftServiceServer).ListShifts(ctx, req.(*ListShiftsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ShiftService_ServiceDesc is the grpc.ServiceDesc for ShiftService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ShiftService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.hrm.v1.ShiftService",
	HandlerType: (*ShiftServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateShift",
			Handler:    _ShiftService_CreateShift_Handler,
		},
		{
			MethodName: "ListActiveShifts",
			Handler:    _ShiftService_ListActiveShifts_Handler,
		},
		{
			MethodName: "GetShift",
			Handler:    _ShiftService_GetShift_Handler,
		},
		{
			MethodName: "UpdateShift",
			Handler:    _ShiftService_UpdateShift_Handler,
		},
		{
			MethodName: "DeleteShift",
			Handler:    _ShiftService_DeleteShift_Handler,
		},
		{
			MethodName: "ListShifts",
			Handler:    _ShiftService_ListShifts_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/hrm/v1/attendance.proto",
}

// ScheduleServiceClient is the client API for ScheduleService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ScheduleServiceClient interface {
	// 创建排班
	CreateSchedule(ctx context.Context, in *CreateScheduleRequest, opts ...grpc.CallOption) (*ScheduleResponse, error)
	// 批量创建排班
	BatchCreateSchedules(ctx context.Context, in *BatchCreateSchedulesRequest, opts ...grpc.CallOption) (*BatchCreateSchedulesResponse, error)
	// 获取排班
	GetSchedule(ctx context.Context, in *GetScheduleRequest, opts ...grpc.CallOption) (*ScheduleResponse, error)
	// 更新排班
	UpdateSchedule(ctx context.Context, in *UpdateScheduleRequest, opts ...grpc.CallOption) (*ScheduleResponse, error)
	// 删除排班
	DeleteSchedule(ctx context.Context, in *DeleteScheduleRequest, opts ...grpc.CallOption) (*DeleteScheduleResponse, error)
	// 查询员工排班
	ListEmployeeSchedules(ctx context.Context, in *ListEmployeeSchedulesRequest, opts ...grpc.CallOption) (*ListSchedulesResponse, error)
	// 查询部门排班
	ListDepartmentSchedules(ctx context.Context, in *ListDepartmentSchedulesRequest, opts ...grpc.CallOption) (*ListSchedulesResponse, error)
}

type scheduleServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewScheduleServiceClient(cc grpc.ClientConnInterface) ScheduleServiceClient {
	return &scheduleServiceClient{cc}
}

func (c *scheduleServiceClient) CreateSchedule(ctx context.Context, in *CreateScheduleRequest, opts ...grpc.CallOption) (*ScheduleResponse, error) {
	out := new(ScheduleResponse)
	err := c.cc.Invoke(ctx, "/api.hrm.v1.ScheduleService/CreateSchedule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scheduleServiceClient) BatchCreateSchedules(ctx context.Context, in *BatchCreateSchedulesRequest, opts ...grpc.CallOption) (*BatchCreateSchedulesResponse, error) {
	out := new(BatchCreateSchedulesResponse)
	err := c.cc.Invoke(ctx, "/api.hrm.v1.ScheduleService/BatchCreateSchedules", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scheduleServiceClient) GetSchedule(ctx context.Context, in *GetScheduleRequest, opts ...grpc.CallOption) (*ScheduleResponse, error) {
	out := new(ScheduleResponse)
	err := c.cc.Invoke(ctx, "/api.hrm.v1.ScheduleService/GetSchedule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scheduleServiceClient) UpdateSchedule(ctx context.Context, in *UpdateScheduleRequest, opts ...grpc.CallOption) (*ScheduleResponse, error) {
	out := new(ScheduleResponse)
	err := c.cc.Invoke(ctx, "/api.hrm.v1.ScheduleService/UpdateSchedule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scheduleServiceClient) DeleteSchedule(ctx context.Context, in *DeleteScheduleRequest, opts ...grpc.CallOption) (*DeleteScheduleResponse, error) {
	out := new(DeleteScheduleResponse)
	err := c.cc.Invoke(ctx, "/api.hrm.v1.ScheduleService/DeleteSchedule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scheduleServiceClient) ListEmployeeSchedules(ctx context.Context, in *ListEmployeeSchedulesRequest, opts ...grpc.CallOption) (*ListSchedulesResponse, error) {
	out := new(ListSchedulesResponse)
	err := c.cc.Invoke(ctx, "/api.hrm.v1.ScheduleService/ListEmployeeSchedules", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scheduleServiceClient) ListDepartmentSchedules(ctx context.Context, in *ListDepartmentSchedulesRequest, opts ...grpc.CallOption) (*ListSchedulesResponse, error) {
	out := new(ListSchedulesResponse)
	err := c.cc.Invoke(ctx, "/api.hrm.v1.ScheduleService/ListDepartmentSchedules", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ScheduleServiceServer is the server API for ScheduleService service.
// All implementations should embed UnimplementedScheduleServiceServer
// for forward compatibility
type ScheduleServiceServer interface {
	// 创建排班
	CreateSchedule(context.Context, *CreateScheduleRequest) (*ScheduleResponse, error)
	// 批量创建排班
	BatchCreateSchedules(context.Context, *BatchCreateSchedulesRequest) (*BatchCreateSchedulesResponse, error)
	// 获取排班
	GetSchedule(context.Context, *GetScheduleRequest) (*ScheduleResponse, error)
	// 更新排班
	UpdateSchedule(context.Context, *UpdateScheduleRequest) (*ScheduleResponse, error)
	// 删除排班
	DeleteSchedule(context.Context, *DeleteScheduleRequest) (*DeleteScheduleResponse, error)
	// 查询员工排班
	ListEmployeeSchedules(context.Context, *ListEmployeeSchedulesRequest) (*ListSchedulesResponse, error)
	// 查询部门排班
	ListDepartmentSchedules(context.Context, *ListDepartmentSchedulesRequest) (*ListSchedulesResponse, error)
}

// UnimplementedScheduleServiceServer should be embedded to have forward compatible implementations.
type UnimplementedScheduleServiceServer struct {
}

func (UnimplementedScheduleServiceServer) CreateSchedule(context.Context, *CreateScheduleRequest) (*ScheduleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSchedule not implemented")
}
func (UnimplementedScheduleServiceServer) BatchCreateSchedules(context.Context, *BatchCreateSchedulesRequest) (*BatchCreateSchedulesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchCreateSchedules not implemented")
}
func (UnimplementedScheduleServiceServer) GetSchedule(context.Context, *GetScheduleRequest) (*ScheduleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSchedule not implemented")
}
func (UnimplementedScheduleServiceServer) UpdateSchedule(context.Context, *UpdateScheduleRequest) (*ScheduleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSchedule not implemented")
}
func (UnimplementedScheduleServiceServer) DeleteSchedule(context.Context, *DeleteScheduleRequest) (*DeleteScheduleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSchedule not implemented")
}
func (UnimplementedScheduleServiceServer) ListEmployeeSchedules(context.Context, *ListEmployeeSchedulesRequest) (*ListSchedulesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListEmployeeSchedules not implemented")
}
func (UnimplementedScheduleServiceServer) ListDepartmentSchedules(context.Context, *ListDepartmentSchedulesRequest) (*ListSchedulesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDepartmentSchedules not implemented")
}

// UnsafeScheduleServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ScheduleServiceServer will
// result in compilation errors.
type UnsafeScheduleServiceServer interface {
	mustEmbedUnimplementedScheduleServiceServer()
}

func RegisterScheduleServiceServer(s grpc.ServiceRegistrar, srv ScheduleServiceServer) {
	s.RegisterService(&ScheduleService_ServiceDesc, srv)
}

func _ScheduleService_CreateSchedule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateScheduleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScheduleServiceServer).CreateSchedule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.hrm.v1.ScheduleService/CreateSchedule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScheduleServiceServer).CreateSchedule(ctx, req.(*CreateScheduleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScheduleService_BatchCreateSchedules_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchCreateSchedulesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScheduleServiceServer).BatchCreateSchedules(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.hrm.v1.ScheduleService/BatchCreateSchedules",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScheduleServiceServer).BatchCreateSchedules(ctx, req.(*BatchCreateSchedulesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScheduleService_GetSchedule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetScheduleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScheduleServiceServer).GetSchedule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.hrm.v1.ScheduleService/GetSchedule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScheduleServiceServer).GetSchedule(ctx, req.(*GetScheduleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScheduleService_UpdateSchedule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateScheduleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScheduleServiceServer).UpdateSchedule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.hrm.v1.ScheduleService/UpdateSchedule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScheduleServiceServer).UpdateSchedule(ctx, req.(*UpdateScheduleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScheduleService_DeleteSchedule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteScheduleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScheduleServiceServer).DeleteSchedule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.hrm.v1.ScheduleService/DeleteSchedule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScheduleServiceServer).DeleteSchedule(ctx, req.(*DeleteScheduleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScheduleService_ListEmployeeSchedules_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListEmployeeSchedulesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScheduleServiceServer).ListEmployeeSchedules(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.hrm.v1.ScheduleService/ListEmployeeSchedules",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScheduleServiceServer).ListEmployeeSchedules(ctx, req.(*ListEmployeeSchedulesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScheduleService_ListDepartmentSchedules_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDepartmentSchedulesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScheduleServiceServer).ListDepartmentSchedules(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.hrm.v1.ScheduleService/ListDepartmentSchedules",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScheduleServiceServer).ListDepartmentSchedules(ctx, req.(*ListDepartmentSchedulesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ScheduleService_ServiceDesc is the grpc.ServiceDesc for ScheduleService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ScheduleService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.hrm.v1.ScheduleService",
	HandlerType: (*ScheduleServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateSchedule",
			Handler:    _ScheduleService_CreateSchedule_Handler,
		},
		{
			MethodName: "BatchCreateSchedules",
			Handler:    _ScheduleService_BatchCreateSchedules_Handler,
		},
		{
			MethodName: "GetSchedule",
			Handler:    _ScheduleService_GetSchedule_Handler,
		},
		{
			MethodName: "UpdateSchedule",
			Handler:    _ScheduleService_UpdateSchedule_Handler,
		},
		{
			MethodName: "DeleteSchedule",
			Handler:    _ScheduleService_DeleteSchedule_Handler,
		},
		{
			MethodName: "ListEmployeeSchedules",
			Handler:    _ScheduleService_ListEmployeeSchedules_Handler,
		},
		{
			MethodName: "ListDepartmentSchedules",
			Handler:    _ScheduleService_ListDepartmentSchedules_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/hrm/v1/attendance.proto",
}

// AttendanceRuleServiceClient is the client API for AttendanceRuleService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AttendanceRuleServiceClient interface {
	// 创建考勤规则
	CreateAttendanceRule(ctx context.Context, in *CreateAttendanceRuleRequest, opts ...grpc.CallOption) (*AttendanceRuleResponse, error)
	// 获取考勤规则
	GetAttendanceRule(ctx context.Context, in *GetAttendanceRuleRequest, opts ...grpc.CallOption) (*AttendanceRuleResponse, error)
	// 更新考勤规则
	UpdateAttendanceRule(ctx context.Context, in *UpdateAttendanceRuleRequest, opts ...grpc.CallOption) (*AttendanceRuleResponse, error)
	// 删除考勤规则
	DeleteAttendanceRule(ctx context.Context, in *DeleteAttendanceRuleRequest, opts ...grpc.CallOption) (*DeleteAttendanceRuleResponse, error)
	// 列出考勤规则
	ListAttendanceRules(ctx context.Context, in *ListAttendanceRulesRequest, opts ...grpc.CallOption) (*ListAttendanceRulesResponse, error)
}

type attendanceRuleServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAttendanceRuleServiceClient(cc grpc.ClientConnInterface) AttendanceRuleServiceClient {
	return &attendanceRuleServiceClient{cc}
}

func (c *attendanceRuleServiceClient) CreateAttendanceRule(ctx context.Context, in *CreateAttendanceRuleRequest, opts ...grpc.CallOption) (*AttendanceRuleResponse, error) {
	out := new(AttendanceRuleResponse)
	err := c.cc.Invoke(ctx, "/api.hrm.v1.AttendanceRuleService/CreateAttendanceRule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *attendanceRuleServiceClient) GetAttendanceRule(ctx context.Context, in *GetAttendanceRuleRequest, opts ...grpc.CallOption) (*AttendanceRuleResponse, error) {
	out := new(AttendanceRuleResponse)
	err := c.cc.Invoke(ctx, "/api.hrm.v1.AttendanceRuleService/GetAttendanceRule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *attendanceRuleServiceClient) UpdateAttendanceRule(ctx context.Context, in *UpdateAttendanceRuleRequest, opts ...grpc.CallOption) (*AttendanceRuleResponse, error) {
	out := new(AttendanceRuleResponse)
	err := c.cc.Invoke(ctx, "/api.hrm.v1.AttendanceRuleService/UpdateAttendanceRule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *attendanceRuleServiceClient) DeleteAttendanceRule(ctx context.Context, in *DeleteAttendanceRuleRequest, opts ...grpc.CallOption) (*DeleteAttendanceRuleResponse, error) {
	out := new(DeleteAttendanceRuleResponse)
	err := c.cc.Invoke(ctx, "/api.hrm.v1.AttendanceRuleService/DeleteAttendanceRule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *attendanceRuleServiceClient) ListAttendanceRules(ctx context.Context, in *ListAttendanceRulesRequest, opts ...grpc.CallOption) (*ListAttendanceRulesResponse, error) {
	out := new(ListAttendanceRulesResponse)
	err := c.cc.Invoke(ctx, "/api.hrm.v1.AttendanceRuleService/ListAttendanceRules", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AttendanceRuleServiceServer is the server API for AttendanceRuleService service.
// All implementations should embed UnimplementedAttendanceRuleServiceServer
// for forward compatibility
type AttendanceRuleServiceServer interface {
	// 创建考勤规则
	CreateAttendanceRule(context.Context, *CreateAttendanceRuleRequest) (*AttendanceRuleResponse, error)
	// 获取考勤规则
	GetAttendanceRule(context.Context, *GetAttendanceRuleRequest) (*AttendanceRuleResponse, error)
	// 更新考勤规则
	UpdateAttendanceRule(context.Context, *UpdateAttendanceRuleRequest) (*AttendanceRuleResponse, error)
	// 删除考勤规则
	DeleteAttendanceRule(context.Context, *DeleteAttendanceRuleRequest) (*DeleteAttendanceRuleResponse, error)
	// 列出考勤规则
	ListAttendanceRules(context.Context, *ListAttendanceRulesRequest) (*ListAttendanceRulesResponse, error)
}

// UnimplementedAttendanceRuleServiceServer should be embedded to have forward compatible implementations.
type UnimplementedAttendanceRuleServiceServer struct {
}

func (UnimplementedAttendanceRuleServiceServer) CreateAttendanceRule(context.Context, *CreateAttendanceRuleRequest) (*AttendanceRuleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAttendanceRule not implemented")
}
func (UnimplementedAttendanceRuleServiceServer) GetAttendanceRule(context.Context, *GetAttendanceRuleRequest) (*AttendanceRuleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAttendanceRule not implemented")
}
func (UnimplementedAttendanceRuleServiceServer) UpdateAttendanceRule(context.Context, *UpdateAttendanceRuleRequest) (*AttendanceRuleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAttendanceRule not implemented")
}
func (UnimplementedAttendanceRuleServiceServer) DeleteAttendanceRule(context.Context, *DeleteAttendanceRuleRequest) (*DeleteAttendanceRuleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAttendanceRule not implemented")
}
func (UnimplementedAttendanceRuleServiceServer) ListAttendanceRules(context.Context, *ListAttendanceRulesRequest) (*ListAttendanceRulesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAttendanceRules not implemented")
}

// UnsafeAttendanceRuleServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AttendanceRuleServiceServer will
// result in compilation errors.
type UnsafeAttendanceRuleServiceServer interface {
	mustEmbedUnimplementedAttendanceRuleServiceServer()
}

func RegisterAttendanceRuleServiceServer(s grpc.ServiceRegistrar, srv AttendanceRuleServiceServer) {
	s.RegisterService(&AttendanceRuleService_ServiceDesc, srv)
}

func _AttendanceRuleService_CreateAttendanceRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAttendanceRuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AttendanceRuleServiceServer).CreateAttendanceRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.hrm.v1.AttendanceRuleService/CreateAttendanceRule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AttendanceRuleServiceServer).CreateAttendanceRule(ctx, req.(*CreateAttendanceRuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AttendanceRuleService_GetAttendanceRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAttendanceRuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AttendanceRuleServiceServer).GetAttendanceRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.hrm.v1.AttendanceRuleService/GetAttendanceRule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AttendanceRuleServiceServer).GetAttendanceRule(ctx, req.(*GetAttendanceRuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AttendanceRuleService_UpdateAttendanceRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAttendanceRuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AttendanceRuleServiceServer).UpdateAttendanceRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.hrm.v1.AttendanceRuleService/UpdateAttendanceRule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AttendanceRuleServiceServer).UpdateAttendanceRule(ctx, req.(*UpdateAttendanceRuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AttendanceRuleService_DeleteAttendanceRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAttendanceRuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AttendanceRuleServiceServer).DeleteAttendanceRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.hrm.v1.AttendanceRuleService/DeleteAttendanceRule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AttendanceRuleServiceServer).DeleteAttendanceRule(ctx, req.(*DeleteAttendanceRuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AttendanceRuleService_ListAttendanceRules_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAttendanceRulesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AttendanceRuleServiceServer).ListAttendanceRules(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.hrm.v1.AttendanceRuleService/ListAttendanceRules",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AttendanceRuleServiceServer).ListAttendanceRules(ctx, req.(*ListAttendanceRulesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AttendanceRuleService_ServiceDesc is the grpc.ServiceDesc for AttendanceRuleService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AttendanceRuleService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.hrm.v1.AttendanceRuleService",
	HandlerType: (*AttendanceRuleServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateAttendanceRule",
			Handler:    _AttendanceRuleService_CreateAttendanceRule_Handler,
		},
		{
			MethodName: "GetAttendanceRule",
			Handler:    _AttendanceRuleService_GetAttendanceRule_Handler,
		},
		{
			MethodName: "UpdateAttendanceRule",
			Handler:    _AttendanceRuleService_UpdateAttendanceRule_Handler,
		},
		{
			MethodName: "DeleteAttendanceRule",
			Handler:    _AttendanceRuleService_DeleteAttendanceRule_Handler,
		},
		{
			MethodName: "ListAttendanceRules",
			Handler:    _AttendanceRuleService_ListAttendanceRules_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/hrm/v1/attendance.proto",
}
