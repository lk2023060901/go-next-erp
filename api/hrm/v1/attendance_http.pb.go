// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.9.0
// - protoc             (unknown)
// source: api/hrm/v1/attendance.proto

package hrmv1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationAttendanceServiceClockIn = "/api.hrm.v1.AttendanceService/ClockIn"
const OperationAttendanceServiceGetAttendanceRecord = "/api.hrm.v1.AttendanceService/GetAttendanceRecord"
const OperationAttendanceServiceGetAttendanceStatistics = "/api.hrm.v1.AttendanceService/GetAttendanceStatistics"
const OperationAttendanceServiceListDepartmentAttendance = "/api.hrm.v1.AttendanceService/ListDepartmentAttendance"
const OperationAttendanceServiceListEmployeeAttendance = "/api.hrm.v1.AttendanceService/ListEmployeeAttendance"
const OperationAttendanceServiceListExceptionAttendance = "/api.hrm.v1.AttendanceService/ListExceptionAttendance"

type AttendanceServiceHTTPServer interface {
	// ClockIn 打卡
	ClockIn(context.Context, *ClockInRequest) (*ClockInResponse, error)
	// GetAttendanceRecord 获取考勤记录
	GetAttendanceRecord(context.Context, *GetAttendanceRecordRequest) (*AttendanceRecordResponse, error)
	// GetAttendanceStatistics 考勤统计
	GetAttendanceStatistics(context.Context, *GetAttendanceStatisticsRequest) (*AttendanceStatisticsResponse, error)
	// ListDepartmentAttendance 查询部门考勤记录
	ListDepartmentAttendance(context.Context, *ListDepartmentAttendanceRequest) (*ListAttendanceRecordResponse, error)
	// ListEmployeeAttendance 查询员工考勤记录
	ListEmployeeAttendance(context.Context, *ListEmployeeAttendanceRequest) (*ListAttendanceRecordResponse, error)
	// ListExceptionAttendance 查询异常考勤
	ListExceptionAttendance(context.Context, *ListExceptionAttendanceRequest) (*ListAttendanceRecordResponse, error)
}

func RegisterAttendanceServiceHTTPServer(s *http.Server, srv AttendanceServiceHTTPServer) {
	r := s.Route("/")
	r.POST("/api/v1/hrm/attendance/clock-in", _AttendanceService_ClockIn0_HTTP_Handler(srv))
	r.GET("/api/v1/hrm/attendance/records/{id}", _AttendanceService_GetAttendanceRecord0_HTTP_Handler(srv))
	r.GET("/api/v1/hrm/attendance/employee/{employee_id}", _AttendanceService_ListEmployeeAttendance0_HTTP_Handler(srv))
	r.GET("/api/v1/hrm/attendance/department/{department_id}", _AttendanceService_ListDepartmentAttendance0_HTTP_Handler(srv))
	r.GET("/api/v1/hrm/attendance/exceptions", _AttendanceService_ListExceptionAttendance0_HTTP_Handler(srv))
	r.GET("/api/v1/hrm/attendance/statistics", _AttendanceService_GetAttendanceStatistics0_HTTP_Handler(srv))
}

func _AttendanceService_ClockIn0_HTTP_Handler(srv AttendanceServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ClockInRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAttendanceServiceClockIn)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ClockIn(ctx, req.(*ClockInRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ClockInResponse)
		return ctx.Result(200, reply)
	}
}

func _AttendanceService_GetAttendanceRecord0_HTTP_Handler(srv AttendanceServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetAttendanceRecordRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAttendanceServiceGetAttendanceRecord)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetAttendanceRecord(ctx, req.(*GetAttendanceRecordRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*AttendanceRecordResponse)
		return ctx.Result(200, reply)
	}
}

func _AttendanceService_ListEmployeeAttendance0_HTTP_Handler(srv AttendanceServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListEmployeeAttendanceRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAttendanceServiceListEmployeeAttendance)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListEmployeeAttendance(ctx, req.(*ListEmployeeAttendanceRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListAttendanceRecordResponse)
		return ctx.Result(200, reply)
	}
}

func _AttendanceService_ListDepartmentAttendance0_HTTP_Handler(srv AttendanceServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListDepartmentAttendanceRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAttendanceServiceListDepartmentAttendance)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListDepartmentAttendance(ctx, req.(*ListDepartmentAttendanceRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListAttendanceRecordResponse)
		return ctx.Result(200, reply)
	}
}

func _AttendanceService_ListExceptionAttendance0_HTTP_Handler(srv AttendanceServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListExceptionAttendanceRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAttendanceServiceListExceptionAttendance)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListExceptionAttendance(ctx, req.(*ListExceptionAttendanceRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListAttendanceRecordResponse)
		return ctx.Result(200, reply)
	}
}

func _AttendanceService_GetAttendanceStatistics0_HTTP_Handler(srv AttendanceServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetAttendanceStatisticsRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAttendanceServiceGetAttendanceStatistics)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetAttendanceStatistics(ctx, req.(*GetAttendanceStatisticsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*AttendanceStatisticsResponse)
		return ctx.Result(200, reply)
	}
}

type AttendanceServiceHTTPClient interface {
	// ClockIn 打卡
	ClockIn(ctx context.Context, req *ClockInRequest, opts ...http.CallOption) (rsp *ClockInResponse, err error)
	// GetAttendanceRecord 获取考勤记录
	GetAttendanceRecord(ctx context.Context, req *GetAttendanceRecordRequest, opts ...http.CallOption) (rsp *AttendanceRecordResponse, err error)
	// GetAttendanceStatistics 考勤统计
	GetAttendanceStatistics(ctx context.Context, req *GetAttendanceStatisticsRequest, opts ...http.CallOption) (rsp *AttendanceStatisticsResponse, err error)
	// ListDepartmentAttendance 查询部门考勤记录
	ListDepartmentAttendance(ctx context.Context, req *ListDepartmentAttendanceRequest, opts ...http.CallOption) (rsp *ListAttendanceRecordResponse, err error)
	// ListEmployeeAttendance 查询员工考勤记录
	ListEmployeeAttendance(ctx context.Context, req *ListEmployeeAttendanceRequest, opts ...http.CallOption) (rsp *ListAttendanceRecordResponse, err error)
	// ListExceptionAttendance 查询异常考勤
	ListExceptionAttendance(ctx context.Context, req *ListExceptionAttendanceRequest, opts ...http.CallOption) (rsp *ListAttendanceRecordResponse, err error)
}

type AttendanceServiceHTTPClientImpl struct {
	cc *http.Client
}

func NewAttendanceServiceHTTPClient(client *http.Client) AttendanceServiceHTTPClient {
	return &AttendanceServiceHTTPClientImpl{client}
}

// ClockIn 打卡
func (c *AttendanceServiceHTTPClientImpl) ClockIn(ctx context.Context, in *ClockInRequest, opts ...http.CallOption) (*ClockInResponse, error) {
	var out ClockInResponse
	pattern := "/api/v1/hrm/attendance/clock-in"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAttendanceServiceClockIn))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

// GetAttendanceRecord 获取考勤记录
func (c *AttendanceServiceHTTPClientImpl) GetAttendanceRecord(ctx context.Context, in *GetAttendanceRecordRequest, opts ...http.CallOption) (*AttendanceRecordResponse, error) {
	var out AttendanceRecordResponse
	pattern := "/api/v1/hrm/attendance/records/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAttendanceServiceGetAttendanceRecord))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

// GetAttendanceStatistics 考勤统计
func (c *AttendanceServiceHTTPClientImpl) GetAttendanceStatistics(ctx context.Context, in *GetAttendanceStatisticsRequest, opts ...http.CallOption) (*AttendanceStatisticsResponse, error) {
	var out AttendanceStatisticsResponse
	pattern := "/api/v1/hrm/attendance/statistics"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAttendanceServiceGetAttendanceStatistics))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

// ListDepartmentAttendance 查询部门考勤记录
func (c *AttendanceServiceHTTPClientImpl) ListDepartmentAttendance(ctx context.Context, in *ListDepartmentAttendanceRequest, opts ...http.CallOption) (*ListAttendanceRecordResponse, error) {
	var out ListAttendanceRecordResponse
	pattern := "/api/v1/hrm/attendance/department/{department_id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAttendanceServiceListDepartmentAttendance))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

// ListEmployeeAttendance 查询员工考勤记录
func (c *AttendanceServiceHTTPClientImpl) ListEmployeeAttendance(ctx context.Context, in *ListEmployeeAttendanceRequest, opts ...http.CallOption) (*ListAttendanceRecordResponse, error) {
	var out ListAttendanceRecordResponse
	pattern := "/api/v1/hrm/attendance/employee/{employee_id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAttendanceServiceListEmployeeAttendance))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

// ListExceptionAttendance 查询异常考勤
func (c *AttendanceServiceHTTPClientImpl) ListExceptionAttendance(ctx context.Context, in *ListExceptionAttendanceRequest, opts ...http.CallOption) (*ListAttendanceRecordResponse, error) {
	var out ListAttendanceRecordResponse
	pattern := "/api/v1/hrm/attendance/exceptions"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAttendanceServiceListExceptionAttendance))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

const OperationShiftServiceCreateShift = "/api.hrm.v1.ShiftService/CreateShift"
const OperationShiftServiceDeleteShift = "/api.hrm.v1.ShiftService/DeleteShift"
const OperationShiftServiceGetShift = "/api.hrm.v1.ShiftService/GetShift"
const OperationShiftServiceListActiveShifts = "/api.hrm.v1.ShiftService/ListActiveShifts"
const OperationShiftServiceListShifts = "/api.hrm.v1.ShiftService/ListShifts"
const OperationShiftServiceUpdateShift = "/api.hrm.v1.ShiftService/UpdateShift"

type ShiftServiceHTTPServer interface {
	// CreateShift 创建班次
	CreateShift(context.Context, *CreateShiftRequest) (*ShiftResponse, error)
	// DeleteShift 删除班次
	DeleteShift(context.Context, *DeleteShiftRequest) (*DeleteShiftResponse, error)
	// GetShift 获取班次
	GetShift(context.Context, *GetShiftRequest) (*ShiftResponse, error)
	// ListActiveShifts 列出启用的班次（必须在 GetShift 之前，避免路由冲突）
	ListActiveShifts(context.Context, *ListActiveShiftsRequest) (*ListShiftsResponse, error)
	// ListShifts 列出班次
	ListShifts(context.Context, *ListShiftsRequest) (*ListShiftsResponse, error)
	// UpdateShift 更新班次
	UpdateShift(context.Context, *UpdateShiftRequest) (*ShiftResponse, error)
}

func RegisterShiftServiceHTTPServer(s *http.Server, srv ShiftServiceHTTPServer) {
	r := s.Route("/")
	r.POST("/api/v1/hrm/shifts", _ShiftService_CreateShift0_HTTP_Handler(srv))
	r.GET("/api/v1/hrm/shifts/active", _ShiftService_ListActiveShifts0_HTTP_Handler(srv))
	r.GET("/api/v1/hrm/shifts/{id}", _ShiftService_GetShift0_HTTP_Handler(srv))
	r.PUT("/api/v1/hrm/shifts/{id}", _ShiftService_UpdateShift0_HTTP_Handler(srv))
	r.DELETE("/api/v1/hrm/shifts/{id}", _ShiftService_DeleteShift0_HTTP_Handler(srv))
	r.GET("/api/v1/hrm/shifts", _ShiftService_ListShifts0_HTTP_Handler(srv))
}

func _ShiftService_CreateShift0_HTTP_Handler(srv ShiftServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateShiftRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationShiftServiceCreateShift)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateShift(ctx, req.(*CreateShiftRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ShiftResponse)
		return ctx.Result(200, reply)
	}
}

func _ShiftService_ListActiveShifts0_HTTP_Handler(srv ShiftServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListActiveShiftsRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationShiftServiceListActiveShifts)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListActiveShifts(ctx, req.(*ListActiveShiftsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListShiftsResponse)
		return ctx.Result(200, reply)
	}
}

func _ShiftService_GetShift0_HTTP_Handler(srv ShiftServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetShiftRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationShiftServiceGetShift)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetShift(ctx, req.(*GetShiftRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ShiftResponse)
		return ctx.Result(200, reply)
	}
}

func _ShiftService_UpdateShift0_HTTP_Handler(srv ShiftServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateShiftRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationShiftServiceUpdateShift)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateShift(ctx, req.(*UpdateShiftRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ShiftResponse)
		return ctx.Result(200, reply)
	}
}

func _ShiftService_DeleteShift0_HTTP_Handler(srv ShiftServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteShiftRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationShiftServiceDeleteShift)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteShift(ctx, req.(*DeleteShiftRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteShiftResponse)
		return ctx.Result(200, reply)
	}
}

func _ShiftService_ListShifts0_HTTP_Handler(srv ShiftServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListShiftsRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationShiftServiceListShifts)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListShifts(ctx, req.(*ListShiftsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListShiftsResponse)
		return ctx.Result(200, reply)
	}
}

type ShiftServiceHTTPClient interface {
	// CreateShift 创建班次
	CreateShift(ctx context.Context, req *CreateShiftRequest, opts ...http.CallOption) (rsp *ShiftResponse, err error)
	// DeleteShift 删除班次
	DeleteShift(ctx context.Context, req *DeleteShiftRequest, opts ...http.CallOption) (rsp *DeleteShiftResponse, err error)
	// GetShift 获取班次
	GetShift(ctx context.Context, req *GetShiftRequest, opts ...http.CallOption) (rsp *ShiftResponse, err error)
	// ListActiveShifts 列出启用的班次（必须在 GetShift 之前，避免路由冲突）
	ListActiveShifts(ctx context.Context, req *ListActiveShiftsRequest, opts ...http.CallOption) (rsp *ListShiftsResponse, err error)
	// ListShifts 列出班次
	ListShifts(ctx context.Context, req *ListShiftsRequest, opts ...http.CallOption) (rsp *ListShiftsResponse, err error)
	// UpdateShift 更新班次
	UpdateShift(ctx context.Context, req *UpdateShiftRequest, opts ...http.CallOption) (rsp *ShiftResponse, err error)
}

type ShiftServiceHTTPClientImpl struct {
	cc *http.Client
}

func NewShiftServiceHTTPClient(client *http.Client) ShiftServiceHTTPClient {
	return &ShiftServiceHTTPClientImpl{client}
}

// CreateShift 创建班次
func (c *ShiftServiceHTTPClientImpl) CreateShift(ctx context.Context, in *CreateShiftRequest, opts ...http.CallOption) (*ShiftResponse, error) {
	var out ShiftResponse
	pattern := "/api/v1/hrm/shifts"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationShiftServiceCreateShift))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

// DeleteShift 删除班次
func (c *ShiftServiceHTTPClientImpl) DeleteShift(ctx context.Context, in *DeleteShiftRequest, opts ...http.CallOption) (*DeleteShiftResponse, error) {
	var out DeleteShiftResponse
	pattern := "/api/v1/hrm/shifts/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationShiftServiceDeleteShift))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

// GetShift 获取班次
func (c *ShiftServiceHTTPClientImpl) GetShift(ctx context.Context, in *GetShiftRequest, opts ...http.CallOption) (*ShiftResponse, error) {
	var out ShiftResponse
	pattern := "/api/v1/hrm/shifts/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationShiftServiceGetShift))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

// ListActiveShifts 列出启用的班次（必须在 GetShift 之前，避免路由冲突）
func (c *ShiftServiceHTTPClientImpl) ListActiveShifts(ctx context.Context, in *ListActiveShiftsRequest, opts ...http.CallOption) (*ListShiftsResponse, error) {
	var out ListShiftsResponse
	pattern := "/api/v1/hrm/shifts/active"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationShiftServiceListActiveShifts))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

// ListShifts 列出班次
func (c *ShiftServiceHTTPClientImpl) ListShifts(ctx context.Context, in *ListShiftsRequest, opts ...http.CallOption) (*ListShiftsResponse, error) {
	var out ListShiftsResponse
	pattern := "/api/v1/hrm/shifts"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationShiftServiceListShifts))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

// UpdateShift 更新班次
func (c *ShiftServiceHTTPClientImpl) UpdateShift(ctx context.Context, in *UpdateShiftRequest, opts ...http.CallOption) (*ShiftResponse, error) {
	var out ShiftResponse
	pattern := "/api/v1/hrm/shifts/{id}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationShiftServiceUpdateShift))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

const OperationScheduleServiceBatchCreateSchedules = "/api.hrm.v1.ScheduleService/BatchCreateSchedules"
const OperationScheduleServiceCreateSchedule = "/api.hrm.v1.ScheduleService/CreateSchedule"
const OperationScheduleServiceDeleteSchedule = "/api.hrm.v1.ScheduleService/DeleteSchedule"
const OperationScheduleServiceGetSchedule = "/api.hrm.v1.ScheduleService/GetSchedule"
const OperationScheduleServiceListDepartmentSchedules = "/api.hrm.v1.ScheduleService/ListDepartmentSchedules"
const OperationScheduleServiceListEmployeeSchedules = "/api.hrm.v1.ScheduleService/ListEmployeeSchedules"
const OperationScheduleServiceUpdateSchedule = "/api.hrm.v1.ScheduleService/UpdateSchedule"

type ScheduleServiceHTTPServer interface {
	// BatchCreateSchedules 批量创建排班
	BatchCreateSchedules(context.Context, *BatchCreateSchedulesRequest) (*BatchCreateSchedulesResponse, error)
	// CreateSchedule 创建排班
	CreateSchedule(context.Context, *CreateScheduleRequest) (*ScheduleResponse, error)
	// DeleteSchedule 删除排班
	DeleteSchedule(context.Context, *DeleteScheduleRequest) (*DeleteScheduleResponse, error)
	// GetSchedule 获取排班
	GetSchedule(context.Context, *GetScheduleRequest) (*ScheduleResponse, error)
	// ListDepartmentSchedules 查询部门排班
	ListDepartmentSchedules(context.Context, *ListDepartmentSchedulesRequest) (*ListSchedulesResponse, error)
	// ListEmployeeSchedules 查询员工排班
	ListEmployeeSchedules(context.Context, *ListEmployeeSchedulesRequest) (*ListSchedulesResponse, error)
	// UpdateSchedule 更新排班
	UpdateSchedule(context.Context, *UpdateScheduleRequest) (*ScheduleResponse, error)
}

func RegisterScheduleServiceHTTPServer(s *http.Server, srv ScheduleServiceHTTPServer) {
	r := s.Route("/")
	r.POST("/api/v1/hrm/schedules", _ScheduleService_CreateSchedule0_HTTP_Handler(srv))
	r.POST("/api/v1/hrm/schedules/batch", _ScheduleService_BatchCreateSchedules0_HTTP_Handler(srv))
	r.GET("/api/v1/hrm/schedules/{id}", _ScheduleService_GetSchedule0_HTTP_Handler(srv))
	r.PUT("/api/v1/hrm/schedules/{id}", _ScheduleService_UpdateSchedule0_HTTP_Handler(srv))
	r.DELETE("/api/v1/hrm/schedules/{id}", _ScheduleService_DeleteSchedule0_HTTP_Handler(srv))
	r.GET("/api/v1/hrm/schedules/employee/{employee_id}", _ScheduleService_ListEmployeeSchedules0_HTTP_Handler(srv))
	r.GET("/api/v1/hrm/schedules/department/{department_id}", _ScheduleService_ListDepartmentSchedules0_HTTP_Handler(srv))
}

func _ScheduleService_CreateSchedule0_HTTP_Handler(srv ScheduleServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateScheduleRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationScheduleServiceCreateSchedule)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateSchedule(ctx, req.(*CreateScheduleRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ScheduleResponse)
		return ctx.Result(200, reply)
	}
}

func _ScheduleService_BatchCreateSchedules0_HTTP_Handler(srv ScheduleServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in BatchCreateSchedulesRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationScheduleServiceBatchCreateSchedules)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.BatchCreateSchedules(ctx, req.(*BatchCreateSchedulesRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*BatchCreateSchedulesResponse)
		return ctx.Result(200, reply)
	}
}

func _ScheduleService_GetSchedule0_HTTP_Handler(srv ScheduleServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetScheduleRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationScheduleServiceGetSchedule)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetSchedule(ctx, req.(*GetScheduleRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ScheduleResponse)
		return ctx.Result(200, reply)
	}
}

func _ScheduleService_UpdateSchedule0_HTTP_Handler(srv ScheduleServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateScheduleRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationScheduleServiceUpdateSchedule)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateSchedule(ctx, req.(*UpdateScheduleRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ScheduleResponse)
		return ctx.Result(200, reply)
	}
}

func _ScheduleService_DeleteSchedule0_HTTP_Handler(srv ScheduleServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteScheduleRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationScheduleServiceDeleteSchedule)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteSchedule(ctx, req.(*DeleteScheduleRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteScheduleResponse)
		return ctx.Result(200, reply)
	}
}

func _ScheduleService_ListEmployeeSchedules0_HTTP_Handler(srv ScheduleServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListEmployeeSchedulesRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationScheduleServiceListEmployeeSchedules)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListEmployeeSchedules(ctx, req.(*ListEmployeeSchedulesRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListSchedulesResponse)
		return ctx.Result(200, reply)
	}
}

func _ScheduleService_ListDepartmentSchedules0_HTTP_Handler(srv ScheduleServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListDepartmentSchedulesRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationScheduleServiceListDepartmentSchedules)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListDepartmentSchedules(ctx, req.(*ListDepartmentSchedulesRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListSchedulesResponse)
		return ctx.Result(200, reply)
	}
}

type ScheduleServiceHTTPClient interface {
	// BatchCreateSchedules 批量创建排班
	BatchCreateSchedules(ctx context.Context, req *BatchCreateSchedulesRequest, opts ...http.CallOption) (rsp *BatchCreateSchedulesResponse, err error)
	// CreateSchedule 创建排班
	CreateSchedule(ctx context.Context, req *CreateScheduleRequest, opts ...http.CallOption) (rsp *ScheduleResponse, err error)
	// DeleteSchedule 删除排班
	DeleteSchedule(ctx context.Context, req *DeleteScheduleRequest, opts ...http.CallOption) (rsp *DeleteScheduleResponse, err error)
	// GetSchedule 获取排班
	GetSchedule(ctx context.Context, req *GetScheduleRequest, opts ...http.CallOption) (rsp *ScheduleResponse, err error)
	// ListDepartmentSchedules 查询部门排班
	ListDepartmentSchedules(ctx context.Context, req *ListDepartmentSchedulesRequest, opts ...http.CallOption) (rsp *ListSchedulesResponse, err error)
	// ListEmployeeSchedules 查询员工排班
	ListEmployeeSchedules(ctx context.Context, req *ListEmployeeSchedulesRequest, opts ...http.CallOption) (rsp *ListSchedulesResponse, err error)
	// UpdateSchedule 更新排班
	UpdateSchedule(ctx context.Context, req *UpdateScheduleRequest, opts ...http.CallOption) (rsp *ScheduleResponse, err error)
}

type ScheduleServiceHTTPClientImpl struct {
	cc *http.Client
}

func NewScheduleServiceHTTPClient(client *http.Client) ScheduleServiceHTTPClient {
	return &ScheduleServiceHTTPClientImpl{client}
}

// BatchCreateSchedules 批量创建排班
func (c *ScheduleServiceHTTPClientImpl) BatchCreateSchedules(ctx context.Context, in *BatchCreateSchedulesRequest, opts ...http.CallOption) (*BatchCreateSchedulesResponse, error) {
	var out BatchCreateSchedulesResponse
	pattern := "/api/v1/hrm/schedules/batch"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationScheduleServiceBatchCreateSchedules))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

// CreateSchedule 创建排班
func (c *ScheduleServiceHTTPClientImpl) CreateSchedule(ctx context.Context, in *CreateScheduleRequest, opts ...http.CallOption) (*ScheduleResponse, error) {
	var out ScheduleResponse
	pattern := "/api/v1/hrm/schedules"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationScheduleServiceCreateSchedule))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

// DeleteSchedule 删除排班
func (c *ScheduleServiceHTTPClientImpl) DeleteSchedule(ctx context.Context, in *DeleteScheduleRequest, opts ...http.CallOption) (*DeleteScheduleResponse, error) {
	var out DeleteScheduleResponse
	pattern := "/api/v1/hrm/schedules/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationScheduleServiceDeleteSchedule))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

// GetSchedule 获取排班
func (c *ScheduleServiceHTTPClientImpl) GetSchedule(ctx context.Context, in *GetScheduleRequest, opts ...http.CallOption) (*ScheduleResponse, error) {
	var out ScheduleResponse
	pattern := "/api/v1/hrm/schedules/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationScheduleServiceGetSchedule))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

// ListDepartmentSchedules 查询部门排班
func (c *ScheduleServiceHTTPClientImpl) ListDepartmentSchedules(ctx context.Context, in *ListDepartmentSchedulesRequest, opts ...http.CallOption) (*ListSchedulesResponse, error) {
	var out ListSchedulesResponse
	pattern := "/api/v1/hrm/schedules/department/{department_id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationScheduleServiceListDepartmentSchedules))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

// ListEmployeeSchedules 查询员工排班
func (c *ScheduleServiceHTTPClientImpl) ListEmployeeSchedules(ctx context.Context, in *ListEmployeeSchedulesRequest, opts ...http.CallOption) (*ListSchedulesResponse, error) {
	var out ListSchedulesResponse
	pattern := "/api/v1/hrm/schedules/employee/{employee_id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationScheduleServiceListEmployeeSchedules))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

// UpdateSchedule 更新排班
func (c *ScheduleServiceHTTPClientImpl) UpdateSchedule(ctx context.Context, in *UpdateScheduleRequest, opts ...http.CallOption) (*ScheduleResponse, error) {
	var out ScheduleResponse
	pattern := "/api/v1/hrm/schedules/{id}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationScheduleServiceUpdateSchedule))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

const OperationAttendanceRuleServiceCreateAttendanceRule = "/api.hrm.v1.AttendanceRuleService/CreateAttendanceRule"
const OperationAttendanceRuleServiceDeleteAttendanceRule = "/api.hrm.v1.AttendanceRuleService/DeleteAttendanceRule"
const OperationAttendanceRuleServiceGetAttendanceRule = "/api.hrm.v1.AttendanceRuleService/GetAttendanceRule"
const OperationAttendanceRuleServiceListAttendanceRules = "/api.hrm.v1.AttendanceRuleService/ListAttendanceRules"
const OperationAttendanceRuleServiceUpdateAttendanceRule = "/api.hrm.v1.AttendanceRuleService/UpdateAttendanceRule"

type AttendanceRuleServiceHTTPServer interface {
	// CreateAttendanceRule 创建考勤规则
	CreateAttendanceRule(context.Context, *CreateAttendanceRuleRequest) (*AttendanceRuleResponse, error)
	// DeleteAttendanceRule 删除考勤规则
	DeleteAttendanceRule(context.Context, *DeleteAttendanceRuleRequest) (*DeleteAttendanceRuleResponse, error)
	// GetAttendanceRule 获取考勤规则
	GetAttendanceRule(context.Context, *GetAttendanceRuleRequest) (*AttendanceRuleResponse, error)
	// ListAttendanceRules 列出考勤规则
	ListAttendanceRules(context.Context, *ListAttendanceRulesRequest) (*ListAttendanceRulesResponse, error)
	// UpdateAttendanceRule 更新考勤规则
	UpdateAttendanceRule(context.Context, *UpdateAttendanceRuleRequest) (*AttendanceRuleResponse, error)
}

func RegisterAttendanceRuleServiceHTTPServer(s *http.Server, srv AttendanceRuleServiceHTTPServer) {
	r := s.Route("/")
	r.POST("/api/v1/hrm/attendance-rules", _AttendanceRuleService_CreateAttendanceRule0_HTTP_Handler(srv))
	r.GET("/api/v1/hrm/attendance-rules/{id}", _AttendanceRuleService_GetAttendanceRule0_HTTP_Handler(srv))
	r.PUT("/api/v1/hrm/attendance-rules/{id}", _AttendanceRuleService_UpdateAttendanceRule0_HTTP_Handler(srv))
	r.DELETE("/api/v1/hrm/attendance-rules/{id}", _AttendanceRuleService_DeleteAttendanceRule0_HTTP_Handler(srv))
	r.GET("/api/v1/hrm/attendance-rules", _AttendanceRuleService_ListAttendanceRules0_HTTP_Handler(srv))
}

func _AttendanceRuleService_CreateAttendanceRule0_HTTP_Handler(srv AttendanceRuleServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateAttendanceRuleRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAttendanceRuleServiceCreateAttendanceRule)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateAttendanceRule(ctx, req.(*CreateAttendanceRuleRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*AttendanceRuleResponse)
		return ctx.Result(200, reply)
	}
}

func _AttendanceRuleService_GetAttendanceRule0_HTTP_Handler(srv AttendanceRuleServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetAttendanceRuleRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAttendanceRuleServiceGetAttendanceRule)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetAttendanceRule(ctx, req.(*GetAttendanceRuleRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*AttendanceRuleResponse)
		return ctx.Result(200, reply)
	}
}

func _AttendanceRuleService_UpdateAttendanceRule0_HTTP_Handler(srv AttendanceRuleServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateAttendanceRuleRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAttendanceRuleServiceUpdateAttendanceRule)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateAttendanceRule(ctx, req.(*UpdateAttendanceRuleRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*AttendanceRuleResponse)
		return ctx.Result(200, reply)
	}
}

func _AttendanceRuleService_DeleteAttendanceRule0_HTTP_Handler(srv AttendanceRuleServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteAttendanceRuleRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAttendanceRuleServiceDeleteAttendanceRule)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteAttendanceRule(ctx, req.(*DeleteAttendanceRuleRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteAttendanceRuleResponse)
		return ctx.Result(200, reply)
	}
}

func _AttendanceRuleService_ListAttendanceRules0_HTTP_Handler(srv AttendanceRuleServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListAttendanceRulesRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAttendanceRuleServiceListAttendanceRules)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListAttendanceRules(ctx, req.(*ListAttendanceRulesRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListAttendanceRulesResponse)
		return ctx.Result(200, reply)
	}
}

type AttendanceRuleServiceHTTPClient interface {
	// CreateAttendanceRule 创建考勤规则
	CreateAttendanceRule(ctx context.Context, req *CreateAttendanceRuleRequest, opts ...http.CallOption) (rsp *AttendanceRuleResponse, err error)
	// DeleteAttendanceRule 删除考勤规则
	DeleteAttendanceRule(ctx context.Context, req *DeleteAttendanceRuleRequest, opts ...http.CallOption) (rsp *DeleteAttendanceRuleResponse, err error)
	// GetAttendanceRule 获取考勤规则
	GetAttendanceRule(ctx context.Context, req *GetAttendanceRuleRequest, opts ...http.CallOption) (rsp *AttendanceRuleResponse, err error)
	// ListAttendanceRules 列出考勤规则
	ListAttendanceRules(ctx context.Context, req *ListAttendanceRulesRequest, opts ...http.CallOption) (rsp *ListAttendanceRulesResponse, err error)
	// UpdateAttendanceRule 更新考勤规则
	UpdateAttendanceRule(ctx context.Context, req *UpdateAttendanceRuleRequest, opts ...http.CallOption) (rsp *AttendanceRuleResponse, err error)
}

type AttendanceRuleServiceHTTPClientImpl struct {
	cc *http.Client
}

func NewAttendanceRuleServiceHTTPClient(client *http.Client) AttendanceRuleServiceHTTPClient {
	return &AttendanceRuleServiceHTTPClientImpl{client}
}

// CreateAttendanceRule 创建考勤规则
func (c *AttendanceRuleServiceHTTPClientImpl) CreateAttendanceRule(ctx context.Context, in *CreateAttendanceRuleRequest, opts ...http.CallOption) (*AttendanceRuleResponse, error) {
	var out AttendanceRuleResponse
	pattern := "/api/v1/hrm/attendance-rules"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAttendanceRuleServiceCreateAttendanceRule))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

// DeleteAttendanceRule 删除考勤规则
func (c *AttendanceRuleServiceHTTPClientImpl) DeleteAttendanceRule(ctx context.Context, in *DeleteAttendanceRuleRequest, opts ...http.CallOption) (*DeleteAttendanceRuleResponse, error) {
	var out DeleteAttendanceRuleResponse
	pattern := "/api/v1/hrm/attendance-rules/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAttendanceRuleServiceDeleteAttendanceRule))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

// GetAttendanceRule 获取考勤规则
func (c *AttendanceRuleServiceHTTPClientImpl) GetAttendanceRule(ctx context.Context, in *GetAttendanceRuleRequest, opts ...http.CallOption) (*AttendanceRuleResponse, error) {
	var out AttendanceRuleResponse
	pattern := "/api/v1/hrm/attendance-rules/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAttendanceRuleServiceGetAttendanceRule))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

// ListAttendanceRules 列出考勤规则
func (c *AttendanceRuleServiceHTTPClientImpl) ListAttendanceRules(ctx context.Context, in *ListAttendanceRulesRequest, opts ...http.CallOption) (*ListAttendanceRulesResponse, error) {
	var out ListAttendanceRulesResponse
	pattern := "/api/v1/hrm/attendance-rules"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAttendanceRuleServiceListAttendanceRules))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

// UpdateAttendanceRule 更新考勤规则
func (c *AttendanceRuleServiceHTTPClientImpl) UpdateAttendanceRule(ctx context.Context, in *UpdateAttendanceRuleRequest, opts ...http.CallOption) (*AttendanceRuleResponse, error) {
	var out AttendanceRuleResponse
	pattern := "/api/v1/hrm/attendance-rules/{id}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAttendanceRuleServiceUpdateAttendanceRule))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
