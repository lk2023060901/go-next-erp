// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: api/hrm/v1/business_trip.proto

package hrmv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BusinessTripServiceClient is the client API for BusinessTripService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BusinessTripServiceClient interface {
	// 创建出差申请
	CreateBusinessTrip(ctx context.Context, in *CreateBusinessTripRequest, opts ...grpc.CallOption) (*BusinessTripResponse, error)
	// 更新出差申请
	UpdateBusinessTrip(ctx context.Context, in *UpdateBusinessTripRequest, opts ...grpc.CallOption) (*BusinessTripResponse, error)
	// 删除出差申请
	DeleteBusinessTrip(ctx context.Context, in *DeleteBusinessTripRequest, opts ...grpc.CallOption) (*DeleteBusinessTripResponse, error)
	// 获取出差详情
	GetBusinessTrip(ctx context.Context, in *GetBusinessTripRequest, opts ...grpc.CallOption) (*BusinessTripResponse, error)
	// 列表查询出差记录
	ListBusinessTrips(ctx context.Context, in *ListBusinessTripsRequest, opts ...grpc.CallOption) (*ListBusinessTripsResponse, error)
	// 查询员工出差记录
	ListEmployeeBusinessTrips(ctx context.Context, in *ListEmployeeBusinessTripsRequest, opts ...grpc.CallOption) (*ListBusinessTripsResponse, error)
	// 查询待审批的出差
	ListPendingBusinessTrips(ctx context.Context, in *ListPendingBusinessTripsRequest, opts ...grpc.CallOption) (*ListBusinessTripsResponse, error)
	// 提交出差审批
	SubmitBusinessTrip(ctx context.Context, in *SubmitBusinessTripRequest, opts ...grpc.CallOption) (*SubmitBusinessTripResponse, error)
	// 批准出差
	ApproveBusinessTrip(ctx context.Context, in *ApproveBusinessTripRequest, opts ...grpc.CallOption) (*ApproveBusinessTripResponse, error)
	// 拒绝出差
	RejectBusinessTrip(ctx context.Context, in *RejectBusinessTripRequest, opts ...grpc.CallOption) (*RejectBusinessTripResponse, error)
	// 提交出差报告
	SubmitTripReport(ctx context.Context, in *SubmitTripReportRequest, opts ...grpc.CallOption) (*BusinessTripResponse, error)
}

type businessTripServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBusinessTripServiceClient(cc grpc.ClientConnInterface) BusinessTripServiceClient {
	return &businessTripServiceClient{cc}
}

func (c *businessTripServiceClient) CreateBusinessTrip(ctx context.Context, in *CreateBusinessTripRequest, opts ...grpc.CallOption) (*BusinessTripResponse, error) {
	out := new(BusinessTripResponse)
	err := c.cc.Invoke(ctx, "/api.hrm.v1.BusinessTripService/CreateBusinessTrip", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *businessTripServiceClient) UpdateBusinessTrip(ctx context.Context, in *UpdateBusinessTripRequest, opts ...grpc.CallOption) (*BusinessTripResponse, error) {
	out := new(BusinessTripResponse)
	err := c.cc.Invoke(ctx, "/api.hrm.v1.BusinessTripService/UpdateBusinessTrip", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *businessTripServiceClient) DeleteBusinessTrip(ctx context.Context, in *DeleteBusinessTripRequest, opts ...grpc.CallOption) (*DeleteBusinessTripResponse, error) {
	out := new(DeleteBusinessTripResponse)
	err := c.cc.Invoke(ctx, "/api.hrm.v1.BusinessTripService/DeleteBusinessTrip", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *businessTripServiceClient) GetBusinessTrip(ctx context.Context, in *GetBusinessTripRequest, opts ...grpc.CallOption) (*BusinessTripResponse, error) {
	out := new(BusinessTripResponse)
	err := c.cc.Invoke(ctx, "/api.hrm.v1.BusinessTripService/GetBusinessTrip", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *businessTripServiceClient) ListBusinessTrips(ctx context.Context, in *ListBusinessTripsRequest, opts ...grpc.CallOption) (*ListBusinessTripsResponse, error) {
	out := new(ListBusinessTripsResponse)
	err := c.cc.Invoke(ctx, "/api.hrm.v1.BusinessTripService/ListBusinessTrips", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *businessTripServiceClient) ListEmployeeBusinessTrips(ctx context.Context, in *ListEmployeeBusinessTripsRequest, opts ...grpc.CallOption) (*ListBusinessTripsResponse, error) {
	out := new(ListBusinessTripsResponse)
	err := c.cc.Invoke(ctx, "/api.hrm.v1.BusinessTripService/ListEmployeeBusinessTrips", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *businessTripServiceClient) ListPendingBusinessTrips(ctx context.Context, in *ListPendingBusinessTripsRequest, opts ...grpc.CallOption) (*ListBusinessTripsResponse, error) {
	out := new(ListBusinessTripsResponse)
	err := c.cc.Invoke(ctx, "/api.hrm.v1.BusinessTripService/ListPendingBusinessTrips", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *businessTripServiceClient) SubmitBusinessTrip(ctx context.Context, in *SubmitBusinessTripRequest, opts ...grpc.CallOption) (*SubmitBusinessTripResponse, error) {
	out := new(SubmitBusinessTripResponse)
	err := c.cc.Invoke(ctx, "/api.hrm.v1.BusinessTripService/SubmitBusinessTrip", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *businessTripServiceClient) ApproveBusinessTrip(ctx context.Context, in *ApproveBusinessTripRequest, opts ...grpc.CallOption) (*ApproveBusinessTripResponse, error) {
	out := new(ApproveBusinessTripResponse)
	err := c.cc.Invoke(ctx, "/api.hrm.v1.BusinessTripService/ApproveBusinessTrip", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *businessTripServiceClient) RejectBusinessTrip(ctx context.Context, in *RejectBusinessTripRequest, opts ...grpc.CallOption) (*RejectBusinessTripResponse, error) {
	out := new(RejectBusinessTripResponse)
	err := c.cc.Invoke(ctx, "/api.hrm.v1.BusinessTripService/RejectBusinessTrip", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *businessTripServiceClient) SubmitTripReport(ctx context.Context, in *SubmitTripReportRequest, opts ...grpc.CallOption) (*BusinessTripResponse, error) {
	out := new(BusinessTripResponse)
	err := c.cc.Invoke(ctx, "/api.hrm.v1.BusinessTripService/SubmitTripReport", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BusinessTripServiceServer is the server API for BusinessTripService service.
// All implementations should embed UnimplementedBusinessTripServiceServer
// for forward compatibility
type BusinessTripServiceServer interface {
	// 创建出差申请
	CreateBusinessTrip(context.Context, *CreateBusinessTripRequest) (*BusinessTripResponse, error)
	// 更新出差申请
	UpdateBusinessTrip(context.Context, *UpdateBusinessTripRequest) (*BusinessTripResponse, error)
	// 删除出差申请
	DeleteBusinessTrip(context.Context, *DeleteBusinessTripRequest) (*DeleteBusinessTripResponse, error)
	// 获取出差详情
	GetBusinessTrip(context.Context, *GetBusinessTripRequest) (*BusinessTripResponse, error)
	// 列表查询出差记录
	ListBusinessTrips(context.Context, *ListBusinessTripsRequest) (*ListBusinessTripsResponse, error)
	// 查询员工出差记录
	ListEmployeeBusinessTrips(context.Context, *ListEmployeeBusinessTripsRequest) (*ListBusinessTripsResponse, error)
	// 查询待审批的出差
	ListPendingBusinessTrips(context.Context, *ListPendingBusinessTripsRequest) (*ListBusinessTripsResponse, error)
	// 提交出差审批
	SubmitBusinessTrip(context.Context, *SubmitBusinessTripRequest) (*SubmitBusinessTripResponse, error)
	// 批准出差
	ApproveBusinessTrip(context.Context, *ApproveBusinessTripRequest) (*ApproveBusinessTripResponse, error)
	// 拒绝出差
	RejectBusinessTrip(context.Context, *RejectBusinessTripRequest) (*RejectBusinessTripResponse, error)
	// 提交出差报告
	SubmitTripReport(context.Context, *SubmitTripReportRequest) (*BusinessTripResponse, error)
}

// UnimplementedBusinessTripServiceServer should be embedded to have forward compatible implementations.
type UnimplementedBusinessTripServiceServer struct {
}

func (UnimplementedBusinessTripServiceServer) CreateBusinessTrip(context.Context, *CreateBusinessTripRequest) (*BusinessTripResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBusinessTrip not implemented")
}
func (UnimplementedBusinessTripServiceServer) UpdateBusinessTrip(context.Context, *UpdateBusinessTripRequest) (*BusinessTripResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBusinessTrip not implemented")
}
func (UnimplementedBusinessTripServiceServer) DeleteBusinessTrip(context.Context, *DeleteBusinessTripRequest) (*DeleteBusinessTripResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBusinessTrip not implemented")
}
func (UnimplementedBusinessTripServiceServer) GetBusinessTrip(context.Context, *GetBusinessTripRequest) (*BusinessTripResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBusinessTrip not implemented")
}
func (UnimplementedBusinessTripServiceServer) ListBusinessTrips(context.Context, *ListBusinessTripsRequest) (*ListBusinessTripsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBusinessTrips not implemented")
}
func (UnimplementedBusinessTripServiceServer) ListEmployeeBusinessTrips(context.Context, *ListEmployeeBusinessTripsRequest) (*ListBusinessTripsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListEmployeeBusinessTrips not implemented")
}
func (UnimplementedBusinessTripServiceServer) ListPendingBusinessTrips(context.Context, *ListPendingBusinessTripsRequest) (*ListBusinessTripsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPendingBusinessTrips not implemented")
}
func (UnimplementedBusinessTripServiceServer) SubmitBusinessTrip(context.Context, *SubmitBusinessTripRequest) (*SubmitBusinessTripResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitBusinessTrip not implemented")
}
func (UnimplementedBusinessTripServiceServer) ApproveBusinessTrip(context.Context, *ApproveBusinessTripRequest) (*ApproveBusinessTripResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApproveBusinessTrip not implemented")
}
func (UnimplementedBusinessTripServiceServer) RejectBusinessTrip(context.Context, *RejectBusinessTripRequest) (*RejectBusinessTripResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RejectBusinessTrip not implemented")
}
func (UnimplementedBusinessTripServiceServer) SubmitTripReport(context.Context, *SubmitTripReportRequest) (*BusinessTripResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitTripReport not implemented")
}

// UnsafeBusinessTripServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BusinessTripServiceServer will
// result in compilation errors.
type UnsafeBusinessTripServiceServer interface {
	mustEmbedUnimplementedBusinessTripServiceServer()
}

func RegisterBusinessTripServiceServer(s grpc.ServiceRegistrar, srv BusinessTripServiceServer) {
	s.RegisterService(&BusinessTripService_ServiceDesc, srv)
}

func _BusinessTripService_CreateBusinessTrip_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBusinessTripRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusinessTripServiceServer).CreateBusinessTrip(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.hrm.v1.BusinessTripService/CreateBusinessTrip",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusinessTripServiceServer).CreateBusinessTrip(ctx, req.(*CreateBusinessTripRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BusinessTripService_UpdateBusinessTrip_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBusinessTripRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusinessTripServiceServer).UpdateBusinessTrip(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.hrm.v1.BusinessTripService/UpdateBusinessTrip",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusinessTripServiceServer).UpdateBusinessTrip(ctx, req.(*UpdateBusinessTripRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BusinessTripService_DeleteBusinessTrip_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBusinessTripRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusinessTripServiceServer).DeleteBusinessTrip(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.hrm.v1.BusinessTripService/DeleteBusinessTrip",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusinessTripServiceServer).DeleteBusinessTrip(ctx, req.(*DeleteBusinessTripRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BusinessTripService_GetBusinessTrip_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBusinessTripRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusinessTripServiceServer).GetBusinessTrip(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.hrm.v1.BusinessTripService/GetBusinessTrip",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusinessTripServiceServer).GetBusinessTrip(ctx, req.(*GetBusinessTripRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BusinessTripService_ListBusinessTrips_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBusinessTripsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusinessTripServiceServer).ListBusinessTrips(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.hrm.v1.BusinessTripService/ListBusinessTrips",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusinessTripServiceServer).ListBusinessTrips(ctx, req.(*ListBusinessTripsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BusinessTripService_ListEmployeeBusinessTrips_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListEmployeeBusinessTripsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusinessTripServiceServer).ListEmployeeBusinessTrips(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.hrm.v1.BusinessTripService/ListEmployeeBusinessTrips",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusinessTripServiceServer).ListEmployeeBusinessTrips(ctx, req.(*ListEmployeeBusinessTripsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BusinessTripService_ListPendingBusinessTrips_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPendingBusinessTripsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusinessTripServiceServer).ListPendingBusinessTrips(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.hrm.v1.BusinessTripService/ListPendingBusinessTrips",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusinessTripServiceServer).ListPendingBusinessTrips(ctx, req.(*ListPendingBusinessTripsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BusinessTripService_SubmitBusinessTrip_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubmitBusinessTripRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusinessTripServiceServer).SubmitBusinessTrip(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.hrm.v1.BusinessTripService/SubmitBusinessTrip",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusinessTripServiceServer).SubmitBusinessTrip(ctx, req.(*SubmitBusinessTripRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BusinessTripService_ApproveBusinessTrip_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApproveBusinessTripRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusinessTripServiceServer).ApproveBusinessTrip(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.hrm.v1.BusinessTripService/ApproveBusinessTrip",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusinessTripServiceServer).ApproveBusinessTrip(ctx, req.(*ApproveBusinessTripRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BusinessTripService_RejectBusinessTrip_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RejectBusinessTripRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusinessTripServiceServer).RejectBusinessTrip(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.hrm.v1.BusinessTripService/RejectBusinessTrip",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusinessTripServiceServer).RejectBusinessTrip(ctx, req.(*RejectBusinessTripRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BusinessTripService_SubmitTripReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubmitTripReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusinessTripServiceServer).SubmitTripReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.hrm.v1.BusinessTripService/SubmitTripReport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusinessTripServiceServer).SubmitTripReport(ctx, req.(*SubmitTripReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BusinessTripService_ServiceDesc is the grpc.ServiceDesc for BusinessTripService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BusinessTripService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.hrm.v1.BusinessTripService",
	HandlerType: (*BusinessTripServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateBusinessTrip",
			Handler:    _BusinessTripService_CreateBusinessTrip_Handler,
		},
		{
			MethodName: "UpdateBusinessTrip",
			Handler:    _BusinessTripService_UpdateBusinessTrip_Handler,
		},
		{
			MethodName: "DeleteBusinessTrip",
			Handler:    _BusinessTripService_DeleteBusinessTrip_Handler,
		},
		{
			MethodName: "GetBusinessTrip",
			Handler:    _BusinessTripService_GetBusinessTrip_Handler,
		},
		{
			MethodName: "ListBusinessTrips",
			Handler:    _BusinessTripService_ListBusinessTrips_Handler,
		},
		{
			MethodName: "ListEmployeeBusinessTrips",
			Handler:    _BusinessTripService_ListEmployeeBusinessTrips_Handler,
		},
		{
			MethodName: "ListPendingBusinessTrips",
			Handler:    _BusinessTripService_ListPendingBusinessTrips_Handler,
		},
		{
			MethodName: "SubmitBusinessTrip",
			Handler:    _BusinessTripService_SubmitBusinessTrip_Handler,
		},
		{
			MethodName: "ApproveBusinessTrip",
			Handler:    _BusinessTripService_ApproveBusinessTrip_Handler,
		},
		{
			MethodName: "RejectBusinessTrip",
			Handler:    _BusinessTripService_RejectBusinessTrip_Handler,
		},
		{
			MethodName: "SubmitTripReport",
			Handler:    _BusinessTripService_SubmitTripReport_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/hrm/v1/business_trip.proto",
}
