// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.9.0
// - protoc             (unknown)
// source: api/file/v1/file.proto

package filev1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationFileServiceCompleteMultipartUpload = "/api.file.v1.FileService/CompleteMultipartUpload"
const OperationFileServiceDeleteFile = "/api.file.v1.FileService/DeleteFile"
const OperationFileServiceGetDownloadURL = "/api.file.v1.FileService/GetDownloadURL"
const OperationFileServiceGetFile = "/api.file.v1.FileService/GetFile"
const OperationFileServiceGetQuota = "/api.file.v1.FileService/GetQuota"
const OperationFileServiceInitiateMultipartUpload = "/api.file.v1.FileService/InitiateMultipartUpload"
const OperationFileServiceListFiles = "/api.file.v1.FileService/ListFiles"
const OperationFileServiceUpload = "/api.file.v1.FileService/Upload"

type FileServiceHTTPServer interface {
	// CompleteMultipartUpload 完成分片上传
	CompleteMultipartUpload(context.Context, *CompleteMultipartRequest) (*UploadResponse, error)
	// DeleteFile 删除文件
	DeleteFile(context.Context, *DeleteFileRequest) (*emptypb.Empty, error)
	// GetDownloadURL 获取下载URL
	GetDownloadURL(context.Context, *GetDownloadURLRequest) (*DownloadURLResponse, error)
	// GetFile 获取文件信息
	GetFile(context.Context, *GetFileRequest) (*FileInfo, error)
	// GetQuota 获取配额信息
	GetQuota(context.Context, *emptypb.Empty) (*QuotaInfo, error)
	// InitiateMultipartUpload 初始化分片上传
	InitiateMultipartUpload(context.Context, *InitiateMultipartRequest) (*InitiateMultipartResponse, error)
	// ListFiles 获取文件列表
	ListFiles(context.Context, *ListFilesRequest) (*ListFilesResponse, error)
	// Upload 上传文件
	Upload(context.Context, *UploadRequest) (*UploadResponse, error)
}

func RegisterFileServiceHTTPServer(s *http.Server, srv FileServiceHTTPServer) {
	r := s.Route("/")
	r.POST("/api/v1/files/upload", _FileService_Upload0_HTTP_Handler(srv))
	r.GET("/api/v1/files/{id}", _FileService_GetFile0_HTTP_Handler(srv))
	r.GET("/api/v1/files", _FileService_ListFiles0_HTTP_Handler(srv))
	r.DELETE("/api/v1/files/{id}", _FileService_DeleteFile0_HTTP_Handler(srv))
	r.GET("/api/v1/files/{id}/download-url", _FileService_GetDownloadURL0_HTTP_Handler(srv))
	r.GET("/api/v1/files/quotas", _FileService_GetQuota0_HTTP_Handler(srv))
	r.POST("/api/v1/files/multipart/initiate", _FileService_InitiateMultipartUpload0_HTTP_Handler(srv))
	r.POST("/api/v1/files/multipart/complete", _FileService_CompleteMultipartUpload0_HTTP_Handler(srv))
}

func _FileService_Upload0_HTTP_Handler(srv FileServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UploadRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationFileServiceUpload)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Upload(ctx, req.(*UploadRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UploadResponse)
		return ctx.Result(200, reply)
	}
}

func _FileService_GetFile0_HTTP_Handler(srv FileServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetFileRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationFileServiceGetFile)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetFile(ctx, req.(*GetFileRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*FileInfo)
		return ctx.Result(200, reply)
	}
}

func _FileService_ListFiles0_HTTP_Handler(srv FileServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListFilesRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationFileServiceListFiles)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListFiles(ctx, req.(*ListFilesRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListFilesResponse)
		return ctx.Result(200, reply)
	}
}

func _FileService_DeleteFile0_HTTP_Handler(srv FileServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteFileRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationFileServiceDeleteFile)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteFile(ctx, req.(*DeleteFileRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _FileService_GetDownloadURL0_HTTP_Handler(srv FileServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetDownloadURLRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationFileServiceGetDownloadURL)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetDownloadURL(ctx, req.(*GetDownloadURLRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DownloadURLResponse)
		return ctx.Result(200, reply)
	}
}

func _FileService_GetQuota0_HTTP_Handler(srv FileServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in emptypb.Empty
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationFileServiceGetQuota)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetQuota(ctx, req.(*emptypb.Empty))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*QuotaInfo)
		return ctx.Result(200, reply)
	}
}

func _FileService_InitiateMultipartUpload0_HTTP_Handler(srv FileServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in InitiateMultipartRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationFileServiceInitiateMultipartUpload)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.InitiateMultipartUpload(ctx, req.(*InitiateMultipartRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*InitiateMultipartResponse)
		return ctx.Result(200, reply)
	}
}

func _FileService_CompleteMultipartUpload0_HTTP_Handler(srv FileServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CompleteMultipartRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationFileServiceCompleteMultipartUpload)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CompleteMultipartUpload(ctx, req.(*CompleteMultipartRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UploadResponse)
		return ctx.Result(200, reply)
	}
}

type FileServiceHTTPClient interface {
	// CompleteMultipartUpload 完成分片上传
	CompleteMultipartUpload(ctx context.Context, req *CompleteMultipartRequest, opts ...http.CallOption) (rsp *UploadResponse, err error)
	// DeleteFile 删除文件
	DeleteFile(ctx context.Context, req *DeleteFileRequest, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	// GetDownloadURL 获取下载URL
	GetDownloadURL(ctx context.Context, req *GetDownloadURLRequest, opts ...http.CallOption) (rsp *DownloadURLResponse, err error)
	// GetFile 获取文件信息
	GetFile(ctx context.Context, req *GetFileRequest, opts ...http.CallOption) (rsp *FileInfo, err error)
	// GetQuota 获取配额信息
	GetQuota(ctx context.Context, req *emptypb.Empty, opts ...http.CallOption) (rsp *QuotaInfo, err error)
	// InitiateMultipartUpload 初始化分片上传
	InitiateMultipartUpload(ctx context.Context, req *InitiateMultipartRequest, opts ...http.CallOption) (rsp *InitiateMultipartResponse, err error)
	// ListFiles 获取文件列表
	ListFiles(ctx context.Context, req *ListFilesRequest, opts ...http.CallOption) (rsp *ListFilesResponse, err error)
	// Upload 上传文件
	Upload(ctx context.Context, req *UploadRequest, opts ...http.CallOption) (rsp *UploadResponse, err error)
}

type FileServiceHTTPClientImpl struct {
	cc *http.Client
}

func NewFileServiceHTTPClient(client *http.Client) FileServiceHTTPClient {
	return &FileServiceHTTPClientImpl{client}
}

// CompleteMultipartUpload 完成分片上传
func (c *FileServiceHTTPClientImpl) CompleteMultipartUpload(ctx context.Context, in *CompleteMultipartRequest, opts ...http.CallOption) (*UploadResponse, error) {
	var out UploadResponse
	pattern := "/api/v1/files/multipart/complete"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationFileServiceCompleteMultipartUpload))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

// DeleteFile 删除文件
func (c *FileServiceHTTPClientImpl) DeleteFile(ctx context.Context, in *DeleteFileRequest, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/api/v1/files/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationFileServiceDeleteFile))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

// GetDownloadURL 获取下载URL
func (c *FileServiceHTTPClientImpl) GetDownloadURL(ctx context.Context, in *GetDownloadURLRequest, opts ...http.CallOption) (*DownloadURLResponse, error) {
	var out DownloadURLResponse
	pattern := "/api/v1/files/{id}/download-url"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationFileServiceGetDownloadURL))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

// GetFile 获取文件信息
func (c *FileServiceHTTPClientImpl) GetFile(ctx context.Context, in *GetFileRequest, opts ...http.CallOption) (*FileInfo, error) {
	var out FileInfo
	pattern := "/api/v1/files/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationFileServiceGetFile))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

// GetQuota 获取配额信息
func (c *FileServiceHTTPClientImpl) GetQuota(ctx context.Context, in *emptypb.Empty, opts ...http.CallOption) (*QuotaInfo, error) {
	var out QuotaInfo
	pattern := "/api/v1/files/quotas"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationFileServiceGetQuota))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

// InitiateMultipartUpload 初始化分片上传
func (c *FileServiceHTTPClientImpl) InitiateMultipartUpload(ctx context.Context, in *InitiateMultipartRequest, opts ...http.CallOption) (*InitiateMultipartResponse, error) {
	var out InitiateMultipartResponse
	pattern := "/api/v1/files/multipart/initiate"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationFileServiceInitiateMultipartUpload))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

// ListFiles 获取文件列表
func (c *FileServiceHTTPClientImpl) ListFiles(ctx context.Context, in *ListFilesRequest, opts ...http.CallOption) (*ListFilesResponse, error) {
	var out ListFilesResponse
	pattern := "/api/v1/files"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationFileServiceListFiles))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

// Upload 上传文件
func (c *FileServiceHTTPClientImpl) Upload(ctx context.Context, in *UploadRequest, opts ...http.CallOption) (*UploadResponse, error) {
	var out UploadResponse
	pattern := "/api/v1/files/upload"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationFileServiceUpload))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
