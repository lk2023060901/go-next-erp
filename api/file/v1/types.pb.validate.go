// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/file/v1/types.proto

package filev1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on UploadRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UploadRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UploadRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UploadRequestMultiError, or
// nil if none found.
func (m *UploadRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UploadRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetFilename()) < 1 {
		err := UploadRequestValidationError{
			field:  "Filename",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for ContentType

	if m.GetSize() <= 0 {
		err := UploadRequestValidationError{
			field:  "Size",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Category

	// no validation rules for Metadata

	// no validation rules for IsTemporary

	if all {
		switch v := interface{}(m.GetExpiresAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UploadRequestValidationError{
					field:  "ExpiresAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UploadRequestValidationError{
					field:  "ExpiresAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetExpiresAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UploadRequestValidationError{
				field:  "ExpiresAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for AccessLevel

	// no validation rules for Content

	if len(errors) > 0 {
		return UploadRequestMultiError(errors)
	}

	return nil
}

// UploadRequestMultiError is an error wrapping multiple validation errors
// returned by UploadRequest.ValidateAll() if the designated constraints
// aren't met.
type UploadRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UploadRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UploadRequestMultiError) AllErrors() []error { return m }

// UploadRequestValidationError is the validation error returned by
// UploadRequest.Validate if the designated constraints aren't met.
type UploadRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UploadRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UploadRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UploadRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UploadRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UploadRequestValidationError) ErrorName() string { return "UploadRequestValidationError" }

// Error satisfies the builtin error interface
func (e UploadRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUploadRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UploadRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UploadRequestValidationError{}

// Validate checks the field values on UploadResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UploadResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UploadResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UploadResponseMultiError,
// or nil if none found.
func (m *UploadResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UploadResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for FileId

	// no validation rules for Filename

	// no validation rules for Size

	// no validation rules for MimeType

	// no validation rules for StorageKey

	// no validation rules for Checksum

	// no validation rules for DownloadUrl

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UploadResponseValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UploadResponseValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UploadResponseValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UploadResponseMultiError(errors)
	}

	return nil
}

// UploadResponseMultiError is an error wrapping multiple validation errors
// returned by UploadResponse.ValidateAll() if the designated constraints
// aren't met.
type UploadResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UploadResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UploadResponseMultiError) AllErrors() []error { return m }

// UploadResponseValidationError is the validation error returned by
// UploadResponse.Validate if the designated constraints aren't met.
type UploadResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UploadResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UploadResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UploadResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UploadResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UploadResponseValidationError) ErrorName() string { return "UploadResponseValidationError" }

// Error satisfies the builtin error interface
func (e UploadResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUploadResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UploadResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UploadResponseValidationError{}

// Validate checks the field values on GetFileRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetFileRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetFileRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetFileRequestMultiError,
// or nil if none found.
func (m *GetFileRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetFileRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetId()) < 1 {
		err := GetFileRequestValidationError{
			field:  "Id",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetFileRequestMultiError(errors)
	}

	return nil
}

// GetFileRequestMultiError is an error wrapping multiple validation errors
// returned by GetFileRequest.ValidateAll() if the designated constraints
// aren't met.
type GetFileRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetFileRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetFileRequestMultiError) AllErrors() []error { return m }

// GetFileRequestValidationError is the validation error returned by
// GetFileRequest.Validate if the designated constraints aren't met.
type GetFileRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetFileRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetFileRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetFileRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetFileRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetFileRequestValidationError) ErrorName() string { return "GetFileRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetFileRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetFileRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetFileRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetFileRequestValidationError{}

// Validate checks the field values on FileInfo with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *FileInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FileInfo with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in FileInfoMultiError, or nil
// if none found.
func (m *FileInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *FileInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for TenantId

	// no validation rules for Filename

	// no validation rules for OriginalName

	// no validation rules for Size

	// no validation rules for MimeType

	// no validation rules for Extension

	// no validation rules for Category

	// no validation rules for Checksum

	// no validation rules for StorageKey

	// no validation rules for Bucket

	// no validation rules for Metadata

	// no validation rules for Status

	// no validation rules for IsTemporary

	// no validation rules for IsPublic

	// no validation rules for VirusScanned

	// no validation rules for VirusScanResult

	// no validation rules for DownloadCount

	// no validation rules for VersionNumber

	// no validation rules for AccessLevel

	// no validation rules for UploadedBy

	if all {
		switch v := interface{}(m.GetUploadedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, FileInfoValidationError{
					field:  "UploadedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, FileInfoValidationError{
					field:  "UploadedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUploadedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FileInfoValidationError{
				field:  "UploadedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetExpiresAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, FileInfoValidationError{
					field:  "ExpiresAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, FileInfoValidationError{
					field:  "ExpiresAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetExpiresAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FileInfoValidationError{
				field:  "ExpiresAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for PreviewUrl

	// no validation rules for DownloadUrl

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, FileInfoValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, FileInfoValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FileInfoValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, FileInfoValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, FileInfoValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FileInfoValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return FileInfoMultiError(errors)
	}

	return nil
}

// FileInfoMultiError is an error wrapping multiple validation errors returned
// by FileInfo.ValidateAll() if the designated constraints aren't met.
type FileInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FileInfoMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FileInfoMultiError) AllErrors() []error { return m }

// FileInfoValidationError is the validation error returned by
// FileInfo.Validate if the designated constraints aren't met.
type FileInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FileInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FileInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FileInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FileInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FileInfoValidationError) ErrorName() string { return "FileInfoValidationError" }

// Error satisfies the builtin error interface
func (e FileInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFileInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FileInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FileInfoValidationError{}

// Validate checks the field values on ListFilesRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListFilesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListFilesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListFilesRequestMultiError, or nil if none found.
func (m *ListFilesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListFilesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetPage() < 1 {
		err := ListFilesRequestValidationError{
			field:  "Page",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if val := m.GetPageSize(); val < 1 || val > 100 {
		err := ListFilesRequestValidationError{
			field:  "PageSize",
			reason: "value must be inside range [1, 100]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Filename

	// no validation rules for Category

	// no validation rules for MimeType

	// no validation rules for Status

	// no validation rules for IsTemporary

	// no validation rules for UploadedBy

	if all {
		switch v := interface{}(m.GetStartDate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListFilesRequestValidationError{
					field:  "StartDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListFilesRequestValidationError{
					field:  "StartDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStartDate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListFilesRequestValidationError{
				field:  "StartDate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetEndDate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListFilesRequestValidationError{
					field:  "EndDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListFilesRequestValidationError{
					field:  "EndDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEndDate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListFilesRequestValidationError{
				field:  "EndDate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for SortBy

	// no validation rules for SortOrder

	// no validation rules for IncludeStats

	if len(errors) > 0 {
		return ListFilesRequestMultiError(errors)
	}

	return nil
}

// ListFilesRequestMultiError is an error wrapping multiple validation errors
// returned by ListFilesRequest.ValidateAll() if the designated constraints
// aren't met.
type ListFilesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListFilesRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListFilesRequestMultiError) AllErrors() []error { return m }

// ListFilesRequestValidationError is the validation error returned by
// ListFilesRequest.Validate if the designated constraints aren't met.
type ListFilesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListFilesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListFilesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListFilesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListFilesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListFilesRequestValidationError) ErrorName() string { return "ListFilesRequestValidationError" }

// Error satisfies the builtin error interface
func (e ListFilesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListFilesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListFilesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListFilesRequestValidationError{}

// Validate checks the field values on ListFilesResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListFilesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListFilesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListFilesResponseMultiError, or nil if none found.
func (m *ListFilesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListFilesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetFiles() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListFilesResponseValidationError{
						field:  fmt.Sprintf("Files[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListFilesResponseValidationError{
						field:  fmt.Sprintf("Files[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListFilesResponseValidationError{
					field:  fmt.Sprintf("Files[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Total

	// no validation rules for Page

	// no validation rules for PageSize

	// no validation rules for TotalPages

	if all {
		switch v := interface{}(m.GetStats()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListFilesResponseValidationError{
					field:  "Stats",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListFilesResponseValidationError{
					field:  "Stats",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStats()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListFilesResponseValidationError{
				field:  "Stats",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ListFilesResponseMultiError(errors)
	}

	return nil
}

// ListFilesResponseMultiError is an error wrapping multiple validation errors
// returned by ListFilesResponse.ValidateAll() if the designated constraints
// aren't met.
type ListFilesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListFilesResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListFilesResponseMultiError) AllErrors() []error { return m }

// ListFilesResponseValidationError is the validation error returned by
// ListFilesResponse.Validate if the designated constraints aren't met.
type ListFilesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListFilesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListFilesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListFilesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListFilesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListFilesResponseValidationError) ErrorName() string {
	return "ListFilesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListFilesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListFilesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListFilesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListFilesResponseValidationError{}

// Validate checks the field values on FileStats with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *FileStats) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FileStats with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in FileStatsMultiError, or nil
// if none found.
func (m *FileStats) ValidateAll() error {
	return m.validate(true)
}

func (m *FileStats) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TotalFiles

	// no validation rules for TotalSize

	// no validation rules for TotalSizeFormatted

	if len(errors) > 0 {
		return FileStatsMultiError(errors)
	}

	return nil
}

// FileStatsMultiError is an error wrapping multiple validation errors returned
// by FileStats.ValidateAll() if the designated constraints aren't met.
type FileStatsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FileStatsMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FileStatsMultiError) AllErrors() []error { return m }

// FileStatsValidationError is the validation error returned by
// FileStats.Validate if the designated constraints aren't met.
type FileStatsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FileStatsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FileStatsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FileStatsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FileStatsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FileStatsValidationError) ErrorName() string { return "FileStatsValidationError" }

// Error satisfies the builtin error interface
func (e FileStatsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFileStats.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FileStatsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FileStatsValidationError{}

// Validate checks the field values on DeleteFileRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DeleteFileRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteFileRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteFileRequestMultiError, or nil if none found.
func (m *DeleteFileRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteFileRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetId()) < 1 {
		err := DeleteFileRequestValidationError{
			field:  "Id",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteFileRequestMultiError(errors)
	}

	return nil
}

// DeleteFileRequestMultiError is an error wrapping multiple validation errors
// returned by DeleteFileRequest.ValidateAll() if the designated constraints
// aren't met.
type DeleteFileRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteFileRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteFileRequestMultiError) AllErrors() []error { return m }

// DeleteFileRequestValidationError is the validation error returned by
// DeleteFileRequest.Validate if the designated constraints aren't met.
type DeleteFileRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteFileRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteFileRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteFileRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteFileRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteFileRequestValidationError) ErrorName() string {
	return "DeleteFileRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteFileRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteFileRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteFileRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteFileRequestValidationError{}

// Validate checks the field values on GetDownloadURLRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetDownloadURLRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetDownloadURLRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetDownloadURLRequestMultiError, or nil if none found.
func (m *GetDownloadURLRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetDownloadURLRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetId()) < 1 {
		err := GetDownloadURLRequestValidationError{
			field:  "Id",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Expiry

	if len(errors) > 0 {
		return GetDownloadURLRequestMultiError(errors)
	}

	return nil
}

// GetDownloadURLRequestMultiError is an error wrapping multiple validation
// errors returned by GetDownloadURLRequest.ValidateAll() if the designated
// constraints aren't met.
type GetDownloadURLRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetDownloadURLRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetDownloadURLRequestMultiError) AllErrors() []error { return m }

// GetDownloadURLRequestValidationError is the validation error returned by
// GetDownloadURLRequest.Validate if the designated constraints aren't met.
type GetDownloadURLRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDownloadURLRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDownloadURLRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDownloadURLRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDownloadURLRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDownloadURLRequestValidationError) ErrorName() string {
	return "GetDownloadURLRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetDownloadURLRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDownloadURLRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDownloadURLRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDownloadURLRequestValidationError{}

// Validate checks the field values on DownloadURLResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DownloadURLResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DownloadURLResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DownloadURLResponseMultiError, or nil if none found.
func (m *DownloadURLResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DownloadURLResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Url

	if all {
		switch v := interface{}(m.GetExpiresAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DownloadURLResponseValidationError{
					field:  "ExpiresAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DownloadURLResponseValidationError{
					field:  "ExpiresAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetExpiresAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DownloadURLResponseValidationError{
				field:  "ExpiresAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DownloadURLResponseMultiError(errors)
	}

	return nil
}

// DownloadURLResponseMultiError is an error wrapping multiple validation
// errors returned by DownloadURLResponse.ValidateAll() if the designated
// constraints aren't met.
type DownloadURLResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DownloadURLResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DownloadURLResponseMultiError) AllErrors() []error { return m }

// DownloadURLResponseValidationError is the validation error returned by
// DownloadURLResponse.Validate if the designated constraints aren't met.
type DownloadURLResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DownloadURLResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DownloadURLResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DownloadURLResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DownloadURLResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DownloadURLResponseValidationError) ErrorName() string {
	return "DownloadURLResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DownloadURLResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDownloadURLResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DownloadURLResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DownloadURLResponseValidationError{}

// Validate checks the field values on QuotaInfo with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *QuotaInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QuotaInfo with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in QuotaInfoMultiError, or nil
// if none found.
func (m *QuotaInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *QuotaInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for SubjectType

	// no validation rules for SubjectId

	// no validation rules for QuotaLimit

	// no validation rules for QuotaUsed

	// no validation rules for QuotaAvailable

	// no validation rules for QuotaUsedPercent

	// no validation rules for QuotaLimitFormatted

	// no validation rules for QuotaUsedFormatted

	// no validation rules for IsWarning

	// no validation rules for IsExceeded

	if len(errors) > 0 {
		return QuotaInfoMultiError(errors)
	}

	return nil
}

// QuotaInfoMultiError is an error wrapping multiple validation errors returned
// by QuotaInfo.ValidateAll() if the designated constraints aren't met.
type QuotaInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QuotaInfoMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QuotaInfoMultiError) AllErrors() []error { return m }

// QuotaInfoValidationError is the validation error returned by
// QuotaInfo.Validate if the designated constraints aren't met.
type QuotaInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QuotaInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QuotaInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QuotaInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QuotaInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QuotaInfoValidationError) ErrorName() string { return "QuotaInfoValidationError" }

// Error satisfies the builtin error interface
func (e QuotaInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQuotaInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QuotaInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QuotaInfoValidationError{}

// Validate checks the field values on InitiateMultipartRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *InitiateMultipartRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on InitiateMultipartRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// InitiateMultipartRequestMultiError, or nil if none found.
func (m *InitiateMultipartRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *InitiateMultipartRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetFilename()) < 1 {
		err := InitiateMultipartRequestValidationError{
			field:  "Filename",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetTotalSize() <= 0 {
		err := InitiateMultipartRequestValidationError{
			field:  "TotalSize",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for ContentType

	// no validation rules for IsTemporary

	if all {
		switch v := interface{}(m.GetExpiresAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, InitiateMultipartRequestValidationError{
					field:  "ExpiresAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, InitiateMultipartRequestValidationError{
					field:  "ExpiresAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetExpiresAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return InitiateMultipartRequestValidationError{
				field:  "ExpiresAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return InitiateMultipartRequestMultiError(errors)
	}

	return nil
}

// InitiateMultipartRequestMultiError is an error wrapping multiple validation
// errors returned by InitiateMultipartRequest.ValidateAll() if the designated
// constraints aren't met.
type InitiateMultipartRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InitiateMultipartRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InitiateMultipartRequestMultiError) AllErrors() []error { return m }

// InitiateMultipartRequestValidationError is the validation error returned by
// InitiateMultipartRequest.Validate if the designated constraints aren't met.
type InitiateMultipartRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InitiateMultipartRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InitiateMultipartRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InitiateMultipartRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InitiateMultipartRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InitiateMultipartRequestValidationError) ErrorName() string {
	return "InitiateMultipartRequestValidationError"
}

// Error satisfies the builtin error interface
func (e InitiateMultipartRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInitiateMultipartRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InitiateMultipartRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InitiateMultipartRequestValidationError{}

// Validate checks the field values on InitiateMultipartResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *InitiateMultipartResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on InitiateMultipartResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// InitiateMultipartResponseMultiError, or nil if none found.
func (m *InitiateMultipartResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *InitiateMultipartResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UploadId

	// no validation rules for StorageKey

	// no validation rules for PartSize

	// no validation rules for TotalParts

	if len(errors) > 0 {
		return InitiateMultipartResponseMultiError(errors)
	}

	return nil
}

// InitiateMultipartResponseMultiError is an error wrapping multiple validation
// errors returned by InitiateMultipartResponse.ValidateAll() if the
// designated constraints aren't met.
type InitiateMultipartResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InitiateMultipartResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InitiateMultipartResponseMultiError) AllErrors() []error { return m }

// InitiateMultipartResponseValidationError is the validation error returned by
// InitiateMultipartResponse.Validate if the designated constraints aren't met.
type InitiateMultipartResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InitiateMultipartResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InitiateMultipartResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InitiateMultipartResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InitiateMultipartResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InitiateMultipartResponseValidationError) ErrorName() string {
	return "InitiateMultipartResponseValidationError"
}

// Error satisfies the builtin error interface
func (e InitiateMultipartResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInitiateMultipartResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InitiateMultipartResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InitiateMultipartResponseValidationError{}

// Validate checks the field values on CompleteMultipartRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CompleteMultipartRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CompleteMultipartRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CompleteMultipartRequestMultiError, or nil if none found.
func (m *CompleteMultipartRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CompleteMultipartRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUploadId()) < 1 {
		err := CompleteMultipartRequestValidationError{
			field:  "UploadId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetParts()) < 1 {
		err := CompleteMultipartRequestValidationError{
			field:  "Parts",
			reason: "value must contain at least 1 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetParts() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CompleteMultipartRequestValidationError{
						field:  fmt.Sprintf("Parts[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CompleteMultipartRequestValidationError{
						field:  fmt.Sprintf("Parts[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CompleteMultipartRequestValidationError{
					field:  fmt.Sprintf("Parts[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CompleteMultipartRequestMultiError(errors)
	}

	return nil
}

// CompleteMultipartRequestMultiError is an error wrapping multiple validation
// errors returned by CompleteMultipartRequest.ValidateAll() if the designated
// constraints aren't met.
type CompleteMultipartRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CompleteMultipartRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CompleteMultipartRequestMultiError) AllErrors() []error { return m }

// CompleteMultipartRequestValidationError is the validation error returned by
// CompleteMultipartRequest.Validate if the designated constraints aren't met.
type CompleteMultipartRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CompleteMultipartRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CompleteMultipartRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CompleteMultipartRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CompleteMultipartRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CompleteMultipartRequestValidationError) ErrorName() string {
	return "CompleteMultipartRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CompleteMultipartRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCompleteMultipartRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CompleteMultipartRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CompleteMultipartRequestValidationError{}

// Validate checks the field values on PartInfo with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PartInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PartInfo with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PartInfoMultiError, or nil
// if none found.
func (m *PartInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *PartInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PartNumber

	// no validation rules for Etag

	if len(errors) > 0 {
		return PartInfoMultiError(errors)
	}

	return nil
}

// PartInfoMultiError is an error wrapping multiple validation errors returned
// by PartInfo.ValidateAll() if the designated constraints aren't met.
type PartInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PartInfoMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PartInfoMultiError) AllErrors() []error { return m }

// PartInfoValidationError is the validation error returned by
// PartInfo.Validate if the designated constraints aren't met.
type PartInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PartInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PartInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PartInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PartInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PartInfoValidationError) ErrorName() string { return "PartInfoValidationError" }

// Error satisfies the builtin error interface
func (e PartInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPartInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PartInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PartInfoValidationError{}
